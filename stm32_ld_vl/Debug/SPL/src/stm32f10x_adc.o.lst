   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC0:
  21 0000 2E2E2F53 		.ascii	"../SPL/src/stm32f10x_adc.c\000"
  21      504C2F73 
  21      72632F73 
  21      746D3332 
  21      66313078 
  22 001b 00       		.text
  23              		.align	2
  24              		.global	ADC_DeInit
  25              		.thumb
  26              		.thumb_func
  28              	ADC_DeInit:
  29              	.LFB29:
  30              		.file 1 "../SPL/src/stm32f10x_adc.c"
   1:../SPL/src/stm32f10x_adc.c **** /**
   2:../SPL/src/stm32f10x_adc.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_adc.c ****   * @file    stm32f10x_adc.c
   4:../SPL/src/stm32f10x_adc.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_adc.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_adc.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_adc.c ****   * @brief   This file provides all the ADC firmware functions.
   8:../SPL/src/stm32f10x_adc.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_adc.c ****   * @attention
  10:../SPL/src/stm32f10x_adc.c ****   *
  11:../SPL/src/stm32f10x_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_adc.c ****   *
  18:../SPL/src/stm32f10x_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_adc.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_adc.c ****   */
  21:../SPL/src/stm32f10x_adc.c **** 
  22:../SPL/src/stm32f10x_adc.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_adc.c **** #include "stm32f10x_adc.h"
  24:../SPL/src/stm32f10x_adc.c **** #include "stm32f10x_rcc.h"
  25:../SPL/src/stm32f10x_adc.c **** 
  26:../SPL/src/stm32f10x_adc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../SPL/src/stm32f10x_adc.c ****   * @{
  28:../SPL/src/stm32f10x_adc.c ****   */
  29:../SPL/src/stm32f10x_adc.c **** 
  30:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC 
  31:../SPL/src/stm32f10x_adc.c ****   * @brief ADC driver modules
  32:../SPL/src/stm32f10x_adc.c ****   * @{
  33:../SPL/src/stm32f10x_adc.c ****   */
  34:../SPL/src/stm32f10x_adc.c **** 
  35:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_TypesDefinitions
  36:../SPL/src/stm32f10x_adc.c ****   * @{
  37:../SPL/src/stm32f10x_adc.c ****   */
  38:../SPL/src/stm32f10x_adc.c **** 
  39:../SPL/src/stm32f10x_adc.c **** /**
  40:../SPL/src/stm32f10x_adc.c ****   * @}
  41:../SPL/src/stm32f10x_adc.c ****   */
  42:../SPL/src/stm32f10x_adc.c **** 
  43:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Defines
  44:../SPL/src/stm32f10x_adc.c ****   * @{
  45:../SPL/src/stm32f10x_adc.c ****   */
  46:../SPL/src/stm32f10x_adc.c **** 
  47:../SPL/src/stm32f10x_adc.c **** /* ADC DISCNUM mask */
  48:../SPL/src/stm32f10x_adc.c **** #define CR1_DISCNUM_Reset           ((uint32_t)0xFFFF1FFF)
  49:../SPL/src/stm32f10x_adc.c **** 
  50:../SPL/src/stm32f10x_adc.c **** /* ADC DISCEN mask */
  51:../SPL/src/stm32f10x_adc.c **** #define CR1_DISCEN_Set              ((uint32_t)0x00000800)
  52:../SPL/src/stm32f10x_adc.c **** #define CR1_DISCEN_Reset            ((uint32_t)0xFFFFF7FF)
  53:../SPL/src/stm32f10x_adc.c **** 
  54:../SPL/src/stm32f10x_adc.c **** /* ADC JAUTO mask */
  55:../SPL/src/stm32f10x_adc.c **** #define CR1_JAUTO_Set               ((uint32_t)0x00000400)
  56:../SPL/src/stm32f10x_adc.c **** #define CR1_JAUTO_Reset             ((uint32_t)0xFFFFFBFF)
  57:../SPL/src/stm32f10x_adc.c **** 
  58:../SPL/src/stm32f10x_adc.c **** /* ADC JDISCEN mask */
  59:../SPL/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Set             ((uint32_t)0x00001000)
  60:../SPL/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Reset           ((uint32_t)0xFFFFEFFF)
  61:../SPL/src/stm32f10x_adc.c **** 
  62:../SPL/src/stm32f10x_adc.c **** /* ADC AWDCH mask */
  63:../SPL/src/stm32f10x_adc.c **** #define CR1_AWDCH_Reset             ((uint32_t)0xFFFFFFE0)
  64:../SPL/src/stm32f10x_adc.c **** 
  65:../SPL/src/stm32f10x_adc.c **** /* ADC Analog watchdog enable mode mask */
  66:../SPL/src/stm32f10x_adc.c **** #define CR1_AWDMode_Reset           ((uint32_t)0xFF3FFDFF)
  67:../SPL/src/stm32f10x_adc.c **** 
  68:../SPL/src/stm32f10x_adc.c **** /* CR1 register Mask */
  69:../SPL/src/stm32f10x_adc.c **** #define CR1_CLEAR_Mask              ((uint32_t)0xFFF0FEFF)
  70:../SPL/src/stm32f10x_adc.c **** 
  71:../SPL/src/stm32f10x_adc.c **** /* ADC ADON mask */
  72:../SPL/src/stm32f10x_adc.c **** #define CR2_ADON_Set                ((uint32_t)0x00000001)
  73:../SPL/src/stm32f10x_adc.c **** #define CR2_ADON_Reset              ((uint32_t)0xFFFFFFFE)
  74:../SPL/src/stm32f10x_adc.c **** 
  75:../SPL/src/stm32f10x_adc.c **** /* ADC DMA mask */
  76:../SPL/src/stm32f10x_adc.c **** #define CR2_DMA_Set                 ((uint32_t)0x00000100)
  77:../SPL/src/stm32f10x_adc.c **** #define CR2_DMA_Reset               ((uint32_t)0xFFFFFEFF)
  78:../SPL/src/stm32f10x_adc.c **** 
  79:../SPL/src/stm32f10x_adc.c **** /* ADC RSTCAL mask */
  80:../SPL/src/stm32f10x_adc.c **** #define CR2_RSTCAL_Set              ((uint32_t)0x00000008)
  81:../SPL/src/stm32f10x_adc.c **** 
  82:../SPL/src/stm32f10x_adc.c **** /* ADC CAL mask */
  83:../SPL/src/stm32f10x_adc.c **** #define CR2_CAL_Set                 ((uint32_t)0x00000004)
  84:../SPL/src/stm32f10x_adc.c **** 
  85:../SPL/src/stm32f10x_adc.c **** /* ADC SWSTART mask */
  86:../SPL/src/stm32f10x_adc.c **** #define CR2_SWSTART_Set             ((uint32_t)0x00400000)
  87:../SPL/src/stm32f10x_adc.c **** 
  88:../SPL/src/stm32f10x_adc.c **** /* ADC EXTTRIG mask */
  89:../SPL/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Set             ((uint32_t)0x00100000)
  90:../SPL/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Reset           ((uint32_t)0xFFEFFFFF)
  91:../SPL/src/stm32f10x_adc.c **** 
  92:../SPL/src/stm32f10x_adc.c **** /* ADC Software start mask */
  93:../SPL/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Set     ((uint32_t)0x00500000)
  94:../SPL/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Reset   ((uint32_t)0xFFAFFFFF)
  95:../SPL/src/stm32f10x_adc.c **** 
  96:../SPL/src/stm32f10x_adc.c **** /* ADC JEXTSEL mask */
  97:../SPL/src/stm32f10x_adc.c **** #define CR2_JEXTSEL_Reset           ((uint32_t)0xFFFF8FFF)
  98:../SPL/src/stm32f10x_adc.c **** 
  99:../SPL/src/stm32f10x_adc.c **** /* ADC JEXTTRIG mask */
 100:../SPL/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Set            ((uint32_t)0x00008000)
 101:../SPL/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Reset          ((uint32_t)0xFFFF7FFF)
 102:../SPL/src/stm32f10x_adc.c **** 
 103:../SPL/src/stm32f10x_adc.c **** /* ADC JSWSTART mask */
 104:../SPL/src/stm32f10x_adc.c **** #define CR2_JSWSTART_Set            ((uint32_t)0x00200000)
 105:../SPL/src/stm32f10x_adc.c **** 
 106:../SPL/src/stm32f10x_adc.c **** /* ADC injected software start mask */
 107:../SPL/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Set   ((uint32_t)0x00208000)
 108:../SPL/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Reset ((uint32_t)0xFFDF7FFF)
 109:../SPL/src/stm32f10x_adc.c **** 
 110:../SPL/src/stm32f10x_adc.c **** /* ADC TSPD mask */
 111:../SPL/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Set             ((uint32_t)0x00800000)
 112:../SPL/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Reset           ((uint32_t)0xFF7FFFFF)
 113:../SPL/src/stm32f10x_adc.c **** 
 114:../SPL/src/stm32f10x_adc.c **** /* CR2 register Mask */
 115:../SPL/src/stm32f10x_adc.c **** #define CR2_CLEAR_Mask              ((uint32_t)0xFFF1F7FD)
 116:../SPL/src/stm32f10x_adc.c **** 
 117:../SPL/src/stm32f10x_adc.c **** /* ADC SQx mask */
 118:../SPL/src/stm32f10x_adc.c **** #define SQR3_SQ_Set                 ((uint32_t)0x0000001F)
 119:../SPL/src/stm32f10x_adc.c **** #define SQR2_SQ_Set                 ((uint32_t)0x0000001F)
 120:../SPL/src/stm32f10x_adc.c **** #define SQR1_SQ_Set                 ((uint32_t)0x0000001F)
 121:../SPL/src/stm32f10x_adc.c **** 
 122:../SPL/src/stm32f10x_adc.c **** /* SQR1 register Mask */
 123:../SPL/src/stm32f10x_adc.c **** #define SQR1_CLEAR_Mask             ((uint32_t)0xFF0FFFFF)
 124:../SPL/src/stm32f10x_adc.c **** 
 125:../SPL/src/stm32f10x_adc.c **** /* ADC JSQx mask */
 126:../SPL/src/stm32f10x_adc.c **** #define JSQR_JSQ_Set                ((uint32_t)0x0000001F)
 127:../SPL/src/stm32f10x_adc.c **** 
 128:../SPL/src/stm32f10x_adc.c **** /* ADC JL mask */
 129:../SPL/src/stm32f10x_adc.c **** #define JSQR_JL_Set                 ((uint32_t)0x00300000)
 130:../SPL/src/stm32f10x_adc.c **** #define JSQR_JL_Reset               ((uint32_t)0xFFCFFFFF)
 131:../SPL/src/stm32f10x_adc.c **** 
 132:../SPL/src/stm32f10x_adc.c **** /* ADC SMPx mask */
 133:../SPL/src/stm32f10x_adc.c **** #define SMPR1_SMP_Set               ((uint32_t)0x00000007)
 134:../SPL/src/stm32f10x_adc.c **** #define SMPR2_SMP_Set               ((uint32_t)0x00000007)
 135:../SPL/src/stm32f10x_adc.c **** 
 136:../SPL/src/stm32f10x_adc.c **** /* ADC JDRx registers offset */
 137:../SPL/src/stm32f10x_adc.c **** #define JDR_Offset                  ((uint8_t)0x28)
 138:../SPL/src/stm32f10x_adc.c **** 
 139:../SPL/src/stm32f10x_adc.c **** /* ADC1 DR register base address */
 140:../SPL/src/stm32f10x_adc.c **** #define DR_ADDRESS                  ((uint32_t)0x4001244C)
 141:../SPL/src/stm32f10x_adc.c **** 
 142:../SPL/src/stm32f10x_adc.c **** /**
 143:../SPL/src/stm32f10x_adc.c ****   * @}
 144:../SPL/src/stm32f10x_adc.c ****   */
 145:../SPL/src/stm32f10x_adc.c **** 
 146:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Macros
 147:../SPL/src/stm32f10x_adc.c ****   * @{
 148:../SPL/src/stm32f10x_adc.c ****   */
 149:../SPL/src/stm32f10x_adc.c **** 
 150:../SPL/src/stm32f10x_adc.c **** /**
 151:../SPL/src/stm32f10x_adc.c ****   * @}
 152:../SPL/src/stm32f10x_adc.c ****   */
 153:../SPL/src/stm32f10x_adc.c **** 
 154:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Variables
 155:../SPL/src/stm32f10x_adc.c ****   * @{
 156:../SPL/src/stm32f10x_adc.c ****   */
 157:../SPL/src/stm32f10x_adc.c **** 
 158:../SPL/src/stm32f10x_adc.c **** /**
 159:../SPL/src/stm32f10x_adc.c ****   * @}
 160:../SPL/src/stm32f10x_adc.c ****   */
 161:../SPL/src/stm32f10x_adc.c **** 
 162:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_FunctionPrototypes
 163:../SPL/src/stm32f10x_adc.c ****   * @{
 164:../SPL/src/stm32f10x_adc.c ****   */
 165:../SPL/src/stm32f10x_adc.c **** 
 166:../SPL/src/stm32f10x_adc.c **** /**
 167:../SPL/src/stm32f10x_adc.c ****   * @}
 168:../SPL/src/stm32f10x_adc.c ****   */
 169:../SPL/src/stm32f10x_adc.c **** 
 170:../SPL/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Functions
 171:../SPL/src/stm32f10x_adc.c ****   * @{
 172:../SPL/src/stm32f10x_adc.c ****   */
 173:../SPL/src/stm32f10x_adc.c **** 
 174:../SPL/src/stm32f10x_adc.c **** /**
 175:../SPL/src/stm32f10x_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
 176:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 177:../SPL/src/stm32f10x_adc.c ****   * @retval None
 178:../SPL/src/stm32f10x_adc.c ****   */
 179:../SPL/src/stm32f10x_adc.c **** void ADC_DeInit(ADC_TypeDef* ADCx)
 180:../SPL/src/stm32f10x_adc.c **** {
  31              		.loc 1 180 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 7860     		str	r0, [r7, #4]
 181:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 182:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
  47              		.loc 1 182 0
  48 0008 7A68     		ldr	r2, [r7, #4]
  49 000a 234B     		ldr	r3, .L6
  50 000c 9A42     		cmp	r2, r3
  51 000e 0CD0     		beq	.L2
  52              		.loc 1 182 0 is_stmt 0 discriminator 1
  53 0010 7A68     		ldr	r2, [r7, #4]
  54 0012 224B     		ldr	r3, .L6+4
  55 0014 9A42     		cmp	r2, r3
  56 0016 08D0     		beq	.L2
  57              		.loc 1 182 0 discriminator 2
  58 0018 7A68     		ldr	r2, [r7, #4]
  59 001a 214B     		ldr	r3, .L6+8
  60 001c 9A42     		cmp	r2, r3
  61 001e 04D0     		beq	.L2
  62              		.loc 1 182 0 discriminator 3
  63 0020 2048     		ldr	r0, .L6+12
  64 0022 4FF0B601 		mov	r1, #182
  65 0026 FFF7FEFF 		bl	assert_failed
  66              	.L2:
 183:../SPL/src/stm32f10x_adc.c ****   
 184:../SPL/src/stm32f10x_adc.c ****   if (ADCx == ADC1)
  67              		.loc 1 184 0 is_stmt 1
  68 002a 7A68     		ldr	r2, [r7, #4]
  69 002c 1A4B     		ldr	r3, .L6
  70 002e 9A42     		cmp	r2, r3
  71 0030 0CD1     		bne	.L3
 185:../SPL/src/stm32f10x_adc.c ****   {
 186:../SPL/src/stm32f10x_adc.c ****     /* Enable ADC1 reset state */
 187:../SPL/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
  72              		.loc 1 187 0
  73 0032 4FF40070 		mov	r0, #512
  74 0036 4FF00101 		mov	r1, #1
  75 003a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 188:../SPL/src/stm32f10x_adc.c ****     /* Release ADC1 from reset state */
 189:../SPL/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
  76              		.loc 1 189 0
  77 003e 4FF40070 		mov	r0, #512
  78 0042 4FF00001 		mov	r1, #0
  79 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  80 004a 20E0     		b	.L1
  81              	.L3:
 190:../SPL/src/stm32f10x_adc.c ****   }
 191:../SPL/src/stm32f10x_adc.c ****   else if (ADCx == ADC2)
  82              		.loc 1 191 0
  83 004c 7A68     		ldr	r2, [r7, #4]
  84 004e 134B     		ldr	r3, .L6+4
  85 0050 9A42     		cmp	r2, r3
  86 0052 0CD1     		bne	.L5
 192:../SPL/src/stm32f10x_adc.c ****   {
 193:../SPL/src/stm32f10x_adc.c ****     /* Enable ADC2 reset state */
 194:../SPL/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
  87              		.loc 1 194 0
  88 0054 4FF48060 		mov	r0, #1024
  89 0058 4FF00101 		mov	r1, #1
  90 005c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 195:../SPL/src/stm32f10x_adc.c ****     /* Release ADC2 from reset state */
 196:../SPL/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
  91              		.loc 1 196 0
  92 0060 4FF48060 		mov	r0, #1024
  93 0064 4FF00001 		mov	r1, #0
  94 0068 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  95 006c 0FE0     		b	.L1
  96              	.L5:
 197:../SPL/src/stm32f10x_adc.c ****   }
 198:../SPL/src/stm32f10x_adc.c ****   else
 199:../SPL/src/stm32f10x_adc.c ****   {
 200:../SPL/src/stm32f10x_adc.c ****     if (ADCx == ADC3)
  97              		.loc 1 200 0
  98 006e 7A68     		ldr	r2, [r7, #4]
  99 0070 0B4B     		ldr	r3, .L6+8
 100 0072 9A42     		cmp	r2, r3
 101 0074 0BD1     		bne	.L1
 201:../SPL/src/stm32f10x_adc.c ****     {
 202:../SPL/src/stm32f10x_adc.c ****       /* Enable ADC3 reset state */
 203:../SPL/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 102              		.loc 1 203 0
 103 0076 4FF40040 		mov	r0, #32768
 104 007a 4FF00101 		mov	r1, #1
 105 007e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 204:../SPL/src/stm32f10x_adc.c ****       /* Release ADC3 from reset state */
 205:../SPL/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 106              		.loc 1 205 0
 107 0082 4FF40040 		mov	r0, #32768
 108 0086 4FF00001 		mov	r1, #0
 109 008a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 110              	.L1:
 206:../SPL/src/stm32f10x_adc.c ****     }
 207:../SPL/src/stm32f10x_adc.c ****   }
 208:../SPL/src/stm32f10x_adc.c **** }
 111              		.loc 1 208 0
 112 008e 07F10807 		add	r7, r7, #8
 113 0092 BD46     		mov	sp, r7
 114 0094 80BD     		pop	{r7, pc}
 115              	.L7:
 116 0096 00BF     		.align	2
 117              	.L6:
 118 0098 00240140 		.word	1073816576
 119 009c 00280140 		.word	1073817600
 120 00a0 003C0140 		.word	1073822720
 121 00a4 00000000 		.word	.LC0
 122              		.cfi_endproc
 123              	.LFE29:
 125              		.align	2
 126              		.global	ADC_Init
 127              		.thumb
 128              		.thumb_func
 130              	ADC_Init:
 131              	.LFB30:
 209:../SPL/src/stm32f10x_adc.c **** 
 210:../SPL/src/stm32f10x_adc.c **** /**
 211:../SPL/src/stm32f10x_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters
 212:../SPL/src/stm32f10x_adc.c ****   *         in the ADC_InitStruct.
 213:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 214:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 215:../SPL/src/stm32f10x_adc.c ****   *         the configuration information for the specified ADC peripheral.
 216:../SPL/src/stm32f10x_adc.c ****   * @retval None
 217:../SPL/src/stm32f10x_adc.c ****   */
 218:../SPL/src/stm32f10x_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 219:../SPL/src/stm32f10x_adc.c **** {
 132              		.loc 1 219 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 16
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 00a8 80B5     		push	{r7, lr}
 137              	.LCFI3:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 00aa 84B0     		sub	sp, sp, #16
 142              	.LCFI4:
 143              		.cfi_def_cfa_offset 24
 144 00ac 00AF     		add	r7, sp, #0
 145              	.LCFI5:
 146              		.cfi_def_cfa_register 7
 147 00ae 7860     		str	r0, [r7, #4]
 148 00b0 3960     		str	r1, [r7, #0]
 220:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 149              		.loc 1 220 0
 150 00b2 4FF00003 		mov	r3, #0
 151 00b6 FB60     		str	r3, [r7, #12]
 221:../SPL/src/stm32f10x_adc.c ****   uint8_t tmpreg2 = 0;
 152              		.loc 1 221 0
 153 00b8 4FF00003 		mov	r3, #0
 154 00bc FB72     		strb	r3, [r7, #11]
 222:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 223:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 155              		.loc 1 223 0
 156 00be 7A68     		ldr	r2, [r7, #4]
 157 00c0 864B     		ldr	r3, .L17
 158 00c2 9A42     		cmp	r2, r3
 159 00c4 0CD0     		beq	.L9
 160              		.loc 1 223 0 is_stmt 0 discriminator 1
 161 00c6 7A68     		ldr	r2, [r7, #4]
 162 00c8 854B     		ldr	r3, .L17+4
 163 00ca 9A42     		cmp	r2, r3
 164 00cc 08D0     		beq	.L9
 165              		.loc 1 223 0 discriminator 2
 166 00ce 7A68     		ldr	r2, [r7, #4]
 167 00d0 844B     		ldr	r3, .L17+8
 168 00d2 9A42     		cmp	r2, r3
 169 00d4 04D0     		beq	.L9
 170              		.loc 1 223 0 discriminator 3
 171 00d6 8448     		ldr	r0, .L17+12
 172 00d8 4FF0DF01 		mov	r1, #223
 173 00dc FFF7FEFF 		bl	assert_failed
 174              	.L9:
 224:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode));
 175              		.loc 1 224 0 is_stmt 1
 176 00e0 3B68     		ldr	r3, [r7, #0]
 177 00e2 1B68     		ldr	r3, [r3, #0]
 178 00e4 002B     		cmp	r3, #0
 179 00e6 31D0     		beq	.L10
 180              		.loc 1 224 0 is_stmt 0 discriminator 1
 181 00e8 3B68     		ldr	r3, [r7, #0]
 182 00ea 1B68     		ldr	r3, [r3, #0]
 183 00ec B3F5803F 		cmp	r3, #65536
 184 00f0 2CD0     		beq	.L10
 185              		.loc 1 224 0 discriminator 2
 186 00f2 3B68     		ldr	r3, [r7, #0]
 187 00f4 1B68     		ldr	r3, [r3, #0]
 188 00f6 B3F5003F 		cmp	r3, #131072
 189 00fa 27D0     		beq	.L10
 190              		.loc 1 224 0 discriminator 3
 191 00fc 3B68     		ldr	r3, [r7, #0]
 192 00fe 1B68     		ldr	r3, [r3, #0]
 193 0100 B3F5403F 		cmp	r3, #196608
 194 0104 22D0     		beq	.L10
 195              		.loc 1 224 0 discriminator 4
 196 0106 3B68     		ldr	r3, [r7, #0]
 197 0108 1B68     		ldr	r3, [r3, #0]
 198 010a B3F5802F 		cmp	r3, #262144
 199 010e 1DD0     		beq	.L10
 200              		.loc 1 224 0 discriminator 5
 201 0110 3B68     		ldr	r3, [r7, #0]
 202 0112 1B68     		ldr	r3, [r3, #0]
 203 0114 B3F5A02F 		cmp	r3, #327680
 204 0118 18D0     		beq	.L10
 205              		.loc 1 224 0 discriminator 6
 206 011a 3B68     		ldr	r3, [r7, #0]
 207 011c 1B68     		ldr	r3, [r3, #0]
 208 011e B3F5C02F 		cmp	r3, #393216
 209 0122 13D0     		beq	.L10
 210              		.loc 1 224 0 discriminator 7
 211 0124 3B68     		ldr	r3, [r7, #0]
 212 0126 1B68     		ldr	r3, [r3, #0]
 213 0128 B3F5E02F 		cmp	r3, #458752
 214 012c 0ED0     		beq	.L10
 215              		.loc 1 224 0 discriminator 8
 216 012e 3B68     		ldr	r3, [r7, #0]
 217 0130 1B68     		ldr	r3, [r3, #0]
 218 0132 B3F5002F 		cmp	r3, #524288
 219 0136 09D0     		beq	.L10
 220              		.loc 1 224 0 discriminator 9
 221 0138 3B68     		ldr	r3, [r7, #0]
 222 013a 1B68     		ldr	r3, [r3, #0]
 223 013c B3F5102F 		cmp	r3, #589824
 224 0140 04D0     		beq	.L10
 225              		.loc 1 224 0 discriminator 10
 226 0142 6948     		ldr	r0, .L17+12
 227 0144 4FF0E001 		mov	r1, #224
 228 0148 FFF7FEFF 		bl	assert_failed
 229              	.L10:
 225:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 230              		.loc 1 225 0 is_stmt 1
 231 014c 3B68     		ldr	r3, [r7, #0]
 232 014e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 233 0150 002B     		cmp	r3, #0
 234 0152 08D0     		beq	.L11
 235              		.loc 1 225 0 is_stmt 0 discriminator 1
 236 0154 3B68     		ldr	r3, [r7, #0]
 237 0156 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 238 0158 012B     		cmp	r3, #1
 239 015a 04D0     		beq	.L11
 240              		.loc 1 225 0 discriminator 2
 241 015c 6248     		ldr	r0, .L17+12
 242 015e 4FF0E101 		mov	r1, #225
 243 0162 FFF7FEFF 		bl	assert_failed
 244              	.L11:
 226:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode));
 245              		.loc 1 226 0 is_stmt 1
 246 0166 3B68     		ldr	r3, [r7, #0]
 247 0168 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 248 016a 002B     		cmp	r3, #0
 249 016c 08D0     		beq	.L12
 250              		.loc 1 226 0 is_stmt 0 discriminator 1
 251 016e 3B68     		ldr	r3, [r7, #0]
 252 0170 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 253 0172 012B     		cmp	r3, #1
 254 0174 04D0     		beq	.L12
 255              		.loc 1 226 0 discriminator 2
 256 0176 5C48     		ldr	r0, .L17+12
 257 0178 4FF0E201 		mov	r1, #226
 258 017c FFF7FEFF 		bl	assert_failed
 259              	.L12:
 227:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));   
 260              		.loc 1 227 0 is_stmt 1
 261 0180 3B68     		ldr	r3, [r7, #0]
 262 0182 9B68     		ldr	r3, [r3, #8]
 263 0184 002B     		cmp	r3, #0
 264 0186 44D0     		beq	.L13
 265              		.loc 1 227 0 is_stmt 0 discriminator 1
 266 0188 3B68     		ldr	r3, [r7, #0]
 267 018a 9B68     		ldr	r3, [r3, #8]
 268 018c B3F5003F 		cmp	r3, #131072
 269 0190 3FD0     		beq	.L13
 270              		.loc 1 227 0 discriminator 2
 271 0192 3B68     		ldr	r3, [r7, #0]
 272 0194 9B68     		ldr	r3, [r3, #8]
 273 0196 B3F5802F 		cmp	r3, #262144
 274 019a 3AD0     		beq	.L13
 275              		.loc 1 227 0 discriminator 3
 276 019c 3B68     		ldr	r3, [r7, #0]
 277 019e 9B68     		ldr	r3, [r3, #8]
 278 01a0 B3F5C02F 		cmp	r3, #393216
 279 01a4 35D0     		beq	.L13
 280              		.loc 1 227 0 discriminator 4
 281 01a6 3B68     		ldr	r3, [r7, #0]
 282 01a8 9B68     		ldr	r3, [r3, #8]
 283 01aa B3F5002F 		cmp	r3, #524288
 284 01ae 30D0     		beq	.L13
 285              		.loc 1 227 0 discriminator 5
 286 01b0 3B68     		ldr	r3, [r7, #0]
 287 01b2 9B68     		ldr	r3, [r3, #8]
 288 01b4 B3F5202F 		cmp	r3, #655360
 289 01b8 2BD0     		beq	.L13
 290              		.loc 1 227 0 discriminator 6
 291 01ba 3B68     		ldr	r3, [r7, #0]
 292 01bc 9B68     		ldr	r3, [r3, #8]
 293 01be B3F5402F 		cmp	r3, #786432
 294 01c2 26D0     		beq	.L13
 295              		.loc 1 227 0 discriminator 7
 296 01c4 3B68     		ldr	r3, [r7, #0]
 297 01c6 9B68     		ldr	r3, [r3, #8]
 298 01c8 B3F5602F 		cmp	r3, #917504
 299 01cc 21D0     		beq	.L13
 300              		.loc 1 227 0 discriminator 8
 301 01ce 3B68     		ldr	r3, [r7, #0]
 302 01d0 9B68     		ldr	r3, [r3, #8]
 303 01d2 002B     		cmp	r3, #0
 304 01d4 1DD0     		beq	.L13
 305              		.loc 1 227 0 discriminator 9
 306 01d6 3B68     		ldr	r3, [r7, #0]
 307 01d8 9B68     		ldr	r3, [r3, #8]
 308 01da B3F5003F 		cmp	r3, #131072
 309 01de 18D0     		beq	.L13
 310              		.loc 1 227 0 discriminator 10
 311 01e0 3B68     		ldr	r3, [r7, #0]
 312 01e2 9B68     		ldr	r3, [r3, #8]
 313 01e4 B3F5C02F 		cmp	r3, #393216
 314 01e8 13D0     		beq	.L13
 315              		.loc 1 227 0 discriminator 11
 316 01ea 3B68     		ldr	r3, [r7, #0]
 317 01ec 9B68     		ldr	r3, [r3, #8]
 318 01ee B3F5002F 		cmp	r3, #524288
 319 01f2 0ED0     		beq	.L13
 320              		.loc 1 227 0 discriminator 12
 321 01f4 3B68     		ldr	r3, [r7, #0]
 322 01f6 9B68     		ldr	r3, [r3, #8]
 323 01f8 B3F5202F 		cmp	r3, #655360
 324 01fc 09D0     		beq	.L13
 325              		.loc 1 227 0 discriminator 13
 326 01fe 3B68     		ldr	r3, [r7, #0]
 327 0200 9B68     		ldr	r3, [r3, #8]
 328 0202 B3F5402F 		cmp	r3, #786432
 329 0206 04D0     		beq	.L13
 330              		.loc 1 227 0 discriminator 14
 331 0208 3748     		ldr	r0, .L17+12
 332 020a 4FF0E301 		mov	r1, #227
 333 020e FFF7FEFF 		bl	assert_failed
 334              	.L13:
 228:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 335              		.loc 1 228 0 is_stmt 1
 336 0212 3B68     		ldr	r3, [r7, #0]
 337 0214 DB68     		ldr	r3, [r3, #12]
 338 0216 002B     		cmp	r3, #0
 339 0218 09D0     		beq	.L14
 340              		.loc 1 228 0 is_stmt 0 discriminator 1
 341 021a 3B68     		ldr	r3, [r7, #0]
 342 021c DB68     		ldr	r3, [r3, #12]
 343 021e B3F5006F 		cmp	r3, #2048
 344 0222 04D0     		beq	.L14
 345              		.loc 1 228 0 discriminator 2
 346 0224 3048     		ldr	r0, .L17+12
 347 0226 4FF0E401 		mov	r1, #228
 348 022a FFF7FEFF 		bl	assert_failed
 349              	.L14:
 229:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));
 350              		.loc 1 229 0 is_stmt 1
 351 022e 3B68     		ldr	r3, [r7, #0]
 352 0230 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 353 0232 002B     		cmp	r3, #0
 354 0234 03D0     		beq	.L15
 355              		.loc 1 229 0 is_stmt 0 discriminator 2
 356 0236 3B68     		ldr	r3, [r7, #0]
 357 0238 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 358 023a 102B     		cmp	r3, #16
 359 023c 04D9     		bls	.L16
 360              	.L15:
 361              		.loc 1 229 0 discriminator 1
 362 023e 2A48     		ldr	r0, .L17+12
 363 0240 4FF0E501 		mov	r1, #229
 364 0244 FFF7FEFF 		bl	assert_failed
 365              	.L16:
 230:../SPL/src/stm32f10x_adc.c **** 
 231:../SPL/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 232:../SPL/src/stm32f10x_adc.c ****   /* Get the ADCx CR1 value */
 233:../SPL/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 366              		.loc 1 233 0 is_stmt 1
 367 0248 7B68     		ldr	r3, [r7, #4]
 368 024a 5B68     		ldr	r3, [r3, #4]
 369 024c FB60     		str	r3, [r7, #12]
 234:../SPL/src/stm32f10x_adc.c ****   /* Clear DUALMOD and SCAN bits */
 235:../SPL/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_CLEAR_Mask;
 370              		.loc 1 235 0
 371 024e FB68     		ldr	r3, [r7, #12]
 372 0250 23F47023 		bic	r3, r3, #983040
 373 0254 23F48073 		bic	r3, r3, #256
 374 0258 FB60     		str	r3, [r7, #12]
 236:../SPL/src/stm32f10x_adc.c ****   /* Configure ADCx: Dual mode and scan conversion mode */
 237:../SPL/src/stm32f10x_adc.c ****   /* Set DUALMOD bits according to ADC_Mode value */
 238:../SPL/src/stm32f10x_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 239:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8
 375              		.loc 1 239 0
 376 025a 3B68     		ldr	r3, [r7, #0]
 377 025c 1A68     		ldr	r2, [r3, #0]
 378 025e 3B68     		ldr	r3, [r7, #0]
 379 0260 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 380 0262 4FEA0323 		lsl	r3, r3, #8
 381 0266 1343     		orrs	r3, r3, r2
 382 0268 FA68     		ldr	r2, [r7, #12]
 383 026a 1343     		orrs	r3, r3, r2
 384 026c FB60     		str	r3, [r7, #12]
 240:../SPL/src/stm32f10x_adc.c ****   /* Write to ADCx CR1 */
 241:../SPL/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 385              		.loc 1 241 0
 386 026e 7B68     		ldr	r3, [r7, #4]
 387 0270 FA68     		ldr	r2, [r7, #12]
 388 0272 5A60     		str	r2, [r3, #4]
 242:../SPL/src/stm32f10x_adc.c **** 
 243:../SPL/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 244:../SPL/src/stm32f10x_adc.c ****   /* Get the ADCx CR2 value */
 245:../SPL/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR2;
 389              		.loc 1 245 0
 390 0274 7B68     		ldr	r3, [r7, #4]
 391 0276 9B68     		ldr	r3, [r3, #8]
 392 0278 FB60     		str	r3, [r7, #12]
 246:../SPL/src/stm32f10x_adc.c ****   /* Clear CONT, ALIGN and EXTSEL bits */
 247:../SPL/src/stm32f10x_adc.c ****   tmpreg1 &= CR2_CLEAR_Mask;
 393              		.loc 1 247 0
 394 027a FA68     		ldr	r2, [r7, #12]
 395 027c 1B4B     		ldr	r3, .L17+16
 396 027e 1340     		ands	r3, r3, r2
 397 0280 FB60     		str	r3, [r7, #12]
 248:../SPL/src/stm32f10x_adc.c ****   /* Configure ADCx: external trigger event and continuous conversion mode */
 249:../SPL/src/stm32f10x_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 250:../SPL/src/stm32f10x_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 251:../SPL/src/stm32f10x_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 252:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 398              		.loc 1 252 0
 399 0282 3B68     		ldr	r3, [r7, #0]
 400 0284 DA68     		ldr	r2, [r3, #12]
 401 0286 3B68     		ldr	r3, [r7, #0]
 402 0288 9B68     		ldr	r3, [r3, #8]
 403 028a 1A43     		orrs	r2, r2, r3
 253:../SPL/src/stm32f10x_adc.c ****             ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 404              		.loc 1 253 0
 405 028c 3B68     		ldr	r3, [r7, #0]
 406 028e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 407 0290 4FEA4303 		lsl	r3, r3, #1
 252:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 408              		.loc 1 252 0
 409 0294 1343     		orrs	r3, r3, r2
 410 0296 FA68     		ldr	r2, [r7, #12]
 411 0298 1343     		orrs	r3, r3, r2
 412 029a FB60     		str	r3, [r7, #12]
 254:../SPL/src/stm32f10x_adc.c ****   /* Write to ADCx CR2 */
 255:../SPL/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg1;
 413              		.loc 1 255 0
 414 029c 7B68     		ldr	r3, [r7, #4]
 415 029e FA68     		ldr	r2, [r7, #12]
 416 02a0 9A60     		str	r2, [r3, #8]
 256:../SPL/src/stm32f10x_adc.c **** 
 257:../SPL/src/stm32f10x_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 258:../SPL/src/stm32f10x_adc.c ****   /* Get the ADCx SQR1 value */
 259:../SPL/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->SQR1;
 417              		.loc 1 259 0
 418 02a2 7B68     		ldr	r3, [r7, #4]
 419 02a4 DB6A     		ldr	r3, [r3, #44]
 420 02a6 FB60     		str	r3, [r7, #12]
 260:../SPL/src/stm32f10x_adc.c ****   /* Clear L bits */
 261:../SPL/src/stm32f10x_adc.c ****   tmpreg1 &= SQR1_CLEAR_Mask;
 421              		.loc 1 261 0
 422 02a8 FB68     		ldr	r3, [r7, #12]
 423 02aa 23F47003 		bic	r3, r3, #15728640
 424 02ae FB60     		str	r3, [r7, #12]
 262:../SPL/src/stm32f10x_adc.c ****   /* Configure ADCx: regular channel sequence length */
 263:../SPL/src/stm32f10x_adc.c ****   /* Set L bits according to ADC_NbrOfChannel value */
 264:../SPL/src/stm32f10x_adc.c ****   tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 425              		.loc 1 264 0
 426 02b0 3B68     		ldr	r3, [r7, #0]
 427 02b2 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 428 02b4 03F1FF33 		add	r3, r3, #-1
 429 02b8 DAB2     		uxtb	r2, r3
 430 02ba FB7A     		ldrb	r3, [r7, #11]
 431 02bc 1343     		orrs	r3, r3, r2
 432 02be FB72     		strb	r3, [r7, #11]
 265:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)tmpreg2 << 20;
 433              		.loc 1 265 0
 434 02c0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 435 02c2 4FEA0353 		lsl	r3, r3, #20
 436 02c6 FA68     		ldr	r2, [r7, #12]
 437 02c8 1343     		orrs	r3, r3, r2
 438 02ca FB60     		str	r3, [r7, #12]
 266:../SPL/src/stm32f10x_adc.c ****   /* Write to ADCx SQR1 */
 267:../SPL/src/stm32f10x_adc.c ****   ADCx->SQR1 = tmpreg1;
 439              		.loc 1 267 0
 440 02cc 7B68     		ldr	r3, [r7, #4]
 441 02ce FA68     		ldr	r2, [r7, #12]
 442 02d0 DA62     		str	r2, [r3, #44]
 268:../SPL/src/stm32f10x_adc.c **** }
 443              		.loc 1 268 0
 444 02d2 07F11007 		add	r7, r7, #16
 445 02d6 BD46     		mov	sp, r7
 446 02d8 80BD     		pop	{r7, pc}
 447              	.L18:
 448 02da 00BF     		.align	2
 449              	.L17:
 450 02dc 00240140 		.word	1073816576
 451 02e0 00280140 		.word	1073817600
 452 02e4 003C0140 		.word	1073822720
 453 02e8 00000000 		.word	.LC0
 454 02ec FDF7F1FF 		.word	-919555
 455              		.cfi_endproc
 456              	.LFE30:
 458              		.align	2
 459              		.global	ADC_StructInit
 460              		.thumb
 461              		.thumb_func
 463              	ADC_StructInit:
 464              	.LFB31:
 269:../SPL/src/stm32f10x_adc.c **** 
 270:../SPL/src/stm32f10x_adc.c **** /**
 271:../SPL/src/stm32f10x_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 272:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
 273:../SPL/src/stm32f10x_adc.c ****   * @retval None
 274:../SPL/src/stm32f10x_adc.c ****   */
 275:../SPL/src/stm32f10x_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 276:../SPL/src/stm32f10x_adc.c **** {
 465              		.loc 1 276 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 8
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 02f0 80B4     		push	{r7}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 4
 473              		.cfi_offset 7, -4
 474 02f2 83B0     		sub	sp, sp, #12
 475              	.LCFI7:
 476              		.cfi_def_cfa_offset 16
 477 02f4 00AF     		add	r7, sp, #0
 478              	.LCFI8:
 479              		.cfi_def_cfa_register 7
 480 02f6 7860     		str	r0, [r7, #4]
 277:../SPL/src/stm32f10x_adc.c ****   /* Reset ADC init structure parameters values */
 278:../SPL/src/stm32f10x_adc.c ****   /* Initialize the ADC_Mode member */
 279:../SPL/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 481              		.loc 1 279 0
 482 02f8 7B68     		ldr	r3, [r7, #4]
 483 02fa 4FF00002 		mov	r2, #0
 484 02fe 1A60     		str	r2, [r3, #0]
 280:../SPL/src/stm32f10x_adc.c ****   /* initialize the ADC_ScanConvMode member */
 281:../SPL/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 485              		.loc 1 281 0
 486 0300 7B68     		ldr	r3, [r7, #4]
 487 0302 4FF00002 		mov	r2, #0
 488 0306 1A71     		strb	r2, [r3, #4]
 282:../SPL/src/stm32f10x_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 283:../SPL/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 489              		.loc 1 283 0
 490 0308 7B68     		ldr	r3, [r7, #4]
 491 030a 4FF00002 		mov	r2, #0
 492 030e 5A71     		strb	r2, [r3, #5]
 284:../SPL/src/stm32f10x_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 285:../SPL/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 493              		.loc 1 285 0
 494 0310 7B68     		ldr	r3, [r7, #4]
 495 0312 4FF00002 		mov	r2, #0
 496 0316 9A60     		str	r2, [r3, #8]
 286:../SPL/src/stm32f10x_adc.c ****   /* Initialize the ADC_DataAlign member */
 287:../SPL/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 497              		.loc 1 287 0
 498 0318 7B68     		ldr	r3, [r7, #4]
 499 031a 4FF00002 		mov	r2, #0
 500 031e DA60     		str	r2, [r3, #12]
 288:../SPL/src/stm32f10x_adc.c ****   /* Initialize the ADC_NbrOfChannel member */
 289:../SPL/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_NbrOfChannel = 1;
 501              		.loc 1 289 0
 502 0320 7B68     		ldr	r3, [r7, #4]
 503 0322 4FF00102 		mov	r2, #1
 504 0326 1A74     		strb	r2, [r3, #16]
 290:../SPL/src/stm32f10x_adc.c **** }
 505              		.loc 1 290 0
 506 0328 07F10C07 		add	r7, r7, #12
 507 032c BD46     		mov	sp, r7
 508 032e 80BC     		pop	{r7}
 509 0330 7047     		bx	lr
 510              		.cfi_endproc
 511              	.LFE31:
 513 0332 00BF     		.align	2
 514              		.global	ADC_Cmd
 515              		.thumb
 516              		.thumb_func
 518              	ADC_Cmd:
 519              	.LFB32:
 291:../SPL/src/stm32f10x_adc.c **** 
 292:../SPL/src/stm32f10x_adc.c **** /**
 293:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 294:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 295:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the ADCx peripheral.
 296:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 297:../SPL/src/stm32f10x_adc.c ****   * @retval None
 298:../SPL/src/stm32f10x_adc.c ****   */
 299:../SPL/src/stm32f10x_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 300:../SPL/src/stm32f10x_adc.c **** {
 520              		.loc 1 300 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0334 80B5     		push	{r7, lr}
 525              	.LCFI9:
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 7, -8
 528              		.cfi_offset 14, -4
 529 0336 82B0     		sub	sp, sp, #8
 530              	.LCFI10:
 531              		.cfi_def_cfa_offset 16
 532 0338 00AF     		add	r7, sp, #0
 533              	.LCFI11:
 534              		.cfi_def_cfa_register 7
 535 033a 7860     		str	r0, [r7, #4]
 536 033c 0B46     		mov	r3, r1
 537 033e FB70     		strb	r3, [r7, #3]
 301:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 302:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 538              		.loc 1 302 0
 539 0340 7A68     		ldr	r2, [r7, #4]
 540 0342 174B     		ldr	r3, .L25
 541 0344 9A42     		cmp	r2, r3
 542 0346 0CD0     		beq	.L21
 543              		.loc 1 302 0 is_stmt 0 discriminator 1
 544 0348 7A68     		ldr	r2, [r7, #4]
 545 034a 164B     		ldr	r3, .L25+4
 546 034c 9A42     		cmp	r2, r3
 547 034e 08D0     		beq	.L21
 548              		.loc 1 302 0 discriminator 2
 549 0350 7A68     		ldr	r2, [r7, #4]
 550 0352 154B     		ldr	r3, .L25+8
 551 0354 9A42     		cmp	r2, r3
 552 0356 04D0     		beq	.L21
 553              		.loc 1 302 0 discriminator 3
 554 0358 1448     		ldr	r0, .L25+12
 555 035a 4FF49771 		mov	r1, #302
 556 035e FFF7FEFF 		bl	assert_failed
 557              	.L21:
 303:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 558              		.loc 1 303 0 is_stmt 1
 559 0362 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 560 0364 002B     		cmp	r3, #0
 561 0366 07D0     		beq	.L22
 562              		.loc 1 303 0 is_stmt 0 discriminator 1
 563 0368 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 564 036a 012B     		cmp	r3, #1
 565 036c 04D0     		beq	.L22
 566              		.loc 1 303 0 discriminator 2
 567 036e 0F48     		ldr	r0, .L25+12
 568 0370 40F22F11 		movw	r1, #303
 569 0374 FFF7FEFF 		bl	assert_failed
 570              	.L22:
 304:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 571              		.loc 1 304 0 is_stmt 1
 572 0378 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 573 037a 002B     		cmp	r3, #0
 574 037c 06D0     		beq	.L23
 305:../SPL/src/stm32f10x_adc.c ****   {
 306:../SPL/src/stm32f10x_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 307:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_ADON_Set;
 575              		.loc 1 307 0
 576 037e 7B68     		ldr	r3, [r7, #4]
 577 0380 9B68     		ldr	r3, [r3, #8]
 578 0382 43F00102 		orr	r2, r3, #1
 579 0386 7B68     		ldr	r3, [r7, #4]
 580 0388 9A60     		str	r2, [r3, #8]
 581 038a 05E0     		b	.L20
 582              	.L23:
 308:../SPL/src/stm32f10x_adc.c ****   }
 309:../SPL/src/stm32f10x_adc.c ****   else
 310:../SPL/src/stm32f10x_adc.c ****   {
 311:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC peripheral */
 312:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_ADON_Reset;
 583              		.loc 1 312 0
 584 038c 7B68     		ldr	r3, [r7, #4]
 585 038e 9B68     		ldr	r3, [r3, #8]
 586 0390 23F00102 		bic	r2, r3, #1
 587 0394 7B68     		ldr	r3, [r7, #4]
 588 0396 9A60     		str	r2, [r3, #8]
 589              	.L20:
 313:../SPL/src/stm32f10x_adc.c ****   }
 314:../SPL/src/stm32f10x_adc.c **** }
 590              		.loc 1 314 0
 591 0398 07F10807 		add	r7, r7, #8
 592 039c BD46     		mov	sp, r7
 593 039e 80BD     		pop	{r7, pc}
 594              	.L26:
 595              		.align	2
 596              	.L25:
 597 03a0 00240140 		.word	1073816576
 598 03a4 00280140 		.word	1073817600
 599 03a8 003C0140 		.word	1073822720
 600 03ac 00000000 		.word	.LC0
 601              		.cfi_endproc
 602              	.LFE32:
 604              		.align	2
 605              		.global	ADC_DMACmd
 606              		.thumb
 607              		.thumb_func
 609              	ADC_DMACmd:
 610              	.LFB33:
 315:../SPL/src/stm32f10x_adc.c **** 
 316:../SPL/src/stm32f10x_adc.c **** /**
 317:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
 318:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1 or 3 to select the ADC peripheral.
 319:../SPL/src/stm32f10x_adc.c ****   *   Note: ADC2 hasn't a DMA capability.
 320:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
 321:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 322:../SPL/src/stm32f10x_adc.c ****   * @retval None
 323:../SPL/src/stm32f10x_adc.c ****   */
 324:../SPL/src/stm32f10x_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 325:../SPL/src/stm32f10x_adc.c **** {
 611              		.loc 1 325 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 8
 614              		@ frame_needed = 1, uses_anonymous_args = 0
 615 03b0 80B5     		push	{r7, lr}
 616              	.LCFI12:
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 03b2 82B0     		sub	sp, sp, #8
 621              	.LCFI13:
 622              		.cfi_def_cfa_offset 16
 623 03b4 00AF     		add	r7, sp, #0
 624              	.LCFI14:
 625              		.cfi_def_cfa_register 7
 626 03b6 7860     		str	r0, [r7, #4]
 627 03b8 0B46     		mov	r3, r1
 628 03ba FB70     		strb	r3, [r7, #3]
 326:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 327:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DMA_PERIPH(ADCx));
 629              		.loc 1 327 0
 630 03bc 7A68     		ldr	r2, [r7, #4]
 631 03be 154B     		ldr	r3, .L32
 632 03c0 9A42     		cmp	r2, r3
 633 03c2 08D0     		beq	.L28
 634              		.loc 1 327 0 is_stmt 0 discriminator 1
 635 03c4 7A68     		ldr	r2, [r7, #4]
 636 03c6 144B     		ldr	r3, .L32+4
 637 03c8 9A42     		cmp	r2, r3
 638 03ca 04D0     		beq	.L28
 639              		.loc 1 327 0 discriminator 2
 640 03cc 1348     		ldr	r0, .L32+8
 641 03ce 40F24711 		movw	r1, #327
 642 03d2 FFF7FEFF 		bl	assert_failed
 643              	.L28:
 328:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 644              		.loc 1 328 0 is_stmt 1
 645 03d6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 646 03d8 002B     		cmp	r3, #0
 647 03da 07D0     		beq	.L29
 648              		.loc 1 328 0 is_stmt 0 discriminator 1
 649 03dc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 650 03de 012B     		cmp	r3, #1
 651 03e0 04D0     		beq	.L29
 652              		.loc 1 328 0 discriminator 2
 653 03e2 0E48     		ldr	r0, .L32+8
 654 03e4 4FF4A471 		mov	r1, #328
 655 03e8 FFF7FEFF 		bl	assert_failed
 656              	.L29:
 329:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 657              		.loc 1 329 0 is_stmt 1
 658 03ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 659 03ee 002B     		cmp	r3, #0
 660 03f0 06D0     		beq	.L30
 330:../SPL/src/stm32f10x_adc.c ****   {
 331:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC DMA request */
 332:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_DMA_Set;
 661              		.loc 1 332 0
 662 03f2 7B68     		ldr	r3, [r7, #4]
 663 03f4 9B68     		ldr	r3, [r3, #8]
 664 03f6 43F48072 		orr	r2, r3, #256
 665 03fa 7B68     		ldr	r3, [r7, #4]
 666 03fc 9A60     		str	r2, [r3, #8]
 667 03fe 05E0     		b	.L27
 668              	.L30:
 333:../SPL/src/stm32f10x_adc.c ****   }
 334:../SPL/src/stm32f10x_adc.c ****   else
 335:../SPL/src/stm32f10x_adc.c ****   {
 336:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC DMA request */
 337:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_DMA_Reset;
 669              		.loc 1 337 0
 670 0400 7B68     		ldr	r3, [r7, #4]
 671 0402 9B68     		ldr	r3, [r3, #8]
 672 0404 23F48072 		bic	r2, r3, #256
 673 0408 7B68     		ldr	r3, [r7, #4]
 674 040a 9A60     		str	r2, [r3, #8]
 675              	.L27:
 338:../SPL/src/stm32f10x_adc.c ****   }
 339:../SPL/src/stm32f10x_adc.c **** }
 676              		.loc 1 339 0
 677 040c 07F10807 		add	r7, r7, #8
 678 0410 BD46     		mov	sp, r7
 679 0412 80BD     		pop	{r7, pc}
 680              	.L33:
 681              		.align	2
 682              	.L32:
 683 0414 00240140 		.word	1073816576
 684 0418 003C0140 		.word	1073822720
 685 041c 00000000 		.word	.LC0
 686              		.cfi_endproc
 687              	.LFE33:
 689              		.align	2
 690              		.global	ADC_ITConfig
 691              		.thumb
 692              		.thumb_func
 694              	ADC_ITConfig:
 695              	.LFB34:
 340:../SPL/src/stm32f10x_adc.c **** 
 341:../SPL/src/stm32f10x_adc.c **** /**
 342:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
 343:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 344:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
 345:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
 346:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
 347:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
 348:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
 349:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
 350:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 351:../SPL/src/stm32f10x_adc.c ****   * @retval None
 352:../SPL/src/stm32f10x_adc.c ****   */
 353:../SPL/src/stm32f10x_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
 354:../SPL/src/stm32f10x_adc.c **** {
 696              		.loc 1 354 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 16
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700 0420 80B5     		push	{r7, lr}
 701              	.LCFI15:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0422 84B0     		sub	sp, sp, #16
 706              	.LCFI16:
 707              		.cfi_def_cfa_offset 24
 708 0424 00AF     		add	r7, sp, #0
 709              	.LCFI17:
 710              		.cfi_def_cfa_register 7
 711 0426 7860     		str	r0, [r7, #4]
 712 0428 1346     		mov	r3, r2
 713 042a 0A46     		mov	r2, r1	@ movhi
 714 042c 7A80     		strh	r2, [r7, #2]	@ movhi
 715 042e 7B70     		strb	r3, [r7, #1]
 355:../SPL/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 716              		.loc 1 355 0
 717 0430 4FF00003 		mov	r3, #0
 718 0434 FB73     		strb	r3, [r7, #15]
 356:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 357:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 719              		.loc 1 357 0
 720 0436 7A68     		ldr	r2, [r7, #4]
 721 0438 204B     		ldr	r3, .L41
 722 043a 9A42     		cmp	r2, r3
 723 043c 0CD0     		beq	.L35
 724              		.loc 1 357 0 is_stmt 0 discriminator 1
 725 043e 7A68     		ldr	r2, [r7, #4]
 726 0440 1F4B     		ldr	r3, .L41+4
 727 0442 9A42     		cmp	r2, r3
 728 0444 08D0     		beq	.L35
 729              		.loc 1 357 0 discriminator 2
 730 0446 7A68     		ldr	r2, [r7, #4]
 731 0448 1E4B     		ldr	r3, .L41+8
 732 044a 9A42     		cmp	r2, r3
 733 044c 04D0     		beq	.L35
 734              		.loc 1 357 0 discriminator 3
 735 044e 1E48     		ldr	r0, .L41+12
 736 0450 40F26511 		movw	r1, #357
 737 0454 FFF7FEFF 		bl	assert_failed
 738              	.L35:
 358:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 739              		.loc 1 358 0 is_stmt 1
 740 0458 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 741 045a 002B     		cmp	r3, #0
 742 045c 07D0     		beq	.L36
 743              		.loc 1 358 0 is_stmt 0 discriminator 1
 744 045e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 745 0460 012B     		cmp	r3, #1
 746 0462 04D0     		beq	.L36
 747              		.loc 1 358 0 discriminator 2
 748 0464 1848     		ldr	r0, .L41+12
 749 0466 4FF4B371 		mov	r1, #358
 750 046a FFF7FEFF 		bl	assert_failed
 751              	.L36:
 359:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
 752              		.loc 1 359 0 is_stmt 1
 753 046e 7A88     		ldrh	r2, [r7, #2]
 754 0470 4FF61F03 		movw	r3, #63519
 755 0474 1340     		ands	r3, r3, r2
 756 0476 002B     		cmp	r3, #0
 757 0478 02D1     		bne	.L37
 758              		.loc 1 359 0 is_stmt 0 discriminator 2
 759 047a 7B88     		ldrh	r3, [r7, #2]
 760 047c 002B     		cmp	r3, #0
 761 047e 04D1     		bne	.L38
 762              	.L37:
 763              		.loc 1 359 0 discriminator 1
 764 0480 1148     		ldr	r0, .L41+12
 765 0482 40F26711 		movw	r1, #359
 766 0486 FFF7FEFF 		bl	assert_failed
 767              	.L38:
 360:../SPL/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
 361:../SPL/src/stm32f10x_adc.c ****   itmask = (uint8_t)ADC_IT;
 768              		.loc 1 361 0 is_stmt 1
 769 048a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 770 048c FB73     		strb	r3, [r7, #15]
 362:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 771              		.loc 1 362 0
 772 048e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 773 0490 002B     		cmp	r3, #0
 774 0492 06D0     		beq	.L39
 363:../SPL/src/stm32f10x_adc.c ****   {
 364:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC interrupts */
 365:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 |= itmask;
 775              		.loc 1 365 0
 776 0494 7B68     		ldr	r3, [r7, #4]
 777 0496 5A68     		ldr	r2, [r3, #4]
 778 0498 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 779 049a 1A43     		orrs	r2, r2, r3
 780 049c 7B68     		ldr	r3, [r7, #4]
 781 049e 5A60     		str	r2, [r3, #4]
 782 04a0 07E0     		b	.L34
 783              	.L39:
 366:../SPL/src/stm32f10x_adc.c ****   }
 367:../SPL/src/stm32f10x_adc.c ****   else
 368:../SPL/src/stm32f10x_adc.c ****   {
 369:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC interrupts */
 370:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 784              		.loc 1 370 0
 785 04a2 7B68     		ldr	r3, [r7, #4]
 786 04a4 5A68     		ldr	r2, [r3, #4]
 787 04a6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 788 04a8 6FEA0303 		mvn	r3, r3
 789 04ac 1A40     		ands	r2, r2, r3
 790 04ae 7B68     		ldr	r3, [r7, #4]
 791 04b0 5A60     		str	r2, [r3, #4]
 792              	.L34:
 371:../SPL/src/stm32f10x_adc.c ****   }
 372:../SPL/src/stm32f10x_adc.c **** }
 793              		.loc 1 372 0
 794 04b2 07F11007 		add	r7, r7, #16
 795 04b6 BD46     		mov	sp, r7
 796 04b8 80BD     		pop	{r7, pc}
 797              	.L42:
 798 04ba 00BF     		.align	2
 799              	.L41:
 800 04bc 00240140 		.word	1073816576
 801 04c0 00280140 		.word	1073817600
 802 04c4 003C0140 		.word	1073822720
 803 04c8 00000000 		.word	.LC0
 804              		.cfi_endproc
 805              	.LFE34:
 807              		.align	2
 808              		.global	ADC_ResetCalibration
 809              		.thumb
 810              		.thumb_func
 812              	ADC_ResetCalibration:
 813              	.LFB35:
 373:../SPL/src/stm32f10x_adc.c **** 
 374:../SPL/src/stm32f10x_adc.c **** /**
 375:../SPL/src/stm32f10x_adc.c ****   * @brief  Resets the selected ADC calibration registers.
 376:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 377:../SPL/src/stm32f10x_adc.c ****   * @retval None
 378:../SPL/src/stm32f10x_adc.c ****   */
 379:../SPL/src/stm32f10x_adc.c **** void ADC_ResetCalibration(ADC_TypeDef* ADCx)
 380:../SPL/src/stm32f10x_adc.c **** {
 814              		.loc 1 380 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 8
 817              		@ frame_needed = 1, uses_anonymous_args = 0
 818 04cc 80B5     		push	{r7, lr}
 819              	.LCFI18:
 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 04ce 82B0     		sub	sp, sp, #8
 824              	.LCFI19:
 825              		.cfi_def_cfa_offset 16
 826 04d0 00AF     		add	r7, sp, #0
 827              	.LCFI20:
 828              		.cfi_def_cfa_register 7
 829 04d2 7860     		str	r0, [r7, #4]
 381:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 382:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 830              		.loc 1 382 0
 831 04d4 7A68     		ldr	r2, [r7, #4]
 832 04d6 0D4B     		ldr	r3, .L45
 833 04d8 9A42     		cmp	r2, r3
 834 04da 0CD0     		beq	.L44
 835              		.loc 1 382 0 is_stmt 0 discriminator 1
 836 04dc 7A68     		ldr	r2, [r7, #4]
 837 04de 0C4B     		ldr	r3, .L45+4
 838 04e0 9A42     		cmp	r2, r3
 839 04e2 08D0     		beq	.L44
 840              		.loc 1 382 0 discriminator 2
 841 04e4 7A68     		ldr	r2, [r7, #4]
 842 04e6 0B4B     		ldr	r3, .L45+8
 843 04e8 9A42     		cmp	r2, r3
 844 04ea 04D0     		beq	.L44
 845              		.loc 1 382 0 discriminator 3
 846 04ec 0A48     		ldr	r0, .L45+12
 847 04ee 4FF4BF71 		mov	r1, #382
 848 04f2 FFF7FEFF 		bl	assert_failed
 849              	.L44:
 383:../SPL/src/stm32f10x_adc.c ****   /* Resets the selected ADC calibration registers */  
 384:../SPL/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_RSTCAL_Set;
 850              		.loc 1 384 0 is_stmt 1
 851 04f6 7B68     		ldr	r3, [r7, #4]
 852 04f8 9B68     		ldr	r3, [r3, #8]
 853 04fa 43F00802 		orr	r2, r3, #8
 854 04fe 7B68     		ldr	r3, [r7, #4]
 855 0500 9A60     		str	r2, [r3, #8]
 385:../SPL/src/stm32f10x_adc.c **** }
 856              		.loc 1 385 0
 857 0502 07F10807 		add	r7, r7, #8
 858 0506 BD46     		mov	sp, r7
 859 0508 80BD     		pop	{r7, pc}
 860              	.L46:
 861 050a 00BF     		.align	2
 862              	.L45:
 863 050c 00240140 		.word	1073816576
 864 0510 00280140 		.word	1073817600
 865 0514 003C0140 		.word	1073822720
 866 0518 00000000 		.word	.LC0
 867              		.cfi_endproc
 868              	.LFE35:
 870              		.align	2
 871              		.global	ADC_GetResetCalibrationStatus
 872              		.thumb
 873              		.thumb_func
 875              	ADC_GetResetCalibrationStatus:
 876              	.LFB36:
 386:../SPL/src/stm32f10x_adc.c **** 
 387:../SPL/src/stm32f10x_adc.c **** /**
 388:../SPL/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC reset calibration registers status.
 389:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 390:../SPL/src/stm32f10x_adc.c ****   * @retval The new state of ADC reset calibration registers (SET or RESET).
 391:../SPL/src/stm32f10x_adc.c ****   */
 392:../SPL/src/stm32f10x_adc.c **** FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
 393:../SPL/src/stm32f10x_adc.c **** {
 877              		.loc 1 393 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 16
 880              		@ frame_needed = 1, uses_anonymous_args = 0
 881 051c 80B5     		push	{r7, lr}
 882              	.LCFI21:
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 7, -8
 885              		.cfi_offset 14, -4
 886 051e 84B0     		sub	sp, sp, #16
 887              	.LCFI22:
 888              		.cfi_def_cfa_offset 24
 889 0520 00AF     		add	r7, sp, #0
 890              	.LCFI23:
 891              		.cfi_def_cfa_register 7
 892 0522 7860     		str	r0, [r7, #4]
 394:../SPL/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 893              		.loc 1 394 0
 894 0524 4FF00003 		mov	r3, #0
 895 0528 FB73     		strb	r3, [r7, #15]
 395:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 396:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 896              		.loc 1 396 0
 897 052a 7A68     		ldr	r2, [r7, #4]
 898 052c 114B     		ldr	r3, .L52
 899 052e 9A42     		cmp	r2, r3
 900 0530 0CD0     		beq	.L48
 901              		.loc 1 396 0 is_stmt 0 discriminator 1
 902 0532 7A68     		ldr	r2, [r7, #4]
 903 0534 104B     		ldr	r3, .L52+4
 904 0536 9A42     		cmp	r2, r3
 905 0538 08D0     		beq	.L48
 906              		.loc 1 396 0 discriminator 2
 907 053a 7A68     		ldr	r2, [r7, #4]
 908 053c 0F4B     		ldr	r3, .L52+8
 909 053e 9A42     		cmp	r2, r3
 910 0540 04D0     		beq	.L48
 911              		.loc 1 396 0 discriminator 3
 912 0542 0F48     		ldr	r0, .L52+12
 913 0544 4FF4C671 		mov	r1, #396
 914 0548 FFF7FEFF 		bl	assert_failed
 915              	.L48:
 397:../SPL/src/stm32f10x_adc.c ****   /* Check the status of RSTCAL bit */
 398:../SPL/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 916              		.loc 1 398 0 is_stmt 1
 917 054c 7B68     		ldr	r3, [r7, #4]
 918 054e 9B68     		ldr	r3, [r3, #8]
 919 0550 03F00803 		and	r3, r3, #8
 920 0554 002B     		cmp	r3, #0
 921 0556 03D0     		beq	.L49
 399:../SPL/src/stm32f10x_adc.c ****   {
 400:../SPL/src/stm32f10x_adc.c ****     /* RSTCAL bit is set */
 401:../SPL/src/stm32f10x_adc.c ****     bitstatus = SET;
 922              		.loc 1 401 0
 923 0558 4FF00103 		mov	r3, #1
 924 055c FB73     		strb	r3, [r7, #15]
 925 055e 02E0     		b	.L50
 926              	.L49:
 402:../SPL/src/stm32f10x_adc.c ****   }
 403:../SPL/src/stm32f10x_adc.c ****   else
 404:../SPL/src/stm32f10x_adc.c ****   {
 405:../SPL/src/stm32f10x_adc.c ****     /* RSTCAL bit is reset */
 406:../SPL/src/stm32f10x_adc.c ****     bitstatus = RESET;
 927              		.loc 1 406 0
 928 0560 4FF00003 		mov	r3, #0
 929 0564 FB73     		strb	r3, [r7, #15]
 930              	.L50:
 407:../SPL/src/stm32f10x_adc.c ****   }
 408:../SPL/src/stm32f10x_adc.c ****   /* Return the RSTCAL bit status */
 409:../SPL/src/stm32f10x_adc.c ****   return  bitstatus;
 931              		.loc 1 409 0
 932 0566 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 410:../SPL/src/stm32f10x_adc.c **** }
 933              		.loc 1 410 0
 934 0568 1846     		mov	r0, r3
 935 056a 07F11007 		add	r7, r7, #16
 936 056e BD46     		mov	sp, r7
 937 0570 80BD     		pop	{r7, pc}
 938              	.L53:
 939 0572 00BF     		.align	2
 940              	.L52:
 941 0574 00240140 		.word	1073816576
 942 0578 00280140 		.word	1073817600
 943 057c 003C0140 		.word	1073822720
 944 0580 00000000 		.word	.LC0
 945              		.cfi_endproc
 946              	.LFE36:
 948              		.align	2
 949              		.global	ADC_StartCalibration
 950              		.thumb
 951              		.thumb_func
 953              	ADC_StartCalibration:
 954              	.LFB37:
 411:../SPL/src/stm32f10x_adc.c **** 
 412:../SPL/src/stm32f10x_adc.c **** /**
 413:../SPL/src/stm32f10x_adc.c ****   * @brief  Starts the selected ADC calibration process.
 414:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 415:../SPL/src/stm32f10x_adc.c ****   * @retval None
 416:../SPL/src/stm32f10x_adc.c ****   */
 417:../SPL/src/stm32f10x_adc.c **** void ADC_StartCalibration(ADC_TypeDef* ADCx)
 418:../SPL/src/stm32f10x_adc.c **** {
 955              		.loc 1 418 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 8
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0584 80B5     		push	{r7, lr}
 960              	.LCFI24:
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0586 82B0     		sub	sp, sp, #8
 965              	.LCFI25:
 966              		.cfi_def_cfa_offset 16
 967 0588 00AF     		add	r7, sp, #0
 968              	.LCFI26:
 969              		.cfi_def_cfa_register 7
 970 058a 7860     		str	r0, [r7, #4]
 419:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 420:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 971              		.loc 1 420 0
 972 058c 7A68     		ldr	r2, [r7, #4]
 973 058e 0D4B     		ldr	r3, .L56
 974 0590 9A42     		cmp	r2, r3
 975 0592 0CD0     		beq	.L55
 976              		.loc 1 420 0 is_stmt 0 discriminator 1
 977 0594 7A68     		ldr	r2, [r7, #4]
 978 0596 0C4B     		ldr	r3, .L56+4
 979 0598 9A42     		cmp	r2, r3
 980 059a 08D0     		beq	.L55
 981              		.loc 1 420 0 discriminator 2
 982 059c 7A68     		ldr	r2, [r7, #4]
 983 059e 0B4B     		ldr	r3, .L56+8
 984 05a0 9A42     		cmp	r2, r3
 985 05a2 04D0     		beq	.L55
 986              		.loc 1 420 0 discriminator 3
 987 05a4 0A48     		ldr	r0, .L56+12
 988 05a6 4FF4D271 		mov	r1, #420
 989 05aa FFF7FEFF 		bl	assert_failed
 990              	.L55:
 421:../SPL/src/stm32f10x_adc.c ****   /* Enable the selected ADC calibration process */  
 422:../SPL/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_CAL_Set;
 991              		.loc 1 422 0 is_stmt 1
 992 05ae 7B68     		ldr	r3, [r7, #4]
 993 05b0 9B68     		ldr	r3, [r3, #8]
 994 05b2 43F00402 		orr	r2, r3, #4
 995 05b6 7B68     		ldr	r3, [r7, #4]
 996 05b8 9A60     		str	r2, [r3, #8]
 423:../SPL/src/stm32f10x_adc.c **** }
 997              		.loc 1 423 0
 998 05ba 07F10807 		add	r7, r7, #8
 999 05be BD46     		mov	sp, r7
 1000 05c0 80BD     		pop	{r7, pc}
 1001              	.L57:
 1002 05c2 00BF     		.align	2
 1003              	.L56:
 1004 05c4 00240140 		.word	1073816576
 1005 05c8 00280140 		.word	1073817600
 1006 05cc 003C0140 		.word	1073822720
 1007 05d0 00000000 		.word	.LC0
 1008              		.cfi_endproc
 1009              	.LFE37:
 1011              		.align	2
 1012              		.global	ADC_GetCalibrationStatus
 1013              		.thumb
 1014              		.thumb_func
 1016              	ADC_GetCalibrationStatus:
 1017              	.LFB38:
 424:../SPL/src/stm32f10x_adc.c **** 
 425:../SPL/src/stm32f10x_adc.c **** /**
 426:../SPL/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC calibration status.
 427:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 428:../SPL/src/stm32f10x_adc.c ****   * @retval The new state of ADC calibration (SET or RESET).
 429:../SPL/src/stm32f10x_adc.c ****   */
 430:../SPL/src/stm32f10x_adc.c **** FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
 431:../SPL/src/stm32f10x_adc.c **** {
 1018              		.loc 1 431 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 16
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022 05d4 80B5     		push	{r7, lr}
 1023              	.LCFI27:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 7, -8
 1026              		.cfi_offset 14, -4
 1027 05d6 84B0     		sub	sp, sp, #16
 1028              	.LCFI28:
 1029              		.cfi_def_cfa_offset 24
 1030 05d8 00AF     		add	r7, sp, #0
 1031              	.LCFI29:
 1032              		.cfi_def_cfa_register 7
 1033 05da 7860     		str	r0, [r7, #4]
 432:../SPL/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 1034              		.loc 1 432 0
 1035 05dc 4FF00003 		mov	r3, #0
 1036 05e0 FB73     		strb	r3, [r7, #15]
 433:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 434:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1037              		.loc 1 434 0
 1038 05e2 7A68     		ldr	r2, [r7, #4]
 1039 05e4 114B     		ldr	r3, .L63
 1040 05e6 9A42     		cmp	r2, r3
 1041 05e8 0CD0     		beq	.L59
 1042              		.loc 1 434 0 is_stmt 0 discriminator 1
 1043 05ea 7A68     		ldr	r2, [r7, #4]
 1044 05ec 104B     		ldr	r3, .L63+4
 1045 05ee 9A42     		cmp	r2, r3
 1046 05f0 08D0     		beq	.L59
 1047              		.loc 1 434 0 discriminator 2
 1048 05f2 7A68     		ldr	r2, [r7, #4]
 1049 05f4 0F4B     		ldr	r3, .L63+8
 1050 05f6 9A42     		cmp	r2, r3
 1051 05f8 04D0     		beq	.L59
 1052              		.loc 1 434 0 discriminator 3
 1053 05fa 0F48     		ldr	r0, .L63+12
 1054 05fc 4FF4D971 		mov	r1, #434
 1055 0600 FFF7FEFF 		bl	assert_failed
 1056              	.L59:
 435:../SPL/src/stm32f10x_adc.c ****   /* Check the status of CAL bit */
 436:../SPL/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 1057              		.loc 1 436 0 is_stmt 1
 1058 0604 7B68     		ldr	r3, [r7, #4]
 1059 0606 9B68     		ldr	r3, [r3, #8]
 1060 0608 03F00403 		and	r3, r3, #4
 1061 060c 002B     		cmp	r3, #0
 1062 060e 03D0     		beq	.L60
 437:../SPL/src/stm32f10x_adc.c ****   {
 438:../SPL/src/stm32f10x_adc.c ****     /* CAL bit is set: calibration on going */
 439:../SPL/src/stm32f10x_adc.c ****     bitstatus = SET;
 1063              		.loc 1 439 0
 1064 0610 4FF00103 		mov	r3, #1
 1065 0614 FB73     		strb	r3, [r7, #15]
 1066 0616 02E0     		b	.L61
 1067              	.L60:
 440:../SPL/src/stm32f10x_adc.c ****   }
 441:../SPL/src/stm32f10x_adc.c ****   else
 442:../SPL/src/stm32f10x_adc.c ****   {
 443:../SPL/src/stm32f10x_adc.c ****     /* CAL bit is reset: end of calibration */
 444:../SPL/src/stm32f10x_adc.c ****     bitstatus = RESET;
 1068              		.loc 1 444 0
 1069 0618 4FF00003 		mov	r3, #0
 1070 061c FB73     		strb	r3, [r7, #15]
 1071              	.L61:
 445:../SPL/src/stm32f10x_adc.c ****   }
 446:../SPL/src/stm32f10x_adc.c ****   /* Return the CAL bit status */
 447:../SPL/src/stm32f10x_adc.c ****   return  bitstatus;
 1072              		.loc 1 447 0
 1073 061e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 448:../SPL/src/stm32f10x_adc.c **** }
 1074              		.loc 1 448 0
 1075 0620 1846     		mov	r0, r3
 1076 0622 07F11007 		add	r7, r7, #16
 1077 0626 BD46     		mov	sp, r7
 1078 0628 80BD     		pop	{r7, pc}
 1079              	.L64:
 1080 062a 00BF     		.align	2
 1081              	.L63:
 1082 062c 00240140 		.word	1073816576
 1083 0630 00280140 		.word	1073817600
 1084 0634 003C0140 		.word	1073822720
 1085 0638 00000000 		.word	.LC0
 1086              		.cfi_endproc
 1087              	.LFE38:
 1089              		.align	2
 1090              		.global	ADC_SoftwareStartConvCmd
 1091              		.thumb
 1092              		.thumb_func
 1094              	ADC_SoftwareStartConvCmd:
 1095              	.LFB39:
 449:../SPL/src/stm32f10x_adc.c **** 
 450:../SPL/src/stm32f10x_adc.c **** /**
 451:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC software start conversion .
 452:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 453:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start conversion.
 454:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 455:../SPL/src/stm32f10x_adc.c ****   * @retval None
 456:../SPL/src/stm32f10x_adc.c ****   */
 457:../SPL/src/stm32f10x_adc.c **** void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 458:../SPL/src/stm32f10x_adc.c **** {
 1096              		.loc 1 458 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100 063c 80B5     		push	{r7, lr}
 1101              	.LCFI30:
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 7, -8
 1104              		.cfi_offset 14, -4
 1105 063e 82B0     		sub	sp, sp, #8
 1106              	.LCFI31:
 1107              		.cfi_def_cfa_offset 16
 1108 0640 00AF     		add	r7, sp, #0
 1109              	.LCFI32:
 1110              		.cfi_def_cfa_register 7
 1111 0642 7860     		str	r0, [r7, #4]
 1112 0644 0B46     		mov	r3, r1
 1113 0646 FB70     		strb	r3, [r7, #3]
 459:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 460:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1114              		.loc 1 460 0
 1115 0648 7A68     		ldr	r2, [r7, #4]
 1116 064a 174B     		ldr	r3, .L70
 1117 064c 9A42     		cmp	r2, r3
 1118 064e 0CD0     		beq	.L66
 1119              		.loc 1 460 0 is_stmt 0 discriminator 1
 1120 0650 7A68     		ldr	r2, [r7, #4]
 1121 0652 164B     		ldr	r3, .L70+4
 1122 0654 9A42     		cmp	r2, r3
 1123 0656 08D0     		beq	.L66
 1124              		.loc 1 460 0 discriminator 2
 1125 0658 7A68     		ldr	r2, [r7, #4]
 1126 065a 154B     		ldr	r3, .L70+8
 1127 065c 9A42     		cmp	r2, r3
 1128 065e 04D0     		beq	.L66
 1129              		.loc 1 460 0 discriminator 3
 1130 0660 1448     		ldr	r0, .L70+12
 1131 0662 4FF4E671 		mov	r1, #460
 1132 0666 FFF7FEFF 		bl	assert_failed
 1133              	.L66:
 461:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1134              		.loc 1 461 0 is_stmt 1
 1135 066a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1136 066c 002B     		cmp	r3, #0
 1137 066e 07D0     		beq	.L67
 1138              		.loc 1 461 0 is_stmt 0 discriminator 1
 1139 0670 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1140 0672 012B     		cmp	r3, #1
 1141 0674 04D0     		beq	.L67
 1142              		.loc 1 461 0 discriminator 2
 1143 0676 0F48     		ldr	r0, .L70+12
 1144 0678 40F2CD11 		movw	r1, #461
 1145 067c FFF7FEFF 		bl	assert_failed
 1146              	.L67:
 462:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 1147              		.loc 1 462 0 is_stmt 1
 1148 0680 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1149 0682 002B     		cmp	r3, #0
 1150 0684 06D0     		beq	.L68
 463:../SPL/src/stm32f10x_adc.c ****   {
 464:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event and start the selected
 465:../SPL/src/stm32f10x_adc.c ****        ADC conversion */
 466:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 1151              		.loc 1 466 0
 1152 0686 7B68     		ldr	r3, [r7, #4]
 1153 0688 9B68     		ldr	r3, [r3, #8]
 1154 068a 43F4A002 		orr	r2, r3, #5242880
 1155 068e 7B68     		ldr	r3, [r7, #4]
 1156 0690 9A60     		str	r2, [r3, #8]
 1157 0692 05E0     		b	.L65
 1158              	.L68:
 467:../SPL/src/stm32f10x_adc.c ****   }
 468:../SPL/src/stm32f10x_adc.c ****   else
 469:../SPL/src/stm32f10x_adc.c ****   {
 470:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event and stop the selected
 471:../SPL/src/stm32f10x_adc.c ****        ADC conversion */
 472:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 1159              		.loc 1 472 0
 1160 0694 7B68     		ldr	r3, [r7, #4]
 1161 0696 9B68     		ldr	r3, [r3, #8]
 1162 0698 23F4A002 		bic	r2, r3, #5242880
 1163 069c 7B68     		ldr	r3, [r7, #4]
 1164 069e 9A60     		str	r2, [r3, #8]
 1165              	.L65:
 473:../SPL/src/stm32f10x_adc.c ****   }
 474:../SPL/src/stm32f10x_adc.c **** }
 1166              		.loc 1 474 0
 1167 06a0 07F10807 		add	r7, r7, #8
 1168 06a4 BD46     		mov	sp, r7
 1169 06a6 80BD     		pop	{r7, pc}
 1170              	.L71:
 1171              		.align	2
 1172              	.L70:
 1173 06a8 00240140 		.word	1073816576
 1174 06ac 00280140 		.word	1073817600
 1175 06b0 003C0140 		.word	1073822720
 1176 06b4 00000000 		.word	.LC0
 1177              		.cfi_endproc
 1178              	.LFE39:
 1180              		.align	2
 1181              		.global	ADC_GetSoftwareStartConvStatus
 1182              		.thumb
 1183              		.thumb_func
 1185              	ADC_GetSoftwareStartConvStatus:
 1186              	.LFB40:
 475:../SPL/src/stm32f10x_adc.c **** 
 476:../SPL/src/stm32f10x_adc.c **** /**
 477:../SPL/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start conversion Status.
 478:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../SPL/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 480:../SPL/src/stm32f10x_adc.c ****   */
 481:../SPL/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 482:../SPL/src/stm32f10x_adc.c **** {
 1187              		.loc 1 482 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 16
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191 06b8 80B5     		push	{r7, lr}
 1192              	.LCFI33:
 1193              		.cfi_def_cfa_offset 8
 1194              		.cfi_offset 7, -8
 1195              		.cfi_offset 14, -4
 1196 06ba 84B0     		sub	sp, sp, #16
 1197              	.LCFI34:
 1198              		.cfi_def_cfa_offset 24
 1199 06bc 00AF     		add	r7, sp, #0
 1200              	.LCFI35:
 1201              		.cfi_def_cfa_register 7
 1202 06be 7860     		str	r0, [r7, #4]
 483:../SPL/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 1203              		.loc 1 483 0
 1204 06c0 4FF00003 		mov	r3, #0
 1205 06c4 FB73     		strb	r3, [r7, #15]
 484:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 485:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1206              		.loc 1 485 0
 1207 06c6 7A68     		ldr	r2, [r7, #4]
 1208 06c8 114B     		ldr	r3, .L77
 1209 06ca 9A42     		cmp	r2, r3
 1210 06cc 0CD0     		beq	.L73
 1211              		.loc 1 485 0 is_stmt 0 discriminator 1
 1212 06ce 7A68     		ldr	r2, [r7, #4]
 1213 06d0 104B     		ldr	r3, .L77+4
 1214 06d2 9A42     		cmp	r2, r3
 1215 06d4 08D0     		beq	.L73
 1216              		.loc 1 485 0 discriminator 2
 1217 06d6 7A68     		ldr	r2, [r7, #4]
 1218 06d8 0F4B     		ldr	r3, .L77+8
 1219 06da 9A42     		cmp	r2, r3
 1220 06dc 04D0     		beq	.L73
 1221              		.loc 1 485 0 discriminator 3
 1222 06de 0F48     		ldr	r0, .L77+12
 1223 06e0 40F2E511 		movw	r1, #485
 1224 06e4 FFF7FEFF 		bl	assert_failed
 1225              	.L73:
 486:../SPL/src/stm32f10x_adc.c ****   /* Check the status of SWSTART bit */
 487:../SPL/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 1226              		.loc 1 487 0 is_stmt 1
 1227 06e8 7B68     		ldr	r3, [r7, #4]
 1228 06ea 9B68     		ldr	r3, [r3, #8]
 1229 06ec 03F48003 		and	r3, r3, #4194304
 1230 06f0 002B     		cmp	r3, #0
 1231 06f2 03D0     		beq	.L74
 488:../SPL/src/stm32f10x_adc.c ****   {
 489:../SPL/src/stm32f10x_adc.c ****     /* SWSTART bit is set */
 490:../SPL/src/stm32f10x_adc.c ****     bitstatus = SET;
 1232              		.loc 1 490 0
 1233 06f4 4FF00103 		mov	r3, #1
 1234 06f8 FB73     		strb	r3, [r7, #15]
 1235 06fa 02E0     		b	.L75
 1236              	.L74:
 491:../SPL/src/stm32f10x_adc.c ****   }
 492:../SPL/src/stm32f10x_adc.c ****   else
 493:../SPL/src/stm32f10x_adc.c ****   {
 494:../SPL/src/stm32f10x_adc.c ****     /* SWSTART bit is reset */
 495:../SPL/src/stm32f10x_adc.c ****     bitstatus = RESET;
 1237              		.loc 1 495 0
 1238 06fc 4FF00003 		mov	r3, #0
 1239 0700 FB73     		strb	r3, [r7, #15]
 1240              	.L75:
 496:../SPL/src/stm32f10x_adc.c ****   }
 497:../SPL/src/stm32f10x_adc.c ****   /* Return the SWSTART bit status */
 498:../SPL/src/stm32f10x_adc.c ****   return  bitstatus;
 1241              		.loc 1 498 0
 1242 0702 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 499:../SPL/src/stm32f10x_adc.c **** }
 1243              		.loc 1 499 0
 1244 0704 1846     		mov	r0, r3
 1245 0706 07F11007 		add	r7, r7, #16
 1246 070a BD46     		mov	sp, r7
 1247 070c 80BD     		pop	{r7, pc}
 1248              	.L78:
 1249 070e 00BF     		.align	2
 1250              	.L77:
 1251 0710 00240140 		.word	1073816576
 1252 0714 00280140 		.word	1073817600
 1253 0718 003C0140 		.word	1073822720
 1254 071c 00000000 		.word	.LC0
 1255              		.cfi_endproc
 1256              	.LFE40:
 1258              		.align	2
 1259              		.global	ADC_DiscModeChannelCountConfig
 1260              		.thumb
 1261              		.thumb_func
 1263              	ADC_DiscModeChannelCountConfig:
 1264              	.LFB41:
 500:../SPL/src/stm32f10x_adc.c **** 
 501:../SPL/src/stm32f10x_adc.c **** /**
 502:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular
 503:../SPL/src/stm32f10x_adc.c ****   *         group channel.
 504:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 505:../SPL/src/stm32f10x_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel
 506:../SPL/src/stm32f10x_adc.c ****   *         count value. This number must be between 1 and 8.
 507:../SPL/src/stm32f10x_adc.c ****   * @retval None
 508:../SPL/src/stm32f10x_adc.c ****   */
 509:../SPL/src/stm32f10x_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 510:../SPL/src/stm32f10x_adc.c **** {
 1265              		.loc 1 510 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 16
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269 0720 80B5     		push	{r7, lr}
 1270              	.LCFI36:
 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0722 84B0     		sub	sp, sp, #16
 1275              	.LCFI37:
 1276              		.cfi_def_cfa_offset 24
 1277 0724 00AF     		add	r7, sp, #0
 1278              	.LCFI38:
 1279              		.cfi_def_cfa_register 7
 1280 0726 7860     		str	r0, [r7, #4]
 1281 0728 0B46     		mov	r3, r1
 1282 072a FB70     		strb	r3, [r7, #3]
 511:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 1283              		.loc 1 511 0
 1284 072c 4FF00003 		mov	r3, #0
 1285 0730 FB60     		str	r3, [r7, #12]
 512:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 1286              		.loc 1 512 0
 1287 0732 4FF00003 		mov	r3, #0
 1288 0736 BB60     		str	r3, [r7, #8]
 513:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 514:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1289              		.loc 1 514 0
 1290 0738 7A68     		ldr	r2, [r7, #4]
 1291 073a 194B     		ldr	r3, .L83
 1292 073c 9A42     		cmp	r2, r3
 1293 073e 0CD0     		beq	.L80
 1294              		.loc 1 514 0 is_stmt 0 discriminator 1
 1295 0740 7A68     		ldr	r2, [r7, #4]
 1296 0742 184B     		ldr	r3, .L83+4
 1297 0744 9A42     		cmp	r2, r3
 1298 0746 08D0     		beq	.L80
 1299              		.loc 1 514 0 discriminator 2
 1300 0748 7A68     		ldr	r2, [r7, #4]
 1301 074a 174B     		ldr	r3, .L83+8
 1302 074c 9A42     		cmp	r2, r3
 1303 074e 04D0     		beq	.L80
 1304              		.loc 1 514 0 discriminator 3
 1305 0750 1648     		ldr	r0, .L83+12
 1306 0752 40F20221 		movw	r1, #514
 1307 0756 FFF7FEFF 		bl	assert_failed
 1308              	.L80:
 515:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 1309              		.loc 1 515 0 is_stmt 1
 1310 075a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1311 075c 002B     		cmp	r3, #0
 1312 075e 02D0     		beq	.L81
 1313              		.loc 1 515 0 is_stmt 0 discriminator 2
 1314 0760 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1315 0762 082B     		cmp	r3, #8
 1316 0764 04D9     		bls	.L82
 1317              	.L81:
 1318              		.loc 1 515 0 discriminator 1
 1319 0766 1148     		ldr	r0, .L83+12
 1320 0768 40F20321 		movw	r1, #515
 1321 076c FFF7FEFF 		bl	assert_failed
 1322              	.L82:
 516:../SPL/src/stm32f10x_adc.c ****   /* Get the old register value */
 517:../SPL/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 1323              		.loc 1 517 0 is_stmt 1
 1324 0770 7B68     		ldr	r3, [r7, #4]
 1325 0772 5B68     		ldr	r3, [r3, #4]
 1326 0774 FB60     		str	r3, [r7, #12]
 518:../SPL/src/stm32f10x_adc.c ****   /* Clear the old discontinuous mode channel count */
 519:../SPL/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_DISCNUM_Reset;
 1327              		.loc 1 519 0
 1328 0776 FB68     		ldr	r3, [r7, #12]
 1329 0778 23F46043 		bic	r3, r3, #57344
 1330 077c FB60     		str	r3, [r7, #12]
 520:../SPL/src/stm32f10x_adc.c ****   /* Set the discontinuous mode channel count */
 521:../SPL/src/stm32f10x_adc.c ****   tmpreg2 = Number - 1;
 1331              		.loc 1 521 0
 1332 077e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1333 0780 03F1FF33 		add	r3, r3, #-1
 1334 0784 BB60     		str	r3, [r7, #8]
 522:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1335              		.loc 1 522 0
 1336 0786 BB68     		ldr	r3, [r7, #8]
 1337 0788 4FEA4333 		lsl	r3, r3, #13
 1338 078c FA68     		ldr	r2, [r7, #12]
 1339 078e 1343     		orrs	r3, r3, r2
 1340 0790 FB60     		str	r3, [r7, #12]
 523:../SPL/src/stm32f10x_adc.c ****   /* Store the new register value */
 524:../SPL/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 1341              		.loc 1 524 0
 1342 0792 7B68     		ldr	r3, [r7, #4]
 1343 0794 FA68     		ldr	r2, [r7, #12]
 1344 0796 5A60     		str	r2, [r3, #4]
 525:../SPL/src/stm32f10x_adc.c **** }
 1345              		.loc 1 525 0
 1346 0798 07F11007 		add	r7, r7, #16
 1347 079c BD46     		mov	sp, r7
 1348 079e 80BD     		pop	{r7, pc}
 1349              	.L84:
 1350              		.align	2
 1351              	.L83:
 1352 07a0 00240140 		.word	1073816576
 1353 07a4 00280140 		.word	1073817600
 1354 07a8 003C0140 		.word	1073822720
 1355 07ac 00000000 		.word	.LC0
 1356              		.cfi_endproc
 1357              	.LFE41:
 1359              		.align	2
 1360              		.global	ADC_DiscModeCmd
 1361              		.thumb
 1362              		.thumb_func
 1364              	ADC_DiscModeCmd:
 1365              	.LFB42:
 526:../SPL/src/stm32f10x_adc.c **** 
 527:../SPL/src/stm32f10x_adc.c **** /**
 528:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group
 529:../SPL/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 530:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 531:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 532:../SPL/src/stm32f10x_adc.c ****   *         on regular group channel.
 533:../SPL/src/stm32f10x_adc.c ****   *         This parameter can be: ENABLE or DISABLE.
 534:../SPL/src/stm32f10x_adc.c ****   * @retval None
 535:../SPL/src/stm32f10x_adc.c ****   */
 536:../SPL/src/stm32f10x_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 537:../SPL/src/stm32f10x_adc.c **** {
 1366              		.loc 1 537 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 8
 1369              		@ frame_needed = 1, uses_anonymous_args = 0
 1370 07b0 80B5     		push	{r7, lr}
 1371              	.LCFI39:
 1372              		.cfi_def_cfa_offset 8
 1373              		.cfi_offset 7, -8
 1374              		.cfi_offset 14, -4
 1375 07b2 82B0     		sub	sp, sp, #8
 1376              	.LCFI40:
 1377              		.cfi_def_cfa_offset 16
 1378 07b4 00AF     		add	r7, sp, #0
 1379              	.LCFI41:
 1380              		.cfi_def_cfa_register 7
 1381 07b6 7860     		str	r0, [r7, #4]
 1382 07b8 0B46     		mov	r3, r1
 1383 07ba FB70     		strb	r3, [r7, #3]
 538:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 539:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1384              		.loc 1 539 0
 1385 07bc 7A68     		ldr	r2, [r7, #4]
 1386 07be 174B     		ldr	r3, .L90
 1387 07c0 9A42     		cmp	r2, r3
 1388 07c2 0CD0     		beq	.L86
 1389              		.loc 1 539 0 is_stmt 0 discriminator 1
 1390 07c4 7A68     		ldr	r2, [r7, #4]
 1391 07c6 164B     		ldr	r3, .L90+4
 1392 07c8 9A42     		cmp	r2, r3
 1393 07ca 08D0     		beq	.L86
 1394              		.loc 1 539 0 discriminator 2
 1395 07cc 7A68     		ldr	r2, [r7, #4]
 1396 07ce 154B     		ldr	r3, .L90+8
 1397 07d0 9A42     		cmp	r2, r3
 1398 07d2 04D0     		beq	.L86
 1399              		.loc 1 539 0 discriminator 3
 1400 07d4 1448     		ldr	r0, .L90+12
 1401 07d6 40F21B21 		movw	r1, #539
 1402 07da FFF7FEFF 		bl	assert_failed
 1403              	.L86:
 540:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1404              		.loc 1 540 0 is_stmt 1
 1405 07de FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1406 07e0 002B     		cmp	r3, #0
 1407 07e2 07D0     		beq	.L87
 1408              		.loc 1 540 0 is_stmt 0 discriminator 1
 1409 07e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1410 07e6 012B     		cmp	r3, #1
 1411 07e8 04D0     		beq	.L87
 1412              		.loc 1 540 0 discriminator 2
 1413 07ea 0F48     		ldr	r0, .L90+12
 1414 07ec 4FF40771 		mov	r1, #540
 1415 07f0 FFF7FEFF 		bl	assert_failed
 1416              	.L87:
 541:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 1417              		.loc 1 541 0 is_stmt 1
 1418 07f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1419 07f6 002B     		cmp	r3, #0
 1420 07f8 06D0     		beq	.L88
 542:../SPL/src/stm32f10x_adc.c ****   {
 543:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 544:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_DISCEN_Set;
 1421              		.loc 1 544 0
 1422 07fa 7B68     		ldr	r3, [r7, #4]
 1423 07fc 5B68     		ldr	r3, [r3, #4]
 1424 07fe 43F40062 		orr	r2, r3, #2048
 1425 0802 7B68     		ldr	r3, [r7, #4]
 1426 0804 5A60     		str	r2, [r3, #4]
 1427 0806 05E0     		b	.L85
 1428              	.L88:
 545:../SPL/src/stm32f10x_adc.c ****   }
 546:../SPL/src/stm32f10x_adc.c ****   else
 547:../SPL/src/stm32f10x_adc.c ****   {
 548:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 549:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_DISCEN_Reset;
 1429              		.loc 1 549 0
 1430 0808 7B68     		ldr	r3, [r7, #4]
 1431 080a 5B68     		ldr	r3, [r3, #4]
 1432 080c 23F40062 		bic	r2, r3, #2048
 1433 0810 7B68     		ldr	r3, [r7, #4]
 1434 0812 5A60     		str	r2, [r3, #4]
 1435              	.L85:
 550:../SPL/src/stm32f10x_adc.c ****   }
 551:../SPL/src/stm32f10x_adc.c **** }
 1436              		.loc 1 551 0
 1437 0814 07F10807 		add	r7, r7, #8
 1438 0818 BD46     		mov	sp, r7
 1439 081a 80BD     		pop	{r7, pc}
 1440              	.L91:
 1441              		.align	2
 1442              	.L90:
 1443 081c 00240140 		.word	1073816576
 1444 0820 00280140 		.word	1073817600
 1445 0824 003C0140 		.word	1073822720
 1446 0828 00000000 		.word	.LC0
 1447              		.cfi_endproc
 1448              	.LFE42:
 1450              		.align	2
 1451              		.global	ADC_RegularChannelConfig
 1452              		.thumb
 1453              		.thumb_func
 1455              	ADC_RegularChannelConfig:
 1456              	.LFB43:
 552:../SPL/src/stm32f10x_adc.c **** 
 553:../SPL/src/stm32f10x_adc.c **** /**
 554:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 555:../SPL/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 556:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 557:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 558:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 559:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 560:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 561:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 562:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 563:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 564:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 565:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 566:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 567:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 568:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 569:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 570:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 571:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 572:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 573:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 574:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 575:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 576:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 577:../SPL/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the regular group sequencer. This parameter must be between 1 to 16.
 578:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 579:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 580:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 581:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 582:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 583:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 584:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 585:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 586:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 587:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 588:../SPL/src/stm32f10x_adc.c ****   * @retval None
 589:../SPL/src/stm32f10x_adc.c ****   */
 590:../SPL/src/stm32f10x_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 591:../SPL/src/stm32f10x_adc.c **** {
 1457              		.loc 1 591 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 16
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 082c 80B5     		push	{r7, lr}
 1462              	.LCFI42:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 082e 84B0     		sub	sp, sp, #16
 1467              	.LCFI43:
 1468              		.cfi_def_cfa_offset 24
 1469 0830 00AF     		add	r7, sp, #0
 1470              	.LCFI44:
 1471              		.cfi_def_cfa_register 7
 1472 0832 7860     		str	r0, [r7, #4]
 1473 0834 F970     		strb	r1, [r7, #3]
 1474 0836 BA70     		strb	r2, [r7, #2]
 1475 0838 7B70     		strb	r3, [r7, #1]
 592:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 1476              		.loc 1 592 0
 1477 083a 4FF00003 		mov	r3, #0
 1478 083e FB60     		str	r3, [r7, #12]
 1479 0840 4FF00003 		mov	r3, #0
 1480 0844 BB60     		str	r3, [r7, #8]
 593:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 594:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1481              		.loc 1 594 0
 1482 0846 7A68     		ldr	r2, [r7, #4]
 1483 0848 8B4B     		ldr	r3, .L103
 1484 084a 9A42     		cmp	r2, r3
 1485 084c 0CD0     		beq	.L93
 1486              		.loc 1 594 0 is_stmt 0 discriminator 1
 1487 084e 7A68     		ldr	r2, [r7, #4]
 1488 0850 8A4B     		ldr	r3, .L103+4
 1489 0852 9A42     		cmp	r2, r3
 1490 0854 08D0     		beq	.L93
 1491              		.loc 1 594 0 discriminator 2
 1492 0856 7A68     		ldr	r2, [r7, #4]
 1493 0858 894B     		ldr	r3, .L103+8
 1494 085a 9A42     		cmp	r2, r3
 1495 085c 04D0     		beq	.L93
 1496              		.loc 1 594 0 discriminator 3
 1497 085e 8948     		ldr	r0, .L103+12
 1498 0860 40F25221 		movw	r1, #594
 1499 0864 FFF7FEFF 		bl	assert_failed
 1500              	.L93:
 595:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 1501              		.loc 1 595 0 is_stmt 1
 1502 0868 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1503 086a 002B     		cmp	r3, #0
 1504 086c 37D0     		beq	.L94
 1505              		.loc 1 595 0 is_stmt 0 discriminator 1
 1506 086e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1507 0870 012B     		cmp	r3, #1
 1508 0872 34D0     		beq	.L94
 1509              		.loc 1 595 0 discriminator 2
 1510 0874 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1511 0876 022B     		cmp	r3, #2
 1512 0878 31D0     		beq	.L94
 1513              		.loc 1 595 0 discriminator 3
 1514 087a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1515 087c 032B     		cmp	r3, #3
 1516 087e 2ED0     		beq	.L94
 1517              		.loc 1 595 0 discriminator 4
 1518 0880 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1519 0882 042B     		cmp	r3, #4
 1520 0884 2BD0     		beq	.L94
 1521              		.loc 1 595 0 discriminator 5
 1522 0886 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1523 0888 052B     		cmp	r3, #5
 1524 088a 28D0     		beq	.L94
 1525              		.loc 1 595 0 discriminator 6
 1526 088c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1527 088e 062B     		cmp	r3, #6
 1528 0890 25D0     		beq	.L94
 1529              		.loc 1 595 0 discriminator 7
 1530 0892 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1531 0894 072B     		cmp	r3, #7
 1532 0896 22D0     		beq	.L94
 1533              		.loc 1 595 0 discriminator 8
 1534 0898 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1535 089a 082B     		cmp	r3, #8
 1536 089c 1FD0     		beq	.L94
 1537              		.loc 1 595 0 discriminator 9
 1538 089e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1539 08a0 092B     		cmp	r3, #9
 1540 08a2 1CD0     		beq	.L94
 1541              		.loc 1 595 0 discriminator 10
 1542 08a4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1543 08a6 0A2B     		cmp	r3, #10
 1544 08a8 19D0     		beq	.L94
 1545              		.loc 1 595 0 discriminator 11
 1546 08aa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1547 08ac 0B2B     		cmp	r3, #11
 1548 08ae 16D0     		beq	.L94
 1549              		.loc 1 595 0 discriminator 12
 1550 08b0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1551 08b2 0C2B     		cmp	r3, #12
 1552 08b4 13D0     		beq	.L94
 1553              		.loc 1 595 0 discriminator 13
 1554 08b6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1555 08b8 0D2B     		cmp	r3, #13
 1556 08ba 10D0     		beq	.L94
 1557              		.loc 1 595 0 discriminator 14
 1558 08bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1559 08be 0E2B     		cmp	r3, #14
 1560 08c0 0DD0     		beq	.L94
 1561              		.loc 1 595 0 discriminator 15
 1562 08c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1563 08c4 0F2B     		cmp	r3, #15
 1564 08c6 0AD0     		beq	.L94
 1565              		.loc 1 595 0 discriminator 16
 1566 08c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1567 08ca 102B     		cmp	r3, #16
 1568 08cc 07D0     		beq	.L94
 1569              		.loc 1 595 0 discriminator 17
 1570 08ce FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1571 08d0 112B     		cmp	r3, #17
 1572 08d2 04D0     		beq	.L94
 1573              		.loc 1 595 0 discriminator 18
 1574 08d4 6B48     		ldr	r0, .L103+12
 1575 08d6 40F25321 		movw	r1, #595
 1576 08da FFF7FEFF 		bl	assert_failed
 1577              	.L94:
 596:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 1578              		.loc 1 596 0 is_stmt 1
 1579 08de BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1580 08e0 002B     		cmp	r3, #0
 1581 08e2 02D0     		beq	.L95
 1582              		.loc 1 596 0 is_stmt 0 discriminator 2
 1583 08e4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1584 08e6 102B     		cmp	r3, #16
 1585 08e8 04D9     		bls	.L96
 1586              	.L95:
 1587              		.loc 1 596 0 discriminator 1
 1588 08ea 6648     		ldr	r0, .L103+12
 1589 08ec 4FF41571 		mov	r1, #596
 1590 08f0 FFF7FEFF 		bl	assert_failed
 1591              	.L96:
 597:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 1592              		.loc 1 597 0 is_stmt 1
 1593 08f4 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1594 08f6 002B     		cmp	r3, #0
 1595 08f8 19D0     		beq	.L97
 1596              		.loc 1 597 0 is_stmt 0 discriminator 1
 1597 08fa 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1598 08fc 012B     		cmp	r3, #1
 1599 08fe 16D0     		beq	.L97
 1600              		.loc 1 597 0 discriminator 2
 1601 0900 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1602 0902 022B     		cmp	r3, #2
 1603 0904 13D0     		beq	.L97
 1604              		.loc 1 597 0 discriminator 3
 1605 0906 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1606 0908 032B     		cmp	r3, #3
 1607 090a 10D0     		beq	.L97
 1608              		.loc 1 597 0 discriminator 4
 1609 090c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1610 090e 042B     		cmp	r3, #4
 1611 0910 0DD0     		beq	.L97
 1612              		.loc 1 597 0 discriminator 5
 1613 0912 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1614 0914 052B     		cmp	r3, #5
 1615 0916 0AD0     		beq	.L97
 1616              		.loc 1 597 0 discriminator 6
 1617 0918 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1618 091a 062B     		cmp	r3, #6
 1619 091c 07D0     		beq	.L97
 1620              		.loc 1 597 0 discriminator 7
 1621 091e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1622 0920 072B     		cmp	r3, #7
 1623 0922 04D0     		beq	.L97
 1624              		.loc 1 597 0 discriminator 8
 1625 0924 5748     		ldr	r0, .L103+12
 1626 0926 40F25521 		movw	r1, #597
 1627 092a FFF7FEFF 		bl	assert_failed
 1628              	.L97:
 598:../SPL/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 599:../SPL/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1629              		.loc 1 599 0 is_stmt 1
 1630 092e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1631 0930 092B     		cmp	r3, #9
 1632 0932 27D9     		bls	.L98
 600:../SPL/src/stm32f10x_adc.c ****   {
 601:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 602:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1633              		.loc 1 602 0
 1634 0934 7B68     		ldr	r3, [r7, #4]
 1635 0936 DB68     		ldr	r3, [r3, #12]
 1636 0938 FB60     		str	r3, [r7, #12]
 603:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 604:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 1637              		.loc 1 604 0
 1638 093a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1639 093c 1346     		mov	r3, r2
 1640 093e 4FEA4303 		lsl	r3, r3, #1
 1641 0942 9B18     		adds	r3, r3, r2
 1642 0944 A3F11E03 		sub	r3, r3, #30
 1643 0948 4FF00702 		mov	r2, #7
 1644 094c 02FA03F3 		lsl	r3, r2, r3
 1645 0950 BB60     		str	r3, [r7, #8]
 605:../SPL/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 606:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1646              		.loc 1 606 0
 1647 0952 BB68     		ldr	r3, [r7, #8]
 1648 0954 6FEA0303 		mvn	r3, r3
 1649 0958 FA68     		ldr	r2, [r7, #12]
 1650 095a 1340     		ands	r3, r3, r2
 1651 095c FB60     		str	r3, [r7, #12]
 607:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 608:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 1652              		.loc 1 608 0
 1653 095e 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1654 0960 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1655 0962 1346     		mov	r3, r2
 1656 0964 4FEA4303 		lsl	r3, r3, #1
 1657 0968 9B18     		adds	r3, r3, r2
 1658 096a A3F11E03 		sub	r3, r3, #30
 1659 096e 01FA03F3 		lsl	r3, r1, r3
 1660 0972 BB60     		str	r3, [r7, #8]
 609:../SPL/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 610:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 1661              		.loc 1 610 0
 1662 0974 FA68     		ldr	r2, [r7, #12]
 1663 0976 BB68     		ldr	r3, [r7, #8]
 1664 0978 1343     		orrs	r3, r3, r2
 1665 097a FB60     		str	r3, [r7, #12]
 611:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 612:../SPL/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1666              		.loc 1 612 0
 1667 097c 7B68     		ldr	r3, [r7, #4]
 1668 097e FA68     		ldr	r2, [r7, #12]
 1669 0980 DA60     		str	r2, [r3, #12]
 1670 0982 22E0     		b	.L99
 1671              	.L98:
 613:../SPL/src/stm32f10x_adc.c ****   }
 614:../SPL/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 615:../SPL/src/stm32f10x_adc.c ****   {
 616:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 617:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1672              		.loc 1 617 0
 1673 0984 7B68     		ldr	r3, [r7, #4]
 1674 0986 1B69     		ldr	r3, [r3, #16]
 1675 0988 FB60     		str	r3, [r7, #12]
 618:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 619:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 1676              		.loc 1 619 0
 1677 098a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1678 098c 1346     		mov	r3, r2
 1679 098e 4FEA4303 		lsl	r3, r3, #1
 1680 0992 9B18     		adds	r3, r3, r2
 1681 0994 4FF00702 		mov	r2, #7
 1682 0998 02FA03F3 		lsl	r3, r2, r3
 1683 099c BB60     		str	r3, [r7, #8]
 620:../SPL/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 621:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1684              		.loc 1 621 0
 1685 099e BB68     		ldr	r3, [r7, #8]
 1686 09a0 6FEA0303 		mvn	r3, r3
 1687 09a4 FA68     		ldr	r2, [r7, #12]
 1688 09a6 1340     		ands	r3, r3, r2
 1689 09a8 FB60     		str	r3, [r7, #12]
 622:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 623:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1690              		.loc 1 623 0
 1691 09aa 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1692 09ac FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1693 09ae 1346     		mov	r3, r2
 1694 09b0 4FEA4303 		lsl	r3, r3, #1
 1695 09b4 9B18     		adds	r3, r3, r2
 1696 09b6 01FA03F3 		lsl	r3, r1, r3
 1697 09ba BB60     		str	r3, [r7, #8]
 624:../SPL/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 625:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 1698              		.loc 1 625 0
 1699 09bc FA68     		ldr	r2, [r7, #12]
 1700 09be BB68     		ldr	r3, [r7, #8]
 1701 09c0 1343     		orrs	r3, r3, r2
 1702 09c2 FB60     		str	r3, [r7, #12]
 626:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 627:../SPL/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1703              		.loc 1 627 0
 1704 09c4 7B68     		ldr	r3, [r7, #4]
 1705 09c6 FA68     		ldr	r2, [r7, #12]
 1706 09c8 1A61     		str	r2, [r3, #16]
 1707              	.L99:
 628:../SPL/src/stm32f10x_adc.c ****   }
 629:../SPL/src/stm32f10x_adc.c ****   /* For Rank 1 to 6 */
 630:../SPL/src/stm32f10x_adc.c ****   if (Rank < 7)
 1708              		.loc 1 630 0
 1709 09ca BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1710 09cc 062B     		cmp	r3, #6
 1711 09ce 27D8     		bhi	.L100
 631:../SPL/src/stm32f10x_adc.c ****   {
 632:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 633:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR3;
 1712              		.loc 1 633 0
 1713 09d0 7B68     		ldr	r3, [r7, #4]
 1714 09d2 5B6B     		ldr	r3, [r3, #52]
 1715 09d4 FB60     		str	r3, [r7, #12]
 634:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 635:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 1716              		.loc 1 635 0
 1717 09d6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1718 09d8 03F1FF32 		add	r2, r3, #-1
 1719 09dc 1346     		mov	r3, r2
 1720 09de 4FEA8303 		lsl	r3, r3, #2
 1721 09e2 9B18     		adds	r3, r3, r2
 1722 09e4 4FF01F02 		mov	r2, #31
 1723 09e8 02FA03F3 		lsl	r3, r2, r3
 1724 09ec BB60     		str	r3, [r7, #8]
 636:../SPL/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 637:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1725              		.loc 1 637 0
 1726 09ee BB68     		ldr	r3, [r7, #8]
 1727 09f0 6FEA0303 		mvn	r3, r3
 1728 09f4 FA68     		ldr	r2, [r7, #12]
 1729 09f6 1340     		ands	r3, r3, r2
 1730 09f8 FB60     		str	r3, [r7, #12]
 638:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 639:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 1731              		.loc 1 639 0
 1732 09fa F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1733 09fc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1734 09fe 03F1FF32 		add	r2, r3, #-1
 1735 0a02 1346     		mov	r3, r2
 1736 0a04 4FEA8303 		lsl	r3, r3, #2
 1737 0a08 9B18     		adds	r3, r3, r2
 1738 0a0a 01FA03F3 		lsl	r3, r1, r3
 1739 0a0e BB60     		str	r3, [r7, #8]
 640:../SPL/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 641:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 1740              		.loc 1 641 0
 1741 0a10 FA68     		ldr	r2, [r7, #12]
 1742 0a12 BB68     		ldr	r3, [r7, #8]
 1743 0a14 1343     		orrs	r3, r3, r2
 1744 0a16 FB60     		str	r3, [r7, #12]
 642:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 643:../SPL/src/stm32f10x_adc.c ****     ADCx->SQR3 = tmpreg1;
 1745              		.loc 1 643 0
 1746 0a18 7B68     		ldr	r3, [r7, #4]
 1747 0a1a FA68     		ldr	r2, [r7, #12]
 1748 0a1c 5A63     		str	r2, [r3, #52]
 1749 0a1e 5AE0     		b	.L92
 1750              	.L100:
 644:../SPL/src/stm32f10x_adc.c ****   }
 645:../SPL/src/stm32f10x_adc.c ****   /* For Rank 7 to 12 */
 646:../SPL/src/stm32f10x_adc.c ****   else if (Rank < 13)
 1751              		.loc 1 646 0
 1752 0a20 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1753 0a22 0C2B     		cmp	r3, #12
 1754 0a24 30D8     		bhi	.L102
 647:../SPL/src/stm32f10x_adc.c ****   {
 648:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 649:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR2;
 1755              		.loc 1 649 0
 1756 0a26 7B68     		ldr	r3, [r7, #4]
 1757 0a28 1B6B     		ldr	r3, [r3, #48]
 1758 0a2a FB60     		str	r3, [r7, #12]
 650:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 651:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 1759              		.loc 1 651 0
 1760 0a2c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1761 0a2e 1346     		mov	r3, r2
 1762 0a30 4FEA8303 		lsl	r3, r3, #2
 1763 0a34 9B18     		adds	r3, r3, r2
 1764 0a36 A3F12303 		sub	r3, r3, #35
 1765 0a3a 4FF01F02 		mov	r2, #31
 1766 0a3e 02FA03F3 		lsl	r3, r2, r3
 1767 0a42 BB60     		str	r3, [r7, #8]
 652:../SPL/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 653:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1768              		.loc 1 653 0
 1769 0a44 BB68     		ldr	r3, [r7, #8]
 1770 0a46 6FEA0303 		mvn	r3, r3
 1771 0a4a FA68     		ldr	r2, [r7, #12]
 1772 0a4c 1340     		ands	r3, r3, r2
 1773 0a4e FB60     		str	r3, [r7, #12]
 654:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 655:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 1774              		.loc 1 655 0
 1775 0a50 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1776 0a52 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1777 0a54 1346     		mov	r3, r2
 1778 0a56 4FEA8303 		lsl	r3, r3, #2
 1779 0a5a 9B18     		adds	r3, r3, r2
 1780 0a5c A3F12303 		sub	r3, r3, #35
 1781 0a60 01FA03F3 		lsl	r3, r1, r3
 1782 0a64 BB60     		str	r3, [r7, #8]
 656:../SPL/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 657:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 1783              		.loc 1 657 0
 1784 0a66 FA68     		ldr	r2, [r7, #12]
 1785 0a68 BB68     		ldr	r3, [r7, #8]
 1786 0a6a 1343     		orrs	r3, r3, r2
 1787 0a6c FB60     		str	r3, [r7, #12]
 658:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 659:../SPL/src/stm32f10x_adc.c ****     ADCx->SQR2 = tmpreg1;
 1788              		.loc 1 659 0
 1789 0a6e 7B68     		ldr	r3, [r7, #4]
 1790 0a70 FA68     		ldr	r2, [r7, #12]
 1791 0a72 1A63     		str	r2, [r3, #48]
 1792 0a74 2FE0     		b	.L92
 1793              	.L104:
 1794 0a76 00BF     		.align	2
 1795              	.L103:
 1796 0a78 00240140 		.word	1073816576
 1797 0a7c 00280140 		.word	1073817600
 1798 0a80 003C0140 		.word	1073822720
 1799 0a84 00000000 		.word	.LC0
 1800              	.L102:
 660:../SPL/src/stm32f10x_adc.c ****   }
 661:../SPL/src/stm32f10x_adc.c ****   /* For Rank 13 to 16 */
 662:../SPL/src/stm32f10x_adc.c ****   else
 663:../SPL/src/stm32f10x_adc.c ****   {
 664:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 665:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR1;
 1801              		.loc 1 665 0
 1802 0a88 7B68     		ldr	r3, [r7, #4]
 1803 0a8a DB6A     		ldr	r3, [r3, #44]
 1804 0a8c FB60     		str	r3, [r7, #12]
 666:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 667:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 1805              		.loc 1 667 0
 1806 0a8e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1807 0a90 1346     		mov	r3, r2
 1808 0a92 4FEA8303 		lsl	r3, r3, #2
 1809 0a96 9B18     		adds	r3, r3, r2
 1810 0a98 A3F14103 		sub	r3, r3, #65
 1811 0a9c 4FF01F02 		mov	r2, #31
 1812 0aa0 02FA03F3 		lsl	r3, r2, r3
 1813 0aa4 BB60     		str	r3, [r7, #8]
 668:../SPL/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 669:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 1814              		.loc 1 669 0
 1815 0aa6 BB68     		ldr	r3, [r7, #8]
 1816 0aa8 6FEA0303 		mvn	r3, r3
 1817 0aac FA68     		ldr	r2, [r7, #12]
 1818 0aae 1340     		ands	r3, r3, r2
 1819 0ab0 FB60     		str	r3, [r7, #12]
 670:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 671:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 1820              		.loc 1 671 0
 1821 0ab2 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1822 0ab4 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1823 0ab6 1346     		mov	r3, r2
 1824 0ab8 4FEA8303 		lsl	r3, r3, #2
 1825 0abc 9B18     		adds	r3, r3, r2
 1826 0abe A3F14103 		sub	r3, r3, #65
 1827 0ac2 01FA03F3 		lsl	r3, r1, r3
 1828 0ac6 BB60     		str	r3, [r7, #8]
 672:../SPL/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 673:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 1829              		.loc 1 673 0
 1830 0ac8 FA68     		ldr	r2, [r7, #12]
 1831 0aca BB68     		ldr	r3, [r7, #8]
 1832 0acc 1343     		orrs	r3, r3, r2
 1833 0ace FB60     		str	r3, [r7, #12]
 674:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 675:../SPL/src/stm32f10x_adc.c ****     ADCx->SQR1 = tmpreg1;
 1834              		.loc 1 675 0
 1835 0ad0 7B68     		ldr	r3, [r7, #4]
 1836 0ad2 FA68     		ldr	r2, [r7, #12]
 1837 0ad4 DA62     		str	r2, [r3, #44]
 1838              	.L92:
 676:../SPL/src/stm32f10x_adc.c ****   }
 677:../SPL/src/stm32f10x_adc.c **** }
 1839              		.loc 1 677 0
 1840 0ad6 07F11007 		add	r7, r7, #16
 1841 0ada BD46     		mov	sp, r7
 1842 0adc 80BD     		pop	{r7, pc}
 1843              		.cfi_endproc
 1844              	.LFE43:
 1846 0ade 00BF     		.align	2
 1847              		.global	ADC_ExternalTrigConvCmd
 1848              		.thumb
 1849              		.thumb_func
 1851              	ADC_ExternalTrigConvCmd:
 1852              	.LFB44:
 678:../SPL/src/stm32f10x_adc.c **** 
 679:../SPL/src/stm32f10x_adc.c **** /**
 680:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx conversion through external trigger.
 681:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 682:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of conversion.
 683:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 684:../SPL/src/stm32f10x_adc.c ****   * @retval None
 685:../SPL/src/stm32f10x_adc.c ****   */
 686:../SPL/src/stm32f10x_adc.c **** void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 687:../SPL/src/stm32f10x_adc.c **** {
 1853              		.loc 1 687 0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 8
 1856              		@ frame_needed = 1, uses_anonymous_args = 0
 1857 0ae0 80B5     		push	{r7, lr}
 1858              	.LCFI45:
 1859              		.cfi_def_cfa_offset 8
 1860              		.cfi_offset 7, -8
 1861              		.cfi_offset 14, -4
 1862 0ae2 82B0     		sub	sp, sp, #8
 1863              	.LCFI46:
 1864              		.cfi_def_cfa_offset 16
 1865 0ae4 00AF     		add	r7, sp, #0
 1866              	.LCFI47:
 1867              		.cfi_def_cfa_register 7
 1868 0ae6 7860     		str	r0, [r7, #4]
 1869 0ae8 0B46     		mov	r3, r1
 1870 0aea FB70     		strb	r3, [r7, #3]
 688:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 689:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1871              		.loc 1 689 0
 1872 0aec 7A68     		ldr	r2, [r7, #4]
 1873 0aee 174B     		ldr	r3, .L110
 1874 0af0 9A42     		cmp	r2, r3
 1875 0af2 0CD0     		beq	.L106
 1876              		.loc 1 689 0 is_stmt 0 discriminator 1
 1877 0af4 7A68     		ldr	r2, [r7, #4]
 1878 0af6 164B     		ldr	r3, .L110+4
 1879 0af8 9A42     		cmp	r2, r3
 1880 0afa 08D0     		beq	.L106
 1881              		.loc 1 689 0 discriminator 2
 1882 0afc 7A68     		ldr	r2, [r7, #4]
 1883 0afe 154B     		ldr	r3, .L110+8
 1884 0b00 9A42     		cmp	r2, r3
 1885 0b02 04D0     		beq	.L106
 1886              		.loc 1 689 0 discriminator 3
 1887 0b04 1448     		ldr	r0, .L110+12
 1888 0b06 40F2B121 		movw	r1, #689
 1889 0b0a FFF7FEFF 		bl	assert_failed
 1890              	.L106:
 690:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1891              		.loc 1 690 0 is_stmt 1
 1892 0b0e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1893 0b10 002B     		cmp	r3, #0
 1894 0b12 07D0     		beq	.L107
 1895              		.loc 1 690 0 is_stmt 0 discriminator 1
 1896 0b14 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1897 0b16 012B     		cmp	r3, #1
 1898 0b18 04D0     		beq	.L107
 1899              		.loc 1 690 0 discriminator 2
 1900 0b1a 0F48     		ldr	r0, .L110+12
 1901 0b1c 40F2B221 		movw	r1, #690
 1902 0b20 FFF7FEFF 		bl	assert_failed
 1903              	.L107:
 691:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 1904              		.loc 1 691 0 is_stmt 1
 1905 0b24 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1906 0b26 002B     		cmp	r3, #0
 1907 0b28 06D0     		beq	.L108
 692:../SPL/src/stm32f10x_adc.c ****   {
 693:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event */
 694:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_Set;
 1908              		.loc 1 694 0
 1909 0b2a 7B68     		ldr	r3, [r7, #4]
 1910 0b2c 9B68     		ldr	r3, [r3, #8]
 1911 0b2e 43F48012 		orr	r2, r3, #1048576
 1912 0b32 7B68     		ldr	r3, [r7, #4]
 1913 0b34 9A60     		str	r2, [r3, #8]
 1914 0b36 05E0     		b	.L105
 1915              	.L108:
 695:../SPL/src/stm32f10x_adc.c ****   }
 696:../SPL/src/stm32f10x_adc.c ****   else
 697:../SPL/src/stm32f10x_adc.c ****   {
 698:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event */
 699:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_Reset;
 1916              		.loc 1 699 0
 1917 0b38 7B68     		ldr	r3, [r7, #4]
 1918 0b3a 9B68     		ldr	r3, [r3, #8]
 1919 0b3c 23F48012 		bic	r2, r3, #1048576
 1920 0b40 7B68     		ldr	r3, [r7, #4]
 1921 0b42 9A60     		str	r2, [r3, #8]
 1922              	.L105:
 700:../SPL/src/stm32f10x_adc.c ****   }
 701:../SPL/src/stm32f10x_adc.c **** }
 1923              		.loc 1 701 0
 1924 0b44 07F10807 		add	r7, r7, #8
 1925 0b48 BD46     		mov	sp, r7
 1926 0b4a 80BD     		pop	{r7, pc}
 1927              	.L111:
 1928              		.align	2
 1929              	.L110:
 1930 0b4c 00240140 		.word	1073816576
 1931 0b50 00280140 		.word	1073817600
 1932 0b54 003C0140 		.word	1073822720
 1933 0b58 00000000 		.word	.LC0
 1934              		.cfi_endproc
 1935              	.LFE44:
 1937              		.align	2
 1938              		.global	ADC_GetConversionValue
 1939              		.thumb
 1940              		.thumb_func
 1942              	ADC_GetConversionValue:
 1943              	.LFB45:
 702:../SPL/src/stm32f10x_adc.c **** 
 703:../SPL/src/stm32f10x_adc.c **** /**
 704:../SPL/src/stm32f10x_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 705:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 706:../SPL/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 707:../SPL/src/stm32f10x_adc.c ****   */
 708:../SPL/src/stm32f10x_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 709:../SPL/src/stm32f10x_adc.c **** {
 1944              		.loc 1 709 0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 8
 1947              		@ frame_needed = 1, uses_anonymous_args = 0
 1948 0b5c 80B5     		push	{r7, lr}
 1949              	.LCFI48:
 1950              		.cfi_def_cfa_offset 8
 1951              		.cfi_offset 7, -8
 1952              		.cfi_offset 14, -4
 1953 0b5e 82B0     		sub	sp, sp, #8
 1954              	.LCFI49:
 1955              		.cfi_def_cfa_offset 16
 1956 0b60 00AF     		add	r7, sp, #0
 1957              	.LCFI50:
 1958              		.cfi_def_cfa_register 7
 1959 0b62 7860     		str	r0, [r7, #4]
 710:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 711:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1960              		.loc 1 711 0
 1961 0b64 7A68     		ldr	r2, [r7, #4]
 1962 0b66 0C4B     		ldr	r3, .L115
 1963 0b68 9A42     		cmp	r2, r3
 1964 0b6a 0CD0     		beq	.L113
 1965              		.loc 1 711 0 is_stmt 0 discriminator 1
 1966 0b6c 7A68     		ldr	r2, [r7, #4]
 1967 0b6e 0B4B     		ldr	r3, .L115+4
 1968 0b70 9A42     		cmp	r2, r3
 1969 0b72 08D0     		beq	.L113
 1970              		.loc 1 711 0 discriminator 2
 1971 0b74 7A68     		ldr	r2, [r7, #4]
 1972 0b76 0A4B     		ldr	r3, .L115+8
 1973 0b78 9A42     		cmp	r2, r3
 1974 0b7a 04D0     		beq	.L113
 1975              		.loc 1 711 0 discriminator 3
 1976 0b7c 0948     		ldr	r0, .L115+12
 1977 0b7e 40F2C721 		movw	r1, #711
 1978 0b82 FFF7FEFF 		bl	assert_failed
 1979              	.L113:
 712:../SPL/src/stm32f10x_adc.c ****   /* Return the selected ADC conversion value */
 713:../SPL/src/stm32f10x_adc.c ****   return (uint16_t) ADCx->DR;
 1980              		.loc 1 713 0 is_stmt 1
 1981 0b86 7B68     		ldr	r3, [r7, #4]
 1982 0b88 DB6C     		ldr	r3, [r3, #76]
 1983 0b8a 9BB2     		uxth	r3, r3
 714:../SPL/src/stm32f10x_adc.c **** }
 1984              		.loc 1 714 0
 1985 0b8c 1846     		mov	r0, r3
 1986 0b8e 07F10807 		add	r7, r7, #8
 1987 0b92 BD46     		mov	sp, r7
 1988 0b94 80BD     		pop	{r7, pc}
 1989              	.L116:
 1990 0b96 00BF     		.align	2
 1991              	.L115:
 1992 0b98 00240140 		.word	1073816576
 1993 0b9c 00280140 		.word	1073817600
 1994 0ba0 003C0140 		.word	1073822720
 1995 0ba4 00000000 		.word	.LC0
 1996              		.cfi_endproc
 1997              	.LFE45:
 1999              		.align	2
 2000              		.global	ADC_GetDualModeConversionValue
 2001              		.thumb
 2002              		.thumb_func
 2004              	ADC_GetDualModeConversionValue:
 2005              	.LFB46:
 715:../SPL/src/stm32f10x_adc.c **** 
 716:../SPL/src/stm32f10x_adc.c **** /**
 717:../SPL/src/stm32f10x_adc.c ****   * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
 718:../SPL/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 719:../SPL/src/stm32f10x_adc.c ****   */
 720:../SPL/src/stm32f10x_adc.c **** uint32_t ADC_GetDualModeConversionValue(void)
 721:../SPL/src/stm32f10x_adc.c **** {
 2006              		.loc 1 721 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 0
 2009              		@ frame_needed = 1, uses_anonymous_args = 0
 2010              		@ link register save eliminated.
 2011 0ba8 80B4     		push	{r7}
 2012              	.LCFI51:
 2013              		.cfi_def_cfa_offset 4
 2014              		.cfi_offset 7, -4
 2015 0baa 00AF     		add	r7, sp, #0
 2016              	.LCFI52:
 2017              		.cfi_def_cfa_register 7
 722:../SPL/src/stm32f10x_adc.c ****   /* Return the dual mode conversion value */
 723:../SPL/src/stm32f10x_adc.c ****   return (*(__IO uint32_t *) DR_ADDRESS);
 2018              		.loc 1 723 0
 2019 0bac 024B     		ldr	r3, .L119
 2020 0bae 1B68     		ldr	r3, [r3, #0]
 724:../SPL/src/stm32f10x_adc.c **** }
 2021              		.loc 1 724 0
 2022 0bb0 1846     		mov	r0, r3
 2023 0bb2 BD46     		mov	sp, r7
 2024 0bb4 80BC     		pop	{r7}
 2025 0bb6 7047     		bx	lr
 2026              	.L120:
 2027              		.align	2
 2028              	.L119:
 2029 0bb8 4C240140 		.word	1073816652
 2030              		.cfi_endproc
 2031              	.LFE46:
 2033              		.align	2
 2034              		.global	ADC_AutoInjectedConvCmd
 2035              		.thumb
 2036              		.thumb_func
 2038              	ADC_AutoInjectedConvCmd:
 2039              	.LFB47:
 725:../SPL/src/stm32f10x_adc.c **** 
 726:../SPL/src/stm32f10x_adc.c **** /**
 727:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group
 728:../SPL/src/stm32f10x_adc.c ****   *         conversion after regular one.
 729:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 730:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
 731:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 732:../SPL/src/stm32f10x_adc.c ****   * @retval None
 733:../SPL/src/stm32f10x_adc.c ****   */
 734:../SPL/src/stm32f10x_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 735:../SPL/src/stm32f10x_adc.c **** {
 2040              		.loc 1 735 0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 8
 2043              		@ frame_needed = 1, uses_anonymous_args = 0
 2044 0bbc 80B5     		push	{r7, lr}
 2045              	.LCFI53:
 2046              		.cfi_def_cfa_offset 8
 2047              		.cfi_offset 7, -8
 2048              		.cfi_offset 14, -4
 2049 0bbe 82B0     		sub	sp, sp, #8
 2050              	.LCFI54:
 2051              		.cfi_def_cfa_offset 16
 2052 0bc0 00AF     		add	r7, sp, #0
 2053              	.LCFI55:
 2054              		.cfi_def_cfa_register 7
 2055 0bc2 7860     		str	r0, [r7, #4]
 2056 0bc4 0B46     		mov	r3, r1
 2057 0bc6 FB70     		strb	r3, [r7, #3]
 736:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 737:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2058              		.loc 1 737 0
 2059 0bc8 7A68     		ldr	r2, [r7, #4]
 2060 0bca 174B     		ldr	r3, .L126
 2061 0bcc 9A42     		cmp	r2, r3
 2062 0bce 0CD0     		beq	.L122
 2063              		.loc 1 737 0 is_stmt 0 discriminator 1
 2064 0bd0 7A68     		ldr	r2, [r7, #4]
 2065 0bd2 164B     		ldr	r3, .L126+4
 2066 0bd4 9A42     		cmp	r2, r3
 2067 0bd6 08D0     		beq	.L122
 2068              		.loc 1 737 0 discriminator 2
 2069 0bd8 7A68     		ldr	r2, [r7, #4]
 2070 0bda 154B     		ldr	r3, .L126+8
 2071 0bdc 9A42     		cmp	r2, r3
 2072 0bde 04D0     		beq	.L122
 2073              		.loc 1 737 0 discriminator 3
 2074 0be0 1448     		ldr	r0, .L126+12
 2075 0be2 40F2E121 		movw	r1, #737
 2076 0be6 FFF7FEFF 		bl	assert_failed
 2077              	.L122:
 738:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2078              		.loc 1 738 0 is_stmt 1
 2079 0bea FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2080 0bec 002B     		cmp	r3, #0
 2081 0bee 07D0     		beq	.L123
 2082              		.loc 1 738 0 is_stmt 0 discriminator 1
 2083 0bf0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2084 0bf2 012B     		cmp	r3, #1
 2085 0bf4 04D0     		beq	.L123
 2086              		.loc 1 738 0 discriminator 2
 2087 0bf6 0F48     		ldr	r0, .L126+12
 2088 0bf8 40F2E221 		movw	r1, #738
 2089 0bfc FFF7FEFF 		bl	assert_failed
 2090              	.L123:
 739:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 2091              		.loc 1 739 0 is_stmt 1
 2092 0c00 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2093 0c02 002B     		cmp	r3, #0
 2094 0c04 06D0     		beq	.L124
 740:../SPL/src/stm32f10x_adc.c ****   {
 741:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
 742:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JAUTO_Set;
 2095              		.loc 1 742 0
 2096 0c06 7B68     		ldr	r3, [r7, #4]
 2097 0c08 5B68     		ldr	r3, [r3, #4]
 2098 0c0a 43F48062 		orr	r2, r3, #1024
 2099 0c0e 7B68     		ldr	r3, [r7, #4]
 2100 0c10 5A60     		str	r2, [r3, #4]
 2101 0c12 05E0     		b	.L121
 2102              	.L124:
 743:../SPL/src/stm32f10x_adc.c ****   }
 744:../SPL/src/stm32f10x_adc.c ****   else
 745:../SPL/src/stm32f10x_adc.c ****   {
 746:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
 747:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JAUTO_Reset;
 2103              		.loc 1 747 0
 2104 0c14 7B68     		ldr	r3, [r7, #4]
 2105 0c16 5B68     		ldr	r3, [r3, #4]
 2106 0c18 23F48062 		bic	r2, r3, #1024
 2107 0c1c 7B68     		ldr	r3, [r7, #4]
 2108 0c1e 5A60     		str	r2, [r3, #4]
 2109              	.L121:
 748:../SPL/src/stm32f10x_adc.c ****   }
 749:../SPL/src/stm32f10x_adc.c **** }
 2110              		.loc 1 749 0
 2111 0c20 07F10807 		add	r7, r7, #8
 2112 0c24 BD46     		mov	sp, r7
 2113 0c26 80BD     		pop	{r7, pc}
 2114              	.L127:
 2115              		.align	2
 2116              	.L126:
 2117 0c28 00240140 		.word	1073816576
 2118 0c2c 00280140 		.word	1073817600
 2119 0c30 003C0140 		.word	1073822720
 2120 0c34 00000000 		.word	.LC0
 2121              		.cfi_endproc
 2122              	.LFE47:
 2124              		.align	2
 2125              		.global	ADC_InjectedDiscModeCmd
 2126              		.thumb
 2127              		.thumb_func
 2129              	ADC_InjectedDiscModeCmd:
 2130              	.LFB48:
 750:../SPL/src/stm32f10x_adc.c **** 
 751:../SPL/src/stm32f10x_adc.c **** /**
 752:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group
 753:../SPL/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 754:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 755:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 756:../SPL/src/stm32f10x_adc.c ****   *         on injected group channel.
 757:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 758:../SPL/src/stm32f10x_adc.c ****   * @retval None
 759:../SPL/src/stm32f10x_adc.c ****   */
 760:../SPL/src/stm32f10x_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 761:../SPL/src/stm32f10x_adc.c **** {
 2131              		.loc 1 761 0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 8
 2134              		@ frame_needed = 1, uses_anonymous_args = 0
 2135 0c38 80B5     		push	{r7, lr}
 2136              	.LCFI56:
 2137              		.cfi_def_cfa_offset 8
 2138              		.cfi_offset 7, -8
 2139              		.cfi_offset 14, -4
 2140 0c3a 82B0     		sub	sp, sp, #8
 2141              	.LCFI57:
 2142              		.cfi_def_cfa_offset 16
 2143 0c3c 00AF     		add	r7, sp, #0
 2144              	.LCFI58:
 2145              		.cfi_def_cfa_register 7
 2146 0c3e 7860     		str	r0, [r7, #4]
 2147 0c40 0B46     		mov	r3, r1
 2148 0c42 FB70     		strb	r3, [r7, #3]
 762:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 763:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2149              		.loc 1 763 0
 2150 0c44 7A68     		ldr	r2, [r7, #4]
 2151 0c46 174B     		ldr	r3, .L133
 2152 0c48 9A42     		cmp	r2, r3
 2153 0c4a 0CD0     		beq	.L129
 2154              		.loc 1 763 0 is_stmt 0 discriminator 1
 2155 0c4c 7A68     		ldr	r2, [r7, #4]
 2156 0c4e 164B     		ldr	r3, .L133+4
 2157 0c50 9A42     		cmp	r2, r3
 2158 0c52 08D0     		beq	.L129
 2159              		.loc 1 763 0 discriminator 2
 2160 0c54 7A68     		ldr	r2, [r7, #4]
 2161 0c56 154B     		ldr	r3, .L133+8
 2162 0c58 9A42     		cmp	r2, r3
 2163 0c5a 04D0     		beq	.L129
 2164              		.loc 1 763 0 discriminator 3
 2165 0c5c 1448     		ldr	r0, .L133+12
 2166 0c5e 40F2FB21 		movw	r1, #763
 2167 0c62 FFF7FEFF 		bl	assert_failed
 2168              	.L129:
 764:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2169              		.loc 1 764 0 is_stmt 1
 2170 0c66 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2171 0c68 002B     		cmp	r3, #0
 2172 0c6a 07D0     		beq	.L130
 2173              		.loc 1 764 0 is_stmt 0 discriminator 1
 2174 0c6c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2175 0c6e 012B     		cmp	r3, #1
 2176 0c70 04D0     		beq	.L130
 2177              		.loc 1 764 0 discriminator 2
 2178 0c72 0F48     		ldr	r0, .L133+12
 2179 0c74 4FF43F71 		mov	r1, #764
 2180 0c78 FFF7FEFF 		bl	assert_failed
 2181              	.L130:
 765:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 2182              		.loc 1 765 0 is_stmt 1
 2183 0c7c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2184 0c7e 002B     		cmp	r3, #0
 2185 0c80 06D0     		beq	.L131
 766:../SPL/src/stm32f10x_adc.c ****   {
 767:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
 768:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JDISCEN_Set;
 2186              		.loc 1 768 0
 2187 0c82 7B68     		ldr	r3, [r7, #4]
 2188 0c84 5B68     		ldr	r3, [r3, #4]
 2189 0c86 43F48052 		orr	r2, r3, #4096
 2190 0c8a 7B68     		ldr	r3, [r7, #4]
 2191 0c8c 5A60     		str	r2, [r3, #4]
 2192 0c8e 05E0     		b	.L128
 2193              	.L131:
 769:../SPL/src/stm32f10x_adc.c ****   }
 770:../SPL/src/stm32f10x_adc.c ****   else
 771:../SPL/src/stm32f10x_adc.c ****   {
 772:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
 773:../SPL/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JDISCEN_Reset;
 2194              		.loc 1 773 0
 2195 0c90 7B68     		ldr	r3, [r7, #4]
 2196 0c92 5B68     		ldr	r3, [r3, #4]
 2197 0c94 23F48052 		bic	r2, r3, #4096
 2198 0c98 7B68     		ldr	r3, [r7, #4]
 2199 0c9a 5A60     		str	r2, [r3, #4]
 2200              	.L128:
 774:../SPL/src/stm32f10x_adc.c ****   }
 775:../SPL/src/stm32f10x_adc.c **** }
 2201              		.loc 1 775 0
 2202 0c9c 07F10807 		add	r7, r7, #8
 2203 0ca0 BD46     		mov	sp, r7
 2204 0ca2 80BD     		pop	{r7, pc}
 2205              	.L134:
 2206              		.align	2
 2207              	.L133:
 2208 0ca4 00240140 		.word	1073816576
 2209 0ca8 00280140 		.word	1073817600
 2210 0cac 003C0140 		.word	1073822720
 2211 0cb0 00000000 		.word	.LC0
 2212              		.cfi_endproc
 2213              	.LFE48:
 2215              		.align	2
 2216              		.global	ADC_ExternalTrigInjectedConvConfig
 2217              		.thumb
 2218              		.thumb_func
 2220              	ADC_ExternalTrigInjectedConvConfig:
 2221              	.LFB49:
 776:../SPL/src/stm32f10x_adc.c **** 
 777:../SPL/src/stm32f10x_adc.c **** /**
 778:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
 779:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 780:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion. 
 781:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 782:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected (for ADC1, ADC2 and ADC3
 783:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected (for ADC1, ADC2 and
 784:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected (for ADC1 and ADC2)
 785:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected (for ADC1 and ADC2)
 786:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected (for ADC1 and ADC2)
 787:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected (for ADC1 and ADC2)
 788:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4: External interrupt line 15 or Timer8
 789:../SPL/src/stm32f10x_adc.c ****   *                                                       capture compare4 event selected (for ADC1
 790:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected (for ADC3 only)
 791:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected (for ADC3 only)    
 792:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected (for ADC3 only)
 793:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected (for ADC3 only)         
 794:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected (for ADC3 only)    
 795:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
 796:../SPL/src/stm32f10x_adc.c ****   *                                          by external trigger (for ADC1, ADC2 and ADC3)
 797:../SPL/src/stm32f10x_adc.c ****   * @retval None
 798:../SPL/src/stm32f10x_adc.c ****   */
 799:../SPL/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
 800:../SPL/src/stm32f10x_adc.c **** {
 2222              		.loc 1 800 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 16
 2225              		@ frame_needed = 1, uses_anonymous_args = 0
 2226 0cb4 80B5     		push	{r7, lr}
 2227              	.LCFI59:
 2228              		.cfi_def_cfa_offset 8
 2229              		.cfi_offset 7, -8
 2230              		.cfi_offset 14, -4
 2231 0cb6 84B0     		sub	sp, sp, #16
 2232              	.LCFI60:
 2233              		.cfi_def_cfa_offset 24
 2234 0cb8 00AF     		add	r7, sp, #0
 2235              	.LCFI61:
 2236              		.cfi_def_cfa_register 7
 2237 0cba 7860     		str	r0, [r7, #4]
 2238 0cbc 3960     		str	r1, [r7, #0]
 801:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 2239              		.loc 1 801 0
 2240 0cbe 4FF00003 		mov	r3, #0
 2241 0cc2 FB60     		str	r3, [r7, #12]
 802:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 803:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2242              		.loc 1 803 0
 2243 0cc4 7A68     		ldr	r2, [r7, #4]
 2244 0cc6 2D4B     		ldr	r3, .L138
 2245 0cc8 9A42     		cmp	r2, r3
 2246 0cca 0CD0     		beq	.L136
 2247              		.loc 1 803 0 is_stmt 0 discriminator 1
 2248 0ccc 7A68     		ldr	r2, [r7, #4]
 2249 0cce 2C4B     		ldr	r3, .L138+4
 2250 0cd0 9A42     		cmp	r2, r3
 2251 0cd2 08D0     		beq	.L136
 2252              		.loc 1 803 0 discriminator 2
 2253 0cd4 7A68     		ldr	r2, [r7, #4]
 2254 0cd6 2B4B     		ldr	r3, .L138+8
 2255 0cd8 9A42     		cmp	r2, r3
 2256 0cda 04D0     		beq	.L136
 2257              		.loc 1 803 0 discriminator 3
 2258 0cdc 2A48     		ldr	r0, .L138+12
 2259 0cde 40F22331 		movw	r1, #803
 2260 0ce2 FFF7FEFF 		bl	assert_failed
 2261              	.L136:
 804:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
 2262              		.loc 1 804 0 is_stmt 1
 2263 0ce6 3B68     		ldr	r3, [r7, #0]
 2264 0ce8 002B     		cmp	r3, #0
 2265 0cea 34D0     		beq	.L137
 2266              		.loc 1 804 0 is_stmt 0 discriminator 1
 2267 0cec 3B68     		ldr	r3, [r7, #0]
 2268 0cee B3F5805F 		cmp	r3, #4096
 2269 0cf2 30D0     		beq	.L137
 2270              		.loc 1 804 0 discriminator 2
 2271 0cf4 3B68     		ldr	r3, [r7, #0]
 2272 0cf6 B3F5005F 		cmp	r3, #8192
 2273 0cfa 2CD0     		beq	.L137
 2274              		.loc 1 804 0 discriminator 3
 2275 0cfc 3B68     		ldr	r3, [r7, #0]
 2276 0cfe B3F5405F 		cmp	r3, #12288
 2277 0d02 28D0     		beq	.L137
 2278              		.loc 1 804 0 discriminator 4
 2279 0d04 3B68     		ldr	r3, [r7, #0]
 2280 0d06 B3F5804F 		cmp	r3, #16384
 2281 0d0a 24D0     		beq	.L137
 2282              		.loc 1 804 0 discriminator 5
 2283 0d0c 3B68     		ldr	r3, [r7, #0]
 2284 0d0e B3F5A04F 		cmp	r3, #20480
 2285 0d12 20D0     		beq	.L137
 2286              		.loc 1 804 0 discriminator 6
 2287 0d14 3B68     		ldr	r3, [r7, #0]
 2288 0d16 B3F5C04F 		cmp	r3, #24576
 2289 0d1a 1CD0     		beq	.L137
 2290              		.loc 1 804 0 discriminator 7
 2291 0d1c 3B68     		ldr	r3, [r7, #0]
 2292 0d1e B3F5E04F 		cmp	r3, #28672
 2293 0d22 18D0     		beq	.L137
 2294              		.loc 1 804 0 discriminator 8
 2295 0d24 3B68     		ldr	r3, [r7, #0]
 2296 0d26 B3F5005F 		cmp	r3, #8192
 2297 0d2a 14D0     		beq	.L137
 2298              		.loc 1 804 0 discriminator 9
 2299 0d2c 3B68     		ldr	r3, [r7, #0]
 2300 0d2e B3F5405F 		cmp	r3, #12288
 2301 0d32 10D0     		beq	.L137
 2302              		.loc 1 804 0 discriminator 10
 2303 0d34 3B68     		ldr	r3, [r7, #0]
 2304 0d36 B3F5804F 		cmp	r3, #16384
 2305 0d3a 0CD0     		beq	.L137
 2306              		.loc 1 804 0 discriminator 11
 2307 0d3c 3B68     		ldr	r3, [r7, #0]
 2308 0d3e B3F5A04F 		cmp	r3, #20480
 2309 0d42 08D0     		beq	.L137
 2310              		.loc 1 804 0 discriminator 12
 2311 0d44 3B68     		ldr	r3, [r7, #0]
 2312 0d46 B3F5C04F 		cmp	r3, #24576
 2313 0d4a 04D0     		beq	.L137
 2314              		.loc 1 804 0 discriminator 13
 2315 0d4c 0E48     		ldr	r0, .L138+12
 2316 0d4e 4FF44971 		mov	r1, #804
 2317 0d52 FFF7FEFF 		bl	assert_failed
 2318              	.L137:
 805:../SPL/src/stm32f10x_adc.c ****   /* Get the old register value */
 806:../SPL/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR2;
 2319              		.loc 1 806 0 is_stmt 1
 2320 0d56 7B68     		ldr	r3, [r7, #4]
 2321 0d58 9B68     		ldr	r3, [r3, #8]
 2322 0d5a FB60     		str	r3, [r7, #12]
 807:../SPL/src/stm32f10x_adc.c ****   /* Clear the old external event selection for injected group */
 808:../SPL/src/stm32f10x_adc.c ****   tmpreg &= CR2_JEXTSEL_Reset;
 2323              		.loc 1 808 0
 2324 0d5c FB68     		ldr	r3, [r7, #12]
 2325 0d5e 23F4E043 		bic	r3, r3, #28672
 2326 0d62 FB60     		str	r3, [r7, #12]
 809:../SPL/src/stm32f10x_adc.c ****   /* Set the external event selection for injected group */
 810:../SPL/src/stm32f10x_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 2327              		.loc 1 810 0
 2328 0d64 FA68     		ldr	r2, [r7, #12]
 2329 0d66 3B68     		ldr	r3, [r7, #0]
 2330 0d68 1343     		orrs	r3, r3, r2
 2331 0d6a FB60     		str	r3, [r7, #12]
 811:../SPL/src/stm32f10x_adc.c ****   /* Store the new register value */
 812:../SPL/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg;
 2332              		.loc 1 812 0
 2333 0d6c 7B68     		ldr	r3, [r7, #4]
 2334 0d6e FA68     		ldr	r2, [r7, #12]
 2335 0d70 9A60     		str	r2, [r3, #8]
 813:../SPL/src/stm32f10x_adc.c **** }
 2336              		.loc 1 813 0
 2337 0d72 07F11007 		add	r7, r7, #16
 2338 0d76 BD46     		mov	sp, r7
 2339 0d78 80BD     		pop	{r7, pc}
 2340              	.L139:
 2341 0d7a 00BF     		.align	2
 2342              	.L138:
 2343 0d7c 00240140 		.word	1073816576
 2344 0d80 00280140 		.word	1073817600
 2345 0d84 003C0140 		.word	1073822720
 2346 0d88 00000000 		.word	.LC0
 2347              		.cfi_endproc
 2348              	.LFE49:
 2350              		.align	2
 2351              		.global	ADC_ExternalTrigInjectedConvCmd
 2352              		.thumb
 2353              		.thumb_func
 2355              	ADC_ExternalTrigInjectedConvCmd:
 2356              	.LFB50:
 814:../SPL/src/stm32f10x_adc.c **** 
 815:../SPL/src/stm32f10x_adc.c **** /**
 816:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx injected channels conversion through
 817:../SPL/src/stm32f10x_adc.c ****   *         external trigger
 818:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 819:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of
 820:../SPL/src/stm32f10x_adc.c ****   *         injected conversion.
 821:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 822:../SPL/src/stm32f10x_adc.c ****   * @retval None
 823:../SPL/src/stm32f10x_adc.c ****   */
 824:../SPL/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 825:../SPL/src/stm32f10x_adc.c **** {
 2357              		.loc 1 825 0
 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 8
 2360              		@ frame_needed = 1, uses_anonymous_args = 0
 2361 0d8c 80B5     		push	{r7, lr}
 2362              	.LCFI62:
 2363              		.cfi_def_cfa_offset 8
 2364              		.cfi_offset 7, -8
 2365              		.cfi_offset 14, -4
 2366 0d8e 82B0     		sub	sp, sp, #8
 2367              	.LCFI63:
 2368              		.cfi_def_cfa_offset 16
 2369 0d90 00AF     		add	r7, sp, #0
 2370              	.LCFI64:
 2371              		.cfi_def_cfa_register 7
 2372 0d92 7860     		str	r0, [r7, #4]
 2373 0d94 0B46     		mov	r3, r1
 2374 0d96 FB70     		strb	r3, [r7, #3]
 826:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 827:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2375              		.loc 1 827 0
 2376 0d98 7A68     		ldr	r2, [r7, #4]
 2377 0d9a 174B     		ldr	r3, .L145
 2378 0d9c 9A42     		cmp	r2, r3
 2379 0d9e 0CD0     		beq	.L141
 2380              		.loc 1 827 0 is_stmt 0 discriminator 1
 2381 0da0 7A68     		ldr	r2, [r7, #4]
 2382 0da2 164B     		ldr	r3, .L145+4
 2383 0da4 9A42     		cmp	r2, r3
 2384 0da6 08D0     		beq	.L141
 2385              		.loc 1 827 0 discriminator 2
 2386 0da8 7A68     		ldr	r2, [r7, #4]
 2387 0daa 154B     		ldr	r3, .L145+8
 2388 0dac 9A42     		cmp	r2, r3
 2389 0dae 04D0     		beq	.L141
 2390              		.loc 1 827 0 discriminator 3
 2391 0db0 1448     		ldr	r0, .L145+12
 2392 0db2 40F23B31 		movw	r1, #827
 2393 0db6 FFF7FEFF 		bl	assert_failed
 2394              	.L141:
 828:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2395              		.loc 1 828 0 is_stmt 1
 2396 0dba FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2397 0dbc 002B     		cmp	r3, #0
 2398 0dbe 07D0     		beq	.L142
 2399              		.loc 1 828 0 is_stmt 0 discriminator 1
 2400 0dc0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2401 0dc2 012B     		cmp	r3, #1
 2402 0dc4 04D0     		beq	.L142
 2403              		.loc 1 828 0 discriminator 2
 2404 0dc6 0F48     		ldr	r0, .L145+12
 2405 0dc8 4FF44F71 		mov	r1, #828
 2406 0dcc FFF7FEFF 		bl	assert_failed
 2407              	.L142:
 829:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 2408              		.loc 1 829 0 is_stmt 1
 2409 0dd0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2410 0dd2 002B     		cmp	r3, #0
 2411 0dd4 06D0     		beq	.L143
 830:../SPL/src/stm32f10x_adc.c ****   {
 831:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC external event selection for injected group */
 832:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_Set;
 2412              		.loc 1 832 0
 2413 0dd6 7B68     		ldr	r3, [r7, #4]
 2414 0dd8 9B68     		ldr	r3, [r3, #8]
 2415 0dda 43F40042 		orr	r2, r3, #32768
 2416 0dde 7B68     		ldr	r3, [r7, #4]
 2417 0de0 9A60     		str	r2, [r3, #8]
 2418 0de2 05E0     		b	.L140
 2419              	.L143:
 833:../SPL/src/stm32f10x_adc.c ****   }
 834:../SPL/src/stm32f10x_adc.c ****   else
 835:../SPL/src/stm32f10x_adc.c ****   {
 836:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC external event selection for injected group */
 837:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 2420              		.loc 1 837 0
 2421 0de4 7B68     		ldr	r3, [r7, #4]
 2422 0de6 9B68     		ldr	r3, [r3, #8]
 2423 0de8 23F40042 		bic	r2, r3, #32768
 2424 0dec 7B68     		ldr	r3, [r7, #4]
 2425 0dee 9A60     		str	r2, [r3, #8]
 2426              	.L140:
 838:../SPL/src/stm32f10x_adc.c ****   }
 839:../SPL/src/stm32f10x_adc.c **** }
 2427              		.loc 1 839 0
 2428 0df0 07F10807 		add	r7, r7, #8
 2429 0df4 BD46     		mov	sp, r7
 2430 0df6 80BD     		pop	{r7, pc}
 2431              	.L146:
 2432              		.align	2
 2433              	.L145:
 2434 0df8 00240140 		.word	1073816576
 2435 0dfc 00280140 		.word	1073817600
 2436 0e00 003C0140 		.word	1073822720
 2437 0e04 00000000 		.word	.LC0
 2438              		.cfi_endproc
 2439              	.LFE50:
 2441              		.align	2
 2442              		.global	ADC_SoftwareStartInjectedConvCmd
 2443              		.thumb
 2444              		.thumb_func
 2446              	ADC_SoftwareStartInjectedConvCmd:
 2447              	.LFB51:
 840:../SPL/src/stm32f10x_adc.c **** 
 841:../SPL/src/stm32f10x_adc.c **** /**
 842:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC start of the injected 
 843:../SPL/src/stm32f10x_adc.c ****   *         channels conversion.
 844:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 845:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start injected conversion.
 846:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 847:../SPL/src/stm32f10x_adc.c ****   * @retval None
 848:../SPL/src/stm32f10x_adc.c ****   */
 849:../SPL/src/stm32f10x_adc.c **** void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 850:../SPL/src/stm32f10x_adc.c **** {
 2448              		.loc 1 850 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 8
 2451              		@ frame_needed = 1, uses_anonymous_args = 0
 2452 0e08 80B5     		push	{r7, lr}
 2453              	.LCFI65:
 2454              		.cfi_def_cfa_offset 8
 2455              		.cfi_offset 7, -8
 2456              		.cfi_offset 14, -4
 2457 0e0a 82B0     		sub	sp, sp, #8
 2458              	.LCFI66:
 2459              		.cfi_def_cfa_offset 16
 2460 0e0c 00AF     		add	r7, sp, #0
 2461              	.LCFI67:
 2462              		.cfi_def_cfa_register 7
 2463 0e0e 7860     		str	r0, [r7, #4]
 2464 0e10 0B46     		mov	r3, r1
 2465 0e12 FB70     		strb	r3, [r7, #3]
 851:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 852:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2466              		.loc 1 852 0
 2467 0e14 7A68     		ldr	r2, [r7, #4]
 2468 0e16 174B     		ldr	r3, .L152
 2469 0e18 9A42     		cmp	r2, r3
 2470 0e1a 0CD0     		beq	.L148
 2471              		.loc 1 852 0 is_stmt 0 discriminator 1
 2472 0e1c 7A68     		ldr	r2, [r7, #4]
 2473 0e1e 164B     		ldr	r3, .L152+4
 2474 0e20 9A42     		cmp	r2, r3
 2475 0e22 08D0     		beq	.L148
 2476              		.loc 1 852 0 discriminator 2
 2477 0e24 7A68     		ldr	r2, [r7, #4]
 2478 0e26 154B     		ldr	r3, .L152+8
 2479 0e28 9A42     		cmp	r2, r3
 2480 0e2a 04D0     		beq	.L148
 2481              		.loc 1 852 0 discriminator 3
 2482 0e2c 1448     		ldr	r0, .L152+12
 2483 0e2e 4FF45571 		mov	r1, #852
 2484 0e32 FFF7FEFF 		bl	assert_failed
 2485              	.L148:
 853:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2486              		.loc 1 853 0 is_stmt 1
 2487 0e36 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2488 0e38 002B     		cmp	r3, #0
 2489 0e3a 07D0     		beq	.L149
 2490              		.loc 1 853 0 is_stmt 0 discriminator 1
 2491 0e3c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2492 0e3e 012B     		cmp	r3, #1
 2493 0e40 04D0     		beq	.L149
 2494              		.loc 1 853 0 discriminator 2
 2495 0e42 0F48     		ldr	r0, .L152+12
 2496 0e44 40F25531 		movw	r1, #853
 2497 0e48 FFF7FEFF 		bl	assert_failed
 2498              	.L149:
 854:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 2499              		.loc 1 854 0 is_stmt 1
 2500 0e4c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2501 0e4e 002B     		cmp	r3, #0
 2502 0e50 06D0     		beq	.L150
 855:../SPL/src/stm32f10x_adc.c ****   {
 856:../SPL/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion for injected group on external event and start the select
 857:../SPL/src/stm32f10x_adc.c ****        ADC injected conversion */
 858:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 2503              		.loc 1 858 0
 2504 0e52 7B68     		ldr	r3, [r7, #4]
 2505 0e54 9B68     		ldr	r3, [r3, #8]
 2506 0e56 43F40212 		orr	r2, r3, #2129920
 2507 0e5a 7B68     		ldr	r3, [r7, #4]
 2508 0e5c 9A60     		str	r2, [r3, #8]
 2509 0e5e 05E0     		b	.L147
 2510              	.L150:
 859:../SPL/src/stm32f10x_adc.c ****   }
 860:../SPL/src/stm32f10x_adc.c ****   else
 861:../SPL/src/stm32f10x_adc.c ****   {
 862:../SPL/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event for injected group and stop the select
 863:../SPL/src/stm32f10x_adc.c ****        ADC injected conversion */
 864:../SPL/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 2511              		.loc 1 864 0
 2512 0e60 7B68     		ldr	r3, [r7, #4]
 2513 0e62 9B68     		ldr	r3, [r3, #8]
 2514 0e64 23F40212 		bic	r2, r3, #2129920
 2515 0e68 7B68     		ldr	r3, [r7, #4]
 2516 0e6a 9A60     		str	r2, [r3, #8]
 2517              	.L147:
 865:../SPL/src/stm32f10x_adc.c ****   }
 866:../SPL/src/stm32f10x_adc.c **** }
 2518              		.loc 1 866 0
 2519 0e6c 07F10807 		add	r7, r7, #8
 2520 0e70 BD46     		mov	sp, r7
 2521 0e72 80BD     		pop	{r7, pc}
 2522              	.L153:
 2523              		.align	2
 2524              	.L152:
 2525 0e74 00240140 		.word	1073816576
 2526 0e78 00280140 		.word	1073817600
 2527 0e7c 003C0140 		.word	1073822720
 2528 0e80 00000000 		.word	.LC0
 2529              		.cfi_endproc
 2530              	.LFE51:
 2532              		.align	2
 2533              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 2534              		.thumb
 2535              		.thumb_func
 2537              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 2538              	.LFB52:
 867:../SPL/src/stm32f10x_adc.c **** 
 868:../SPL/src/stm32f10x_adc.c **** /**
 869:../SPL/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
 870:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 871:../SPL/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
 872:../SPL/src/stm32f10x_adc.c ****   */
 873:../SPL/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
 874:../SPL/src/stm32f10x_adc.c **** {
 2539              		.loc 1 874 0
 2540              		.cfi_startproc
 2541              		@ args = 0, pretend = 0, frame = 16
 2542              		@ frame_needed = 1, uses_anonymous_args = 0
 2543 0e84 80B5     		push	{r7, lr}
 2544              	.LCFI68:
 2545              		.cfi_def_cfa_offset 8
 2546              		.cfi_offset 7, -8
 2547              		.cfi_offset 14, -4
 2548 0e86 84B0     		sub	sp, sp, #16
 2549              	.LCFI69:
 2550              		.cfi_def_cfa_offset 24
 2551 0e88 00AF     		add	r7, sp, #0
 2552              	.LCFI70:
 2553              		.cfi_def_cfa_register 7
 2554 0e8a 7860     		str	r0, [r7, #4]
 875:../SPL/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 2555              		.loc 1 875 0
 2556 0e8c 4FF00003 		mov	r3, #0
 2557 0e90 FB73     		strb	r3, [r7, #15]
 876:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 877:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2558              		.loc 1 877 0
 2559 0e92 7A68     		ldr	r2, [r7, #4]
 2560 0e94 114B     		ldr	r3, .L159
 2561 0e96 9A42     		cmp	r2, r3
 2562 0e98 0CD0     		beq	.L155
 2563              		.loc 1 877 0 is_stmt 0 discriminator 1
 2564 0e9a 7A68     		ldr	r2, [r7, #4]
 2565 0e9c 104B     		ldr	r3, .L159+4
 2566 0e9e 9A42     		cmp	r2, r3
 2567 0ea0 08D0     		beq	.L155
 2568              		.loc 1 877 0 discriminator 2
 2569 0ea2 7A68     		ldr	r2, [r7, #4]
 2570 0ea4 0F4B     		ldr	r3, .L159+8
 2571 0ea6 9A42     		cmp	r2, r3
 2572 0ea8 04D0     		beq	.L155
 2573              		.loc 1 877 0 discriminator 3
 2574 0eaa 0F48     		ldr	r0, .L159+12
 2575 0eac 40F26D31 		movw	r1, #877
 2576 0eb0 FFF7FEFF 		bl	assert_failed
 2577              	.L155:
 878:../SPL/src/stm32f10x_adc.c ****   /* Check the status of JSWSTART bit */
 879:../SPL/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 2578              		.loc 1 879 0 is_stmt 1
 2579 0eb4 7B68     		ldr	r3, [r7, #4]
 2580 0eb6 9B68     		ldr	r3, [r3, #8]
 2581 0eb8 03F40013 		and	r3, r3, #2097152
 2582 0ebc 002B     		cmp	r3, #0
 2583 0ebe 03D0     		beq	.L156
 880:../SPL/src/stm32f10x_adc.c ****   {
 881:../SPL/src/stm32f10x_adc.c ****     /* JSWSTART bit is set */
 882:../SPL/src/stm32f10x_adc.c ****     bitstatus = SET;
 2584              		.loc 1 882 0
 2585 0ec0 4FF00103 		mov	r3, #1
 2586 0ec4 FB73     		strb	r3, [r7, #15]
 2587 0ec6 02E0     		b	.L157
 2588              	.L156:
 883:../SPL/src/stm32f10x_adc.c ****   }
 884:../SPL/src/stm32f10x_adc.c ****   else
 885:../SPL/src/stm32f10x_adc.c ****   {
 886:../SPL/src/stm32f10x_adc.c ****     /* JSWSTART bit is reset */
 887:../SPL/src/stm32f10x_adc.c ****     bitstatus = RESET;
 2589              		.loc 1 887 0
 2590 0ec8 4FF00003 		mov	r3, #0
 2591 0ecc FB73     		strb	r3, [r7, #15]
 2592              	.L157:
 888:../SPL/src/stm32f10x_adc.c ****   }
 889:../SPL/src/stm32f10x_adc.c ****   /* Return the JSWSTART bit status */
 890:../SPL/src/stm32f10x_adc.c ****   return  bitstatus;
 2593              		.loc 1 890 0
 2594 0ece FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 891:../SPL/src/stm32f10x_adc.c **** }
 2595              		.loc 1 891 0
 2596 0ed0 1846     		mov	r0, r3
 2597 0ed2 07F11007 		add	r7, r7, #16
 2598 0ed6 BD46     		mov	sp, r7
 2599 0ed8 80BD     		pop	{r7, pc}
 2600              	.L160:
 2601 0eda 00BF     		.align	2
 2602              	.L159:
 2603 0edc 00240140 		.word	1073816576
 2604 0ee0 00280140 		.word	1073817600
 2605 0ee4 003C0140 		.word	1073822720
 2606 0ee8 00000000 		.word	.LC0
 2607              		.cfi_endproc
 2608              	.LFE52:
 2610              		.align	2
 2611              		.global	ADC_InjectedChannelConfig
 2612              		.thumb
 2613              		.thumb_func
 2615              	ADC_InjectedChannelConfig:
 2616              	.LFB53:
 892:../SPL/src/stm32f10x_adc.c **** 
 893:../SPL/src/stm32f10x_adc.c **** /**
 894:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
 895:../SPL/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 896:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 897:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 898:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 899:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 900:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 901:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 902:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 903:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 904:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 905:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 906:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 907:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 908:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 909:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 910:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 911:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 912:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 913:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 914:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 915:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 916:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 917:../SPL/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the injected group sequencer. This parameter must be between 1 and 4.
 918:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 919:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 920:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 921:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 922:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 923:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 924:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 925:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 926:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 927:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 928:../SPL/src/stm32f10x_adc.c ****   * @retval None
 929:../SPL/src/stm32f10x_adc.c ****   */
 930:../SPL/src/stm32f10x_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
 931:../SPL/src/stm32f10x_adc.c **** {
 2617              		.loc 1 931 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 24
 2620              		@ frame_needed = 1, uses_anonymous_args = 0
 2621 0eec 80B5     		push	{r7, lr}
 2622              	.LCFI71:
 2623              		.cfi_def_cfa_offset 8
 2624              		.cfi_offset 7, -8
 2625              		.cfi_offset 14, -4
 2626 0eee 86B0     		sub	sp, sp, #24
 2627              	.LCFI72:
 2628              		.cfi_def_cfa_offset 32
 2629 0ef0 00AF     		add	r7, sp, #0
 2630              	.LCFI73:
 2631              		.cfi_def_cfa_register 7
 2632 0ef2 7860     		str	r0, [r7, #4]
 2633 0ef4 F970     		strb	r1, [r7, #3]
 2634 0ef6 BA70     		strb	r2, [r7, #2]
 2635 0ef8 7B70     		strb	r3, [r7, #1]
 932:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 2636              		.loc 1 932 0
 2637 0efa 4FF00003 		mov	r3, #0
 2638 0efe 7B61     		str	r3, [r7, #20]
 2639 0f00 4FF00003 		mov	r3, #0
 2640 0f04 3B61     		str	r3, [r7, #16]
 2641 0f06 4FF00003 		mov	r3, #0
 2642 0f0a FB60     		str	r3, [r7, #12]
 933:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 934:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2643              		.loc 1 934 0
 2644 0f0c 7A68     		ldr	r2, [r7, #4]
 2645 0f0e 824B     		ldr	r3, .L169
 2646 0f10 9A42     		cmp	r2, r3
 2647 0f12 0CD0     		beq	.L162
 2648              		.loc 1 934 0 is_stmt 0 discriminator 1
 2649 0f14 7A68     		ldr	r2, [r7, #4]
 2650 0f16 814B     		ldr	r3, .L169+4
 2651 0f18 9A42     		cmp	r2, r3
 2652 0f1a 08D0     		beq	.L162
 2653              		.loc 1 934 0 discriminator 2
 2654 0f1c 7A68     		ldr	r2, [r7, #4]
 2655 0f1e 804B     		ldr	r3, .L169+8
 2656 0f20 9A42     		cmp	r2, r3
 2657 0f22 04D0     		beq	.L162
 2658              		.loc 1 934 0 discriminator 3
 2659 0f24 7F48     		ldr	r0, .L169+12
 2660 0f26 40F2A631 		movw	r1, #934
 2661 0f2a FFF7FEFF 		bl	assert_failed
 2662              	.L162:
 935:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 2663              		.loc 1 935 0 is_stmt 1
 2664 0f2e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2665 0f30 002B     		cmp	r3, #0
 2666 0f32 37D0     		beq	.L163
 2667              		.loc 1 935 0 is_stmt 0 discriminator 1
 2668 0f34 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2669 0f36 012B     		cmp	r3, #1
 2670 0f38 34D0     		beq	.L163
 2671              		.loc 1 935 0 discriminator 2
 2672 0f3a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2673 0f3c 022B     		cmp	r3, #2
 2674 0f3e 31D0     		beq	.L163
 2675              		.loc 1 935 0 discriminator 3
 2676 0f40 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2677 0f42 032B     		cmp	r3, #3
 2678 0f44 2ED0     		beq	.L163
 2679              		.loc 1 935 0 discriminator 4
 2680 0f46 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2681 0f48 042B     		cmp	r3, #4
 2682 0f4a 2BD0     		beq	.L163
 2683              		.loc 1 935 0 discriminator 5
 2684 0f4c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2685 0f4e 052B     		cmp	r3, #5
 2686 0f50 28D0     		beq	.L163
 2687              		.loc 1 935 0 discriminator 6
 2688 0f52 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2689 0f54 062B     		cmp	r3, #6
 2690 0f56 25D0     		beq	.L163
 2691              		.loc 1 935 0 discriminator 7
 2692 0f58 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2693 0f5a 072B     		cmp	r3, #7
 2694 0f5c 22D0     		beq	.L163
 2695              		.loc 1 935 0 discriminator 8
 2696 0f5e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2697 0f60 082B     		cmp	r3, #8
 2698 0f62 1FD0     		beq	.L163
 2699              		.loc 1 935 0 discriminator 9
 2700 0f64 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2701 0f66 092B     		cmp	r3, #9
 2702 0f68 1CD0     		beq	.L163
 2703              		.loc 1 935 0 discriminator 10
 2704 0f6a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2705 0f6c 0A2B     		cmp	r3, #10
 2706 0f6e 19D0     		beq	.L163
 2707              		.loc 1 935 0 discriminator 11
 2708 0f70 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2709 0f72 0B2B     		cmp	r3, #11
 2710 0f74 16D0     		beq	.L163
 2711              		.loc 1 935 0 discriminator 12
 2712 0f76 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2713 0f78 0C2B     		cmp	r3, #12
 2714 0f7a 13D0     		beq	.L163
 2715              		.loc 1 935 0 discriminator 13
 2716 0f7c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2717 0f7e 0D2B     		cmp	r3, #13
 2718 0f80 10D0     		beq	.L163
 2719              		.loc 1 935 0 discriminator 14
 2720 0f82 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2721 0f84 0E2B     		cmp	r3, #14
 2722 0f86 0DD0     		beq	.L163
 2723              		.loc 1 935 0 discriminator 15
 2724 0f88 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2725 0f8a 0F2B     		cmp	r3, #15
 2726 0f8c 0AD0     		beq	.L163
 2727              		.loc 1 935 0 discriminator 16
 2728 0f8e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2729 0f90 102B     		cmp	r3, #16
 2730 0f92 07D0     		beq	.L163
 2731              		.loc 1 935 0 discriminator 17
 2732 0f94 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2733 0f96 112B     		cmp	r3, #17
 2734 0f98 04D0     		beq	.L163
 2735              		.loc 1 935 0 discriminator 18
 2736 0f9a 6248     		ldr	r0, .L169+12
 2737 0f9c 40F2A731 		movw	r1, #935
 2738 0fa0 FFF7FEFF 		bl	assert_failed
 2739              	.L163:
 936:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
 2740              		.loc 1 936 0 is_stmt 1
 2741 0fa4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2742 0fa6 002B     		cmp	r3, #0
 2743 0fa8 02D0     		beq	.L164
 2744              		.loc 1 936 0 is_stmt 0 discriminator 2
 2745 0faa BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2746 0fac 042B     		cmp	r3, #4
 2747 0fae 04D9     		bls	.L165
 2748              	.L164:
 2749              		.loc 1 936 0 discriminator 1
 2750 0fb0 5C48     		ldr	r0, .L169+12
 2751 0fb2 4FF46A71 		mov	r1, #936
 2752 0fb6 FFF7FEFF 		bl	assert_failed
 2753              	.L165:
 937:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 2754              		.loc 1 937 0 is_stmt 1
 2755 0fba 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2756 0fbc 002B     		cmp	r3, #0
 2757 0fbe 19D0     		beq	.L166
 2758              		.loc 1 937 0 is_stmt 0 discriminator 1
 2759 0fc0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2760 0fc2 012B     		cmp	r3, #1
 2761 0fc4 16D0     		beq	.L166
 2762              		.loc 1 937 0 discriminator 2
 2763 0fc6 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2764 0fc8 022B     		cmp	r3, #2
 2765 0fca 13D0     		beq	.L166
 2766              		.loc 1 937 0 discriminator 3
 2767 0fcc 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2768 0fce 032B     		cmp	r3, #3
 2769 0fd0 10D0     		beq	.L166
 2770              		.loc 1 937 0 discriminator 4
 2771 0fd2 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2772 0fd4 042B     		cmp	r3, #4
 2773 0fd6 0DD0     		beq	.L166
 2774              		.loc 1 937 0 discriminator 5
 2775 0fd8 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2776 0fda 052B     		cmp	r3, #5
 2777 0fdc 0AD0     		beq	.L166
 2778              		.loc 1 937 0 discriminator 6
 2779 0fde 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2780 0fe0 062B     		cmp	r3, #6
 2781 0fe2 07D0     		beq	.L166
 2782              		.loc 1 937 0 discriminator 7
 2783 0fe4 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2784 0fe6 072B     		cmp	r3, #7
 2785 0fe8 04D0     		beq	.L166
 2786              		.loc 1 937 0 discriminator 8
 2787 0fea 4E48     		ldr	r0, .L169+12
 2788 0fec 40F2A931 		movw	r1, #937
 2789 0ff0 FFF7FEFF 		bl	assert_failed
 2790              	.L166:
 938:../SPL/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 939:../SPL/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 2791              		.loc 1 939 0 is_stmt 1
 2792 0ff4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2793 0ff6 092B     		cmp	r3, #9
 2794 0ff8 27D9     		bls	.L167
 940:../SPL/src/stm32f10x_adc.c ****   {
 941:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 942:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 2795              		.loc 1 942 0
 2796 0ffa 7B68     		ldr	r3, [r7, #4]
 2797 0ffc DB68     		ldr	r3, [r3, #12]
 2798 0ffe 7B61     		str	r3, [r7, #20]
 943:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 944:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 2799              		.loc 1 944 0
 2800 1000 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2801 1002 1346     		mov	r3, r2
 2802 1004 4FEA4303 		lsl	r3, r3, #1
 2803 1008 9B18     		adds	r3, r3, r2
 2804 100a A3F11E03 		sub	r3, r3, #30
 2805 100e 4FF00702 		mov	r2, #7
 2806 1012 02FA03F3 		lsl	r3, r2, r3
 2807 1016 3B61     		str	r3, [r7, #16]
 945:../SPL/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 946:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 2808              		.loc 1 946 0
 2809 1018 3B69     		ldr	r3, [r7, #16]
 2810 101a 6FEA0303 		mvn	r3, r3
 2811 101e 7A69     		ldr	r2, [r7, #20]
 2812 1020 1340     		ands	r3, r3, r2
 2813 1022 7B61     		str	r3, [r7, #20]
 947:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 948:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 2814              		.loc 1 948 0
 2815 1024 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 2816 1026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2817 1028 1346     		mov	r3, r2
 2818 102a 4FEA4303 		lsl	r3, r3, #1
 2819 102e 9B18     		adds	r3, r3, r2
 2820 1030 A3F11E03 		sub	r3, r3, #30
 2821 1034 01FA03F3 		lsl	r3, r1, r3
 2822 1038 3B61     		str	r3, [r7, #16]
 949:../SPL/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 950:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 2823              		.loc 1 950 0
 2824 103a 7A69     		ldr	r2, [r7, #20]
 2825 103c 3B69     		ldr	r3, [r7, #16]
 2826 103e 1343     		orrs	r3, r3, r2
 2827 1040 7B61     		str	r3, [r7, #20]
 951:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 952:../SPL/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 2828              		.loc 1 952 0
 2829 1042 7B68     		ldr	r3, [r7, #4]
 2830 1044 7A69     		ldr	r2, [r7, #20]
 2831 1046 DA60     		str	r2, [r3, #12]
 2832 1048 22E0     		b	.L168
 2833              	.L167:
 953:../SPL/src/stm32f10x_adc.c ****   }
 954:../SPL/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 955:../SPL/src/stm32f10x_adc.c ****   {
 956:../SPL/src/stm32f10x_adc.c ****     /* Get the old register value */
 957:../SPL/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 2834              		.loc 1 957 0
 2835 104a 7B68     		ldr	r3, [r7, #4]
 2836 104c 1B69     		ldr	r3, [r3, #16]
 2837 104e 7B61     		str	r3, [r7, #20]
 958:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 959:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 2838              		.loc 1 959 0
 2839 1050 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2840 1052 1346     		mov	r3, r2
 2841 1054 4FEA4303 		lsl	r3, r3, #1
 2842 1058 9B18     		adds	r3, r3, r2
 2843 105a 4FF00702 		mov	r2, #7
 2844 105e 02FA03F3 		lsl	r3, r2, r3
 2845 1062 3B61     		str	r3, [r7, #16]
 960:../SPL/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 961:../SPL/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 2846              		.loc 1 961 0
 2847 1064 3B69     		ldr	r3, [r7, #16]
 2848 1066 6FEA0303 		mvn	r3, r3
 2849 106a 7A69     		ldr	r2, [r7, #20]
 2850 106c 1340     		ands	r3, r3, r2
 2851 106e 7B61     		str	r3, [r7, #20]
 962:../SPL/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 963:../SPL/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 2852              		.loc 1 963 0
 2853 1070 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 2854 1072 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2855 1074 1346     		mov	r3, r2
 2856 1076 4FEA4303 		lsl	r3, r3, #1
 2857 107a 9B18     		adds	r3, r3, r2
 2858 107c 01FA03F3 		lsl	r3, r1, r3
 2859 1080 3B61     		str	r3, [r7, #16]
 964:../SPL/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 965:../SPL/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 2860              		.loc 1 965 0
 2861 1082 7A69     		ldr	r2, [r7, #20]
 2862 1084 3B69     		ldr	r3, [r7, #16]
 2863 1086 1343     		orrs	r3, r3, r2
 2864 1088 7B61     		str	r3, [r7, #20]
 966:../SPL/src/stm32f10x_adc.c ****     /* Store the new register value */
 967:../SPL/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 2865              		.loc 1 967 0
 2866 108a 7B68     		ldr	r3, [r7, #4]
 2867 108c 7A69     		ldr	r2, [r7, #20]
 2868 108e 1A61     		str	r2, [r3, #16]
 2869              	.L168:
 968:../SPL/src/stm32f10x_adc.c ****   }
 969:../SPL/src/stm32f10x_adc.c ****   /* Rank configuration */
 970:../SPL/src/stm32f10x_adc.c ****   /* Get the old register value */
 971:../SPL/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 2870              		.loc 1 971 0
 2871 1090 7B68     		ldr	r3, [r7, #4]
 2872 1092 9B6B     		ldr	r3, [r3, #56]
 2873 1094 7B61     		str	r3, [r7, #20]
 972:../SPL/src/stm32f10x_adc.c ****   /* Get JL value: Number = JL+1 */
 973:../SPL/src/stm32f10x_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 2874              		.loc 1 973 0
 2875 1096 7B69     		ldr	r3, [r7, #20]
 2876 1098 03F44013 		and	r3, r3, #3145728
 2877 109c 4FEA1353 		lsr	r3, r3, #20
 2878 10a0 FB60     		str	r3, [r7, #12]
 974:../SPL/src/stm32f10x_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
 975:../SPL/src/stm32f10x_adc.c ****   tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 2879              		.loc 1 975 0
 2880 10a2 FB68     		ldr	r3, [r7, #12]
 2881 10a4 DBB2     		uxtb	r3, r3
 2882 10a6 6FEA0303 		mvn	r3, r3
 2883 10aa DAB2     		uxtb	r2, r3
 2884 10ac BB78     		ldrb	r3, [r7, #2]
 2885 10ae D318     		adds	r3, r2, r3
 2886 10b0 DBB2     		uxtb	r3, r3
 2887 10b2 03F10303 		add	r3, r3, #3
 2888 10b6 DBB2     		uxtb	r3, r3
 2889 10b8 1A46     		mov	r2, r3
 2890 10ba 1346     		mov	r3, r2
 2891 10bc 4FEA8303 		lsl	r3, r3, #2
 2892 10c0 9B18     		adds	r3, r3, r2
 2893 10c2 4FF01F02 		mov	r2, #31
 2894 10c6 02FA03F3 		lsl	r3, r2, r3
 2895 10ca 3B61     		str	r3, [r7, #16]
 976:../SPL/src/stm32f10x_adc.c ****   /* Clear the old JSQx bits for the selected rank */
 977:../SPL/src/stm32f10x_adc.c ****   tmpreg1 &= ~tmpreg2;
 2896              		.loc 1 977 0
 2897 10cc 3B69     		ldr	r3, [r7, #16]
 2898 10ce 6FEA0303 		mvn	r3, r3
 2899 10d2 7A69     		ldr	r2, [r7, #20]
 2900 10d4 1340     		ands	r3, r3, r2
 2901 10d6 7B61     		str	r3, [r7, #20]
 978:../SPL/src/stm32f10x_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
 979:../SPL/src/stm32f10x_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 2902              		.loc 1 979 0
 2903 10d8 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 2904 10da FB68     		ldr	r3, [r7, #12]
 2905 10dc DBB2     		uxtb	r3, r3
 2906 10de 6FEA0303 		mvn	r3, r3
 2907 10e2 DAB2     		uxtb	r2, r3
 2908 10e4 BB78     		ldrb	r3, [r7, #2]
 2909 10e6 D318     		adds	r3, r2, r3
 2910 10e8 DBB2     		uxtb	r3, r3
 2911 10ea 03F10303 		add	r3, r3, #3
 2912 10ee DBB2     		uxtb	r3, r3
 2913 10f0 1A46     		mov	r2, r3
 2914 10f2 1346     		mov	r3, r2
 2915 10f4 4FEA8303 		lsl	r3, r3, #2
 2916 10f8 9B18     		adds	r3, r3, r2
 2917 10fa 01FA03F3 		lsl	r3, r1, r3
 2918 10fe 3B61     		str	r3, [r7, #16]
 980:../SPL/src/stm32f10x_adc.c ****   /* Set the JSQx bits for the selected rank */
 981:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2;
 2919              		.loc 1 981 0
 2920 1100 7A69     		ldr	r2, [r7, #20]
 2921 1102 3B69     		ldr	r3, [r7, #16]
 2922 1104 1343     		orrs	r3, r3, r2
 2923 1106 7B61     		str	r3, [r7, #20]
 982:../SPL/src/stm32f10x_adc.c ****   /* Store the new register value */
 983:../SPL/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 2924              		.loc 1 983 0
 2925 1108 7B68     		ldr	r3, [r7, #4]
 2926 110a 7A69     		ldr	r2, [r7, #20]
 2927 110c 9A63     		str	r2, [r3, #56]
 984:../SPL/src/stm32f10x_adc.c **** }
 2928              		.loc 1 984 0
 2929 110e 07F11807 		add	r7, r7, #24
 2930 1112 BD46     		mov	sp, r7
 2931 1114 80BD     		pop	{r7, pc}
 2932              	.L170:
 2933 1116 00BF     		.align	2
 2934              	.L169:
 2935 1118 00240140 		.word	1073816576
 2936 111c 00280140 		.word	1073817600
 2937 1120 003C0140 		.word	1073822720
 2938 1124 00000000 		.word	.LC0
 2939              		.cfi_endproc
 2940              	.LFE53:
 2942              		.align	2
 2943              		.global	ADC_InjectedSequencerLengthConfig
 2944              		.thumb
 2945              		.thumb_func
 2947              	ADC_InjectedSequencerLengthConfig:
 2948              	.LFB54:
 985:../SPL/src/stm32f10x_adc.c **** 
 986:../SPL/src/stm32f10x_adc.c **** /**
 987:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures the sequencer length for injected channels
 988:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 989:../SPL/src/stm32f10x_adc.c ****   * @param  Length: The sequencer length. 
 990:../SPL/src/stm32f10x_adc.c ****   *   This parameter must be a number between 1 to 4.
 991:../SPL/src/stm32f10x_adc.c ****   * @retval None
 992:../SPL/src/stm32f10x_adc.c ****   */
 993:../SPL/src/stm32f10x_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
 994:../SPL/src/stm32f10x_adc.c **** {
 2949              		.loc 1 994 0
 2950              		.cfi_startproc
 2951              		@ args = 0, pretend = 0, frame = 16
 2952              		@ frame_needed = 1, uses_anonymous_args = 0
 2953 1128 80B5     		push	{r7, lr}
 2954              	.LCFI74:
 2955              		.cfi_def_cfa_offset 8
 2956              		.cfi_offset 7, -8
 2957              		.cfi_offset 14, -4
 2958 112a 84B0     		sub	sp, sp, #16
 2959              	.LCFI75:
 2960              		.cfi_def_cfa_offset 24
 2961 112c 00AF     		add	r7, sp, #0
 2962              	.LCFI76:
 2963              		.cfi_def_cfa_register 7
 2964 112e 7860     		str	r0, [r7, #4]
 2965 1130 0B46     		mov	r3, r1
 2966 1132 FB70     		strb	r3, [r7, #3]
 995:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 2967              		.loc 1 995 0
 2968 1134 4FF00003 		mov	r3, #0
 2969 1138 FB60     		str	r3, [r7, #12]
 996:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 2970              		.loc 1 996 0
 2971 113a 4FF00003 		mov	r3, #0
 2972 113e BB60     		str	r3, [r7, #8]
 997:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
 998:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 2973              		.loc 1 998 0
 2974 1140 7A68     		ldr	r2, [r7, #4]
 2975 1142 194B     		ldr	r3, .L175
 2976 1144 9A42     		cmp	r2, r3
 2977 1146 0CD0     		beq	.L172
 2978              		.loc 1 998 0 is_stmt 0 discriminator 1
 2979 1148 7A68     		ldr	r2, [r7, #4]
 2980 114a 184B     		ldr	r3, .L175+4
 2981 114c 9A42     		cmp	r2, r3
 2982 114e 08D0     		beq	.L172
 2983              		.loc 1 998 0 discriminator 2
 2984 1150 7A68     		ldr	r2, [r7, #4]
 2985 1152 174B     		ldr	r3, .L175+8
 2986 1154 9A42     		cmp	r2, r3
 2987 1156 04D0     		beq	.L172
 2988              		.loc 1 998 0 discriminator 3
 2989 1158 1648     		ldr	r0, .L175+12
 2990 115a 40F2E631 		movw	r1, #998
 2991 115e FFF7FEFF 		bl	assert_failed
 2992              	.L172:
 999:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
 2993              		.loc 1 999 0 is_stmt 1
 2994 1162 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2995 1164 002B     		cmp	r3, #0
 2996 1166 02D0     		beq	.L173
 2997              		.loc 1 999 0 is_stmt 0 discriminator 2
 2998 1168 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2999 116a 042B     		cmp	r3, #4
 3000 116c 04D9     		bls	.L174
 3001              	.L173:
 3002              		.loc 1 999 0 discriminator 1
 3003 116e 1148     		ldr	r0, .L175+12
 3004 1170 40F2E731 		movw	r1, #999
 3005 1174 FFF7FEFF 		bl	assert_failed
 3006              	.L174:
1000:../SPL/src/stm32f10x_adc.c ****   
1001:../SPL/src/stm32f10x_adc.c ****   /* Get the old register value */
1002:../SPL/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 3007              		.loc 1 1002 0 is_stmt 1
 3008 1178 7B68     		ldr	r3, [r7, #4]
 3009 117a 9B6B     		ldr	r3, [r3, #56]
 3010 117c FB60     		str	r3, [r7, #12]
1003:../SPL/src/stm32f10x_adc.c ****   /* Clear the old injected sequnence lenght JL bits */
1004:../SPL/src/stm32f10x_adc.c ****   tmpreg1 &= JSQR_JL_Reset;
 3011              		.loc 1 1004 0
 3012 117e FB68     		ldr	r3, [r7, #12]
 3013 1180 23F44013 		bic	r3, r3, #3145728
 3014 1184 FB60     		str	r3, [r7, #12]
1005:../SPL/src/stm32f10x_adc.c ****   /* Set the injected sequnence lenght JL bits */
1006:../SPL/src/stm32f10x_adc.c ****   tmpreg2 = Length - 1; 
 3015              		.loc 1 1006 0
 3016 1186 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3017 1188 03F1FF33 		add	r3, r3, #-1
 3018 118c BB60     		str	r3, [r7, #8]
1007:../SPL/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 3019              		.loc 1 1007 0
 3020 118e BB68     		ldr	r3, [r7, #8]
 3021 1190 4FEA0353 		lsl	r3, r3, #20
 3022 1194 FA68     		ldr	r2, [r7, #12]
 3023 1196 1343     		orrs	r3, r3, r2
 3024 1198 FB60     		str	r3, [r7, #12]
1008:../SPL/src/stm32f10x_adc.c ****   /* Store the new register value */
1009:../SPL/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 3025              		.loc 1 1009 0
 3026 119a 7B68     		ldr	r3, [r7, #4]
 3027 119c FA68     		ldr	r2, [r7, #12]
 3028 119e 9A63     		str	r2, [r3, #56]
1010:../SPL/src/stm32f10x_adc.c **** }
 3029              		.loc 1 1010 0
 3030 11a0 07F11007 		add	r7, r7, #16
 3031 11a4 BD46     		mov	sp, r7
 3032 11a6 80BD     		pop	{r7, pc}
 3033              	.L176:
 3034              		.align	2
 3035              	.L175:
 3036 11a8 00240140 		.word	1073816576
 3037 11ac 00280140 		.word	1073817600
 3038 11b0 003C0140 		.word	1073822720
 3039 11b4 00000000 		.word	.LC0
 3040              		.cfi_endproc
 3041              	.LFE54:
 3043              		.align	2
 3044              		.global	ADC_SetInjectedOffset
 3045              		.thumb
 3046              		.thumb_func
 3048              	ADC_SetInjectedOffset:
 3049              	.LFB55:
1011:../SPL/src/stm32f10x_adc.c **** 
1012:../SPL/src/stm32f10x_adc.c **** /**
1013:../SPL/src/stm32f10x_adc.c ****   * @brief  Set the injected channels conversion value offset
1014:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1015:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1016:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1017:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1018:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1019:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1020:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1021:../SPL/src/stm32f10x_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1022:../SPL/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1023:../SPL/src/stm32f10x_adc.c ****   * @retval None
1024:../SPL/src/stm32f10x_adc.c ****   */
1025:../SPL/src/stm32f10x_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1026:../SPL/src/stm32f10x_adc.c **** {
 3050              		.loc 1 1026 0
 3051              		.cfi_startproc
 3052              		@ args = 0, pretend = 0, frame = 16
 3053              		@ frame_needed = 1, uses_anonymous_args = 0
 3054 11b8 80B5     		push	{r7, lr}
 3055              	.LCFI77:
 3056              		.cfi_def_cfa_offset 8
 3057              		.cfi_offset 7, -8
 3058              		.cfi_offset 14, -4
 3059 11ba 84B0     		sub	sp, sp, #16
 3060              	.LCFI78:
 3061              		.cfi_def_cfa_offset 24
 3062 11bc 00AF     		add	r7, sp, #0
 3063              	.LCFI79:
 3064              		.cfi_def_cfa_register 7
 3065 11be 7860     		str	r0, [r7, #4]
 3066 11c0 1346     		mov	r3, r2
 3067 11c2 0A46     		mov	r2, r1
 3068 11c4 FA70     		strb	r2, [r7, #3]
 3069 11c6 3B80     		strh	r3, [r7, #0]	@ movhi
1027:../SPL/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 3070              		.loc 1 1027 0
 3071 11c8 4FF00003 		mov	r3, #0
 3072 11cc FB60     		str	r3, [r7, #12]
1028:../SPL/src/stm32f10x_adc.c ****   
1029:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1030:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3073              		.loc 1 1030 0
 3074 11ce 7A68     		ldr	r2, [r7, #4]
 3075 11d0 1B4B     		ldr	r3, .L181
 3076 11d2 9A42     		cmp	r2, r3
 3077 11d4 0CD0     		beq	.L178
 3078              		.loc 1 1030 0 is_stmt 0 discriminator 1
 3079 11d6 7A68     		ldr	r2, [r7, #4]
 3080 11d8 1A4B     		ldr	r3, .L181+4
 3081 11da 9A42     		cmp	r2, r3
 3082 11dc 08D0     		beq	.L178
 3083              		.loc 1 1030 0 discriminator 2
 3084 11de 7A68     		ldr	r2, [r7, #4]
 3085 11e0 194B     		ldr	r3, .L181+8
 3086 11e2 9A42     		cmp	r2, r3
 3087 11e4 04D0     		beq	.L178
 3088              		.loc 1 1030 0 discriminator 3
 3089 11e6 1948     		ldr	r0, .L181+12
 3090 11e8 40F20641 		movw	r1, #1030
 3091 11ec FFF7FEFF 		bl	assert_failed
 3092              	.L178:
1031:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
 3093              		.loc 1 1031 0 is_stmt 1
 3094 11f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3095 11f2 142B     		cmp	r3, #20
 3096 11f4 0DD0     		beq	.L179
 3097              		.loc 1 1031 0 is_stmt 0 discriminator 1
 3098 11f6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3099 11f8 182B     		cmp	r3, #24
 3100 11fa 0AD0     		beq	.L179
 3101              		.loc 1 1031 0 discriminator 2
 3102 11fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3103 11fe 1C2B     		cmp	r3, #28
 3104 1200 07D0     		beq	.L179
 3105              		.loc 1 1031 0 discriminator 3
 3106 1202 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3107 1204 202B     		cmp	r3, #32
 3108 1206 04D0     		beq	.L179
 3109              		.loc 1 1031 0 discriminator 4
 3110 1208 1048     		ldr	r0, .L181+12
 3111 120a 40F20741 		movw	r1, #1031
 3112 120e FFF7FEFF 		bl	assert_failed
 3113              	.L179:
1032:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));  
 3114              		.loc 1 1032 0 is_stmt 1
 3115 1212 3A88     		ldrh	r2, [r7, #0]
 3116 1214 40F6FF73 		movw	r3, #4095
 3117 1218 9A42     		cmp	r2, r3
 3118 121a 04D9     		bls	.L180
 3119              		.loc 1 1032 0 is_stmt 0 discriminator 1
 3120 121c 0B48     		ldr	r0, .L181+12
 3121 121e 4FF48161 		mov	r1, #1032
 3122 1222 FFF7FEFF 		bl	assert_failed
 3123              	.L180:
1033:../SPL/src/stm32f10x_adc.c ****   
1034:../SPL/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 3124              		.loc 1 1034 0 is_stmt 1
 3125 1226 7B68     		ldr	r3, [r7, #4]
 3126 1228 FB60     		str	r3, [r7, #12]
1035:../SPL/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel;
 3127              		.loc 1 1035 0
 3128 122a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3129 122c FB68     		ldr	r3, [r7, #12]
 3130 122e D318     		adds	r3, r2, r3
 3131 1230 FB60     		str	r3, [r7, #12]
1036:../SPL/src/stm32f10x_adc.c ****   
1037:../SPL/src/stm32f10x_adc.c ****   /* Set the selected injected channel data offset */
1038:../SPL/src/stm32f10x_adc.c ****   *(__IO uint32_t *) tmp = (uint32_t)Offset;
 3132              		.loc 1 1038 0
 3133 1232 FB68     		ldr	r3, [r7, #12]
 3134 1234 3A88     		ldrh	r2, [r7, #0]
 3135 1236 1A60     		str	r2, [r3, #0]
1039:../SPL/src/stm32f10x_adc.c **** }
 3136              		.loc 1 1039 0
 3137 1238 07F11007 		add	r7, r7, #16
 3138 123c BD46     		mov	sp, r7
 3139 123e 80BD     		pop	{r7, pc}
 3140              	.L182:
 3141              		.align	2
 3142              	.L181:
 3143 1240 00240140 		.word	1073816576
 3144 1244 00280140 		.word	1073817600
 3145 1248 003C0140 		.word	1073822720
 3146 124c 00000000 		.word	.LC0
 3147              		.cfi_endproc
 3148              	.LFE55:
 3150              		.align	2
 3151              		.global	ADC_GetInjectedConversionValue
 3152              		.thumb
 3153              		.thumb_func
 3155              	ADC_GetInjectedConversionValue:
 3156              	.LFB56:
1040:../SPL/src/stm32f10x_adc.c **** 
1041:../SPL/src/stm32f10x_adc.c **** /**
1042:../SPL/src/stm32f10x_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1043:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1045:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1046:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1047:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1048:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1049:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1050:../SPL/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
1051:../SPL/src/stm32f10x_adc.c ****   */
1052:../SPL/src/stm32f10x_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1053:../SPL/src/stm32f10x_adc.c **** {
 3157              		.loc 1 1053 0
 3158              		.cfi_startproc
 3159              		@ args = 0, pretend = 0, frame = 16
 3160              		@ frame_needed = 1, uses_anonymous_args = 0
 3161 1250 80B5     		push	{r7, lr}
 3162              	.LCFI80:
 3163              		.cfi_def_cfa_offset 8
 3164              		.cfi_offset 7, -8
 3165              		.cfi_offset 14, -4
 3166 1252 84B0     		sub	sp, sp, #16
 3167              	.LCFI81:
 3168              		.cfi_def_cfa_offset 24
 3169 1254 00AF     		add	r7, sp, #0
 3170              	.LCFI82:
 3171              		.cfi_def_cfa_register 7
 3172 1256 7860     		str	r0, [r7, #4]
 3173 1258 0B46     		mov	r3, r1
 3174 125a FB70     		strb	r3, [r7, #3]
1054:../SPL/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 3175              		.loc 1 1054 0
 3176 125c 4FF00003 		mov	r3, #0
 3177 1260 FB60     		str	r3, [r7, #12]
1055:../SPL/src/stm32f10x_adc.c ****   
1056:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1057:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3178              		.loc 1 1057 0
 3179 1262 7A68     		ldr	r2, [r7, #4]
 3180 1264 184B     		ldr	r3, .L187
 3181 1266 9A42     		cmp	r2, r3
 3182 1268 0CD0     		beq	.L184
 3183              		.loc 1 1057 0 is_stmt 0 discriminator 1
 3184 126a 7A68     		ldr	r2, [r7, #4]
 3185 126c 174B     		ldr	r3, .L187+4
 3186 126e 9A42     		cmp	r2, r3
 3187 1270 08D0     		beq	.L184
 3188              		.loc 1 1057 0 discriminator 2
 3189 1272 7A68     		ldr	r2, [r7, #4]
 3190 1274 164B     		ldr	r3, .L187+8
 3191 1276 9A42     		cmp	r2, r3
 3192 1278 04D0     		beq	.L184
 3193              		.loc 1 1057 0 discriminator 3
 3194 127a 1648     		ldr	r0, .L187+12
 3195 127c 40F22141 		movw	r1, #1057
 3196 1280 FFF7FEFF 		bl	assert_failed
 3197              	.L184:
1058:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
 3198              		.loc 1 1058 0 is_stmt 1
 3199 1284 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3200 1286 142B     		cmp	r3, #20
 3201 1288 0DD0     		beq	.L185
 3202              		.loc 1 1058 0 is_stmt 0 discriminator 1
 3203 128a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3204 128c 182B     		cmp	r3, #24
 3205 128e 0AD0     		beq	.L185
 3206              		.loc 1 1058 0 discriminator 2
 3207 1290 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3208 1292 1C2B     		cmp	r3, #28
 3209 1294 07D0     		beq	.L185
 3210              		.loc 1 1058 0 discriminator 3
 3211 1296 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3212 1298 202B     		cmp	r3, #32
 3213 129a 04D0     		beq	.L185
 3214              		.loc 1 1058 0 discriminator 4
 3215 129c 0D48     		ldr	r0, .L187+12
 3216 129e 40F22241 		movw	r1, #1058
 3217 12a2 FFF7FEFF 		bl	assert_failed
 3218              	.L185:
1059:../SPL/src/stm32f10x_adc.c **** 
1060:../SPL/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 3219              		.loc 1 1060 0 is_stmt 1
 3220 12a6 7B68     		ldr	r3, [r7, #4]
 3221 12a8 FB60     		str	r3, [r7, #12]
1061:../SPL/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel + JDR_Offset;
 3222              		.loc 1 1061 0
 3223 12aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3224 12ac FB68     		ldr	r3, [r7, #12]
 3225 12ae D318     		adds	r3, r2, r3
 3226 12b0 03F12803 		add	r3, r3, #40
 3227 12b4 FB60     		str	r3, [r7, #12]
1062:../SPL/src/stm32f10x_adc.c ****   
1063:../SPL/src/stm32f10x_adc.c ****   /* Returns the selected injected channel conversion data value */
1064:../SPL/src/stm32f10x_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp);   
 3228              		.loc 1 1064 0
 3229 12b6 FB68     		ldr	r3, [r7, #12]
 3230 12b8 1B68     		ldr	r3, [r3, #0]
 3231 12ba 9BB2     		uxth	r3, r3
1065:../SPL/src/stm32f10x_adc.c **** }
 3232              		.loc 1 1065 0
 3233 12bc 1846     		mov	r0, r3
 3234 12be 07F11007 		add	r7, r7, #16
 3235 12c2 BD46     		mov	sp, r7
 3236 12c4 80BD     		pop	{r7, pc}
 3237              	.L188:
 3238 12c6 00BF     		.align	2
 3239              	.L187:
 3240 12c8 00240140 		.word	1073816576
 3241 12cc 00280140 		.word	1073817600
 3242 12d0 003C0140 		.word	1073822720
 3243 12d4 00000000 		.word	.LC0
 3244              		.cfi_endproc
 3245              	.LFE56:
 3247              		.align	2
 3248              		.global	ADC_AnalogWatchdogCmd
 3249              		.thumb
 3250              		.thumb_func
 3252              	ADC_AnalogWatchdogCmd:
 3253              	.LFB57:
1066:../SPL/src/stm32f10x_adc.c **** 
1067:../SPL/src/stm32f10x_adc.c **** /**
1068:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular
1069:../SPL/src/stm32f10x_adc.c ****   *         or injected channels
1070:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1071:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
1072:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1073:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
1074:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel
1075:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or inje
1076:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on  all regular channel
1077:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on  all injected channel
1078:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected c
1079:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
1080:../SPL/src/stm32f10x_adc.c ****   * @retval None	  
1081:../SPL/src/stm32f10x_adc.c ****   */
1082:../SPL/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
1083:../SPL/src/stm32f10x_adc.c **** {
 3254              		.loc 1 1083 0
 3255              		.cfi_startproc
 3256              		@ args = 0, pretend = 0, frame = 16
 3257              		@ frame_needed = 1, uses_anonymous_args = 0
 3258 12d8 80B5     		push	{r7, lr}
 3259              	.LCFI83:
 3260              		.cfi_def_cfa_offset 8
 3261              		.cfi_offset 7, -8
 3262              		.cfi_offset 14, -4
 3263 12da 84B0     		sub	sp, sp, #16
 3264              	.LCFI84:
 3265              		.cfi_def_cfa_offset 24
 3266 12dc 00AF     		add	r7, sp, #0
 3267              	.LCFI85:
 3268              		.cfi_def_cfa_register 7
 3269 12de 7860     		str	r0, [r7, #4]
 3270 12e0 3960     		str	r1, [r7, #0]
1084:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 3271              		.loc 1 1084 0
 3272 12e2 4FF00003 		mov	r3, #0
 3273 12e6 FB60     		str	r3, [r7, #12]
1085:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1086:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3274              		.loc 1 1086 0
 3275 12e8 7A68     		ldr	r2, [r7, #4]
 3276 12ea 224B     		ldr	r3, .L192
 3277 12ec 9A42     		cmp	r2, r3
 3278 12ee 0CD0     		beq	.L190
 3279              		.loc 1 1086 0 is_stmt 0 discriminator 1
 3280 12f0 7A68     		ldr	r2, [r7, #4]
 3281 12f2 214B     		ldr	r3, .L192+4
 3282 12f4 9A42     		cmp	r2, r3
 3283 12f6 08D0     		beq	.L190
 3284              		.loc 1 1086 0 discriminator 2
 3285 12f8 7A68     		ldr	r2, [r7, #4]
 3286 12fa 204B     		ldr	r3, .L192+8
 3287 12fc 9A42     		cmp	r2, r3
 3288 12fe 04D0     		beq	.L190
 3289              		.loc 1 1086 0 discriminator 3
 3290 1300 1F48     		ldr	r0, .L192+12
 3291 1302 40F23E41 		movw	r1, #1086
 3292 1306 FFF7FEFF 		bl	assert_failed
 3293              	.L190:
1087:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 3294              		.loc 1 1087 0 is_stmt 1
 3295 130a 3A68     		ldr	r2, [r7, #0]
 3296 130c 1D4B     		ldr	r3, .L192+16
 3297 130e 9A42     		cmp	r2, r3
 3298 1310 1BD0     		beq	.L191
 3299              		.loc 1 1087 0 is_stmt 0 discriminator 1
 3300 1312 3A68     		ldr	r2, [r7, #0]
 3301 1314 1C4B     		ldr	r3, .L192+20
 3302 1316 9A42     		cmp	r2, r3
 3303 1318 17D0     		beq	.L191
 3304              		.loc 1 1087 0 discriminator 2
 3305 131a 3A68     		ldr	r2, [r7, #0]
 3306 131c 1B4B     		ldr	r3, .L192+24
 3307 131e 9A42     		cmp	r2, r3
 3308 1320 13D0     		beq	.L191
 3309              		.loc 1 1087 0 discriminator 3
 3310 1322 3B68     		ldr	r3, [r7, #0]
 3311 1324 B3F5000F 		cmp	r3, #8388608
 3312 1328 0FD0     		beq	.L191
 3313              		.loc 1 1087 0 discriminator 4
 3314 132a 3B68     		ldr	r3, [r7, #0]
 3315 132c B3F5800F 		cmp	r3, #4194304
 3316 1330 0BD0     		beq	.L191
 3317              		.loc 1 1087 0 discriminator 5
 3318 1332 3B68     		ldr	r3, [r7, #0]
 3319 1334 B3F5400F 		cmp	r3, #12582912
 3320 1338 07D0     		beq	.L191
 3321              		.loc 1 1087 0 discriminator 6
 3322 133a 3B68     		ldr	r3, [r7, #0]
 3323 133c 002B     		cmp	r3, #0
 3324 133e 04D0     		beq	.L191
 3325              		.loc 1 1087 0 discriminator 7
 3326 1340 0F48     		ldr	r0, .L192+12
 3327 1342 40F23F41 		movw	r1, #1087
 3328 1346 FFF7FEFF 		bl	assert_failed
 3329              	.L191:
1088:../SPL/src/stm32f10x_adc.c ****   /* Get the old register value */
1089:../SPL/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 3330              		.loc 1 1089 0 is_stmt 1
 3331 134a 7B68     		ldr	r3, [r7, #4]
 3332 134c 5B68     		ldr	r3, [r3, #4]
 3333 134e FB60     		str	r3, [r7, #12]
1090:../SPL/src/stm32f10x_adc.c ****   /* Clear AWDEN, AWDENJ and AWDSGL bits */
1091:../SPL/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDMode_Reset;
 3334              		.loc 1 1091 0
 3335 1350 FB68     		ldr	r3, [r7, #12]
 3336 1352 23F44003 		bic	r3, r3, #12582912
 3337 1356 23F40073 		bic	r3, r3, #512
 3338 135a FB60     		str	r3, [r7, #12]
1092:../SPL/src/stm32f10x_adc.c ****   /* Set the analog watchdog enable mode */
1093:../SPL/src/stm32f10x_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 3339              		.loc 1 1093 0
 3340 135c FA68     		ldr	r2, [r7, #12]
 3341 135e 3B68     		ldr	r3, [r7, #0]
 3342 1360 1343     		orrs	r3, r3, r2
 3343 1362 FB60     		str	r3, [r7, #12]
1094:../SPL/src/stm32f10x_adc.c ****   /* Store the new register value */
1095:../SPL/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 3344              		.loc 1 1095 0
 3345 1364 7B68     		ldr	r3, [r7, #4]
 3346 1366 FA68     		ldr	r2, [r7, #12]
 3347 1368 5A60     		str	r2, [r3, #4]
1096:../SPL/src/stm32f10x_adc.c **** }
 3348              		.loc 1 1096 0
 3349 136a 07F11007 		add	r7, r7, #16
 3350 136e BD46     		mov	sp, r7
 3351 1370 80BD     		pop	{r7, pc}
 3352              	.L193:
 3353 1372 00BF     		.align	2
 3354              	.L192:
 3355 1374 00240140 		.word	1073816576
 3356 1378 00280140 		.word	1073817600
 3357 137c 003C0140 		.word	1073822720
 3358 1380 00000000 		.word	.LC0
 3359 1384 00028000 		.word	8389120
 3360 1388 00024000 		.word	4194816
 3361 138c 0002C000 		.word	12583424
 3362              		.cfi_endproc
 3363              	.LFE57:
 3365              		.align	2
 3366              		.global	ADC_AnalogWatchdogThresholdsConfig
 3367              		.thumb
 3368              		.thumb_func
 3370              	ADC_AnalogWatchdogThresholdsConfig:
 3371              	.LFB58:
1097:../SPL/src/stm32f10x_adc.c **** 
1098:../SPL/src/stm32f10x_adc.c **** /**
1099:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
1100:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1101:../SPL/src/stm32f10x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
1102:../SPL/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1103:../SPL/src/stm32f10x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
1104:../SPL/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1105:../SPL/src/stm32f10x_adc.c ****   * @retval None
1106:../SPL/src/stm32f10x_adc.c ****   */
1107:../SPL/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
1108:../SPL/src/stm32f10x_adc.c ****                                         uint16_t LowThreshold)
1109:../SPL/src/stm32f10x_adc.c **** {
 3372              		.loc 1 1109 0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376 1390 80B5     		push	{r7, lr}
 3377              	.LCFI86:
 3378              		.cfi_def_cfa_offset 8
 3379              		.cfi_offset 7, -8
 3380              		.cfi_offset 14, -4
 3381 1392 82B0     		sub	sp, sp, #8
 3382              	.LCFI87:
 3383              		.cfi_def_cfa_offset 16
 3384 1394 00AF     		add	r7, sp, #0
 3385              	.LCFI88:
 3386              		.cfi_def_cfa_register 7
 3387 1396 7860     		str	r0, [r7, #4]
 3388 1398 1346     		mov	r3, r2
 3389 139a 0A46     		mov	r2, r1	@ movhi
 3390 139c 7A80     		strh	r2, [r7, #2]	@ movhi
 3391 139e 3B80     		strh	r3, [r7, #0]	@ movhi
1110:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1111:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3392              		.loc 1 1111 0
 3393 13a0 7A68     		ldr	r2, [r7, #4]
 3394 13a2 174B     		ldr	r3, .L198
 3395 13a4 9A42     		cmp	r2, r3
 3396 13a6 0CD0     		beq	.L195
 3397              		.loc 1 1111 0 is_stmt 0 discriminator 1
 3398 13a8 7A68     		ldr	r2, [r7, #4]
 3399 13aa 164B     		ldr	r3, .L198+4
 3400 13ac 9A42     		cmp	r2, r3
 3401 13ae 08D0     		beq	.L195
 3402              		.loc 1 1111 0 discriminator 2
 3403 13b0 7A68     		ldr	r2, [r7, #4]
 3404 13b2 154B     		ldr	r3, .L198+8
 3405 13b4 9A42     		cmp	r2, r3
 3406 13b6 04D0     		beq	.L195
 3407              		.loc 1 1111 0 discriminator 3
 3408 13b8 1448     		ldr	r0, .L198+12
 3409 13ba 40F25741 		movw	r1, #1111
 3410 13be FFF7FEFF 		bl	assert_failed
 3411              	.L195:
1112:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 3412              		.loc 1 1112 0 is_stmt 1
 3413 13c2 7A88     		ldrh	r2, [r7, #2]
 3414 13c4 40F6FF73 		movw	r3, #4095
 3415 13c8 9A42     		cmp	r2, r3
 3416 13ca 04D9     		bls	.L196
 3417              		.loc 1 1112 0 is_stmt 0 discriminator 1
 3418 13cc 0F48     		ldr	r0, .L198+12
 3419 13ce 4FF48B61 		mov	r1, #1112
 3420 13d2 FFF7FEFF 		bl	assert_failed
 3421              	.L196:
1113:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 3422              		.loc 1 1113 0 is_stmt 1
 3423 13d6 3A88     		ldrh	r2, [r7, #0]
 3424 13d8 40F6FF73 		movw	r3, #4095
 3425 13dc 9A42     		cmp	r2, r3
 3426 13de 04D9     		bls	.L197
 3427              		.loc 1 1113 0 is_stmt 0 discriminator 1
 3428 13e0 0A48     		ldr	r0, .L198+12
 3429 13e2 40F25941 		movw	r1, #1113
 3430 13e6 FFF7FEFF 		bl	assert_failed
 3431              	.L197:
1114:../SPL/src/stm32f10x_adc.c ****   /* Set the ADCx high threshold */
1115:../SPL/src/stm32f10x_adc.c ****   ADCx->HTR = HighThreshold;
 3432              		.loc 1 1115 0 is_stmt 1
 3433 13ea 7A88     		ldrh	r2, [r7, #2]
 3434 13ec 7B68     		ldr	r3, [r7, #4]
 3435 13ee 5A62     		str	r2, [r3, #36]
1116:../SPL/src/stm32f10x_adc.c ****   /* Set the ADCx low threshold */
1117:../SPL/src/stm32f10x_adc.c ****   ADCx->LTR = LowThreshold;
 3436              		.loc 1 1117 0
 3437 13f0 3A88     		ldrh	r2, [r7, #0]
 3438 13f2 7B68     		ldr	r3, [r7, #4]
 3439 13f4 9A62     		str	r2, [r3, #40]
1118:../SPL/src/stm32f10x_adc.c **** }
 3440              		.loc 1 1118 0
 3441 13f6 07F10807 		add	r7, r7, #8
 3442 13fa BD46     		mov	sp, r7
 3443 13fc 80BD     		pop	{r7, pc}
 3444              	.L199:
 3445 13fe 00BF     		.align	2
 3446              	.L198:
 3447 1400 00240140 		.word	1073816576
 3448 1404 00280140 		.word	1073817600
 3449 1408 003C0140 		.word	1073822720
 3450 140c 00000000 		.word	.LC0
 3451              		.cfi_endproc
 3452              	.LFE58:
 3454              		.align	2
 3455              		.global	ADC_AnalogWatchdogSingleChannelConfig
 3456              		.thumb
 3457              		.thumb_func
 3459              	ADC_AnalogWatchdogSingleChannelConfig:
 3460              	.LFB59:
1119:../SPL/src/stm32f10x_adc.c **** 
1120:../SPL/src/stm32f10x_adc.c **** /**
1121:../SPL/src/stm32f10x_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
1122:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1123:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
1124:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1125:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
1126:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1127:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1128:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1129:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1130:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1131:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1132:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1133:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1134:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1135:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1136:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1137:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1138:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1139:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1140:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1141:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1142:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1143:../SPL/src/stm32f10x_adc.c ****   * @retval None
1144:../SPL/src/stm32f10x_adc.c ****   */
1145:../SPL/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
1146:../SPL/src/stm32f10x_adc.c **** {
 3461              		.loc 1 1146 0
 3462              		.cfi_startproc
 3463              		@ args = 0, pretend = 0, frame = 16
 3464              		@ frame_needed = 1, uses_anonymous_args = 0
 3465 1410 80B5     		push	{r7, lr}
 3466              	.LCFI89:
 3467              		.cfi_def_cfa_offset 8
 3468              		.cfi_offset 7, -8
 3469              		.cfi_offset 14, -4
 3470 1412 84B0     		sub	sp, sp, #16
 3471              	.LCFI90:
 3472              		.cfi_def_cfa_offset 24
 3473 1414 00AF     		add	r7, sp, #0
 3474              	.LCFI91:
 3475              		.cfi_def_cfa_register 7
 3476 1416 7860     		str	r0, [r7, #4]
 3477 1418 0B46     		mov	r3, r1
 3478 141a FB70     		strb	r3, [r7, #3]
1147:../SPL/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 3479              		.loc 1 1147 0
 3480 141c 4FF00003 		mov	r3, #0
 3481 1420 FB60     		str	r3, [r7, #12]
1148:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1149:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3482              		.loc 1 1149 0
 3483 1422 7A68     		ldr	r2, [r7, #4]
 3484 1424 2E4B     		ldr	r3, .L203
 3485 1426 9A42     		cmp	r2, r3
 3486 1428 0CD0     		beq	.L201
 3487              		.loc 1 1149 0 is_stmt 0 discriminator 1
 3488 142a 7A68     		ldr	r2, [r7, #4]
 3489 142c 2D4B     		ldr	r3, .L203+4
 3490 142e 9A42     		cmp	r2, r3
 3491 1430 08D0     		beq	.L201
 3492              		.loc 1 1149 0 discriminator 2
 3493 1432 7A68     		ldr	r2, [r7, #4]
 3494 1434 2C4B     		ldr	r3, .L203+8
 3495 1436 9A42     		cmp	r2, r3
 3496 1438 04D0     		beq	.L201
 3497              		.loc 1 1149 0 discriminator 3
 3498 143a 2C48     		ldr	r0, .L203+12
 3499 143c 40F27D41 		movw	r1, #1149
 3500 1440 FFF7FEFF 		bl	assert_failed
 3501              	.L201:
1150:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 3502              		.loc 1 1150 0 is_stmt 1
 3503 1444 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3504 1446 002B     		cmp	r3, #0
 3505 1448 37D0     		beq	.L202
 3506              		.loc 1 1150 0 is_stmt 0 discriminator 1
 3507 144a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3508 144c 012B     		cmp	r3, #1
 3509 144e 34D0     		beq	.L202
 3510              		.loc 1 1150 0 discriminator 2
 3511 1450 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3512 1452 022B     		cmp	r3, #2
 3513 1454 31D0     		beq	.L202
 3514              		.loc 1 1150 0 discriminator 3
 3515 1456 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3516 1458 032B     		cmp	r3, #3
 3517 145a 2ED0     		beq	.L202
 3518              		.loc 1 1150 0 discriminator 4
 3519 145c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3520 145e 042B     		cmp	r3, #4
 3521 1460 2BD0     		beq	.L202
 3522              		.loc 1 1150 0 discriminator 5
 3523 1462 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3524 1464 052B     		cmp	r3, #5
 3525 1466 28D0     		beq	.L202
 3526              		.loc 1 1150 0 discriminator 6
 3527 1468 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3528 146a 062B     		cmp	r3, #6
 3529 146c 25D0     		beq	.L202
 3530              		.loc 1 1150 0 discriminator 7
 3531 146e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3532 1470 072B     		cmp	r3, #7
 3533 1472 22D0     		beq	.L202
 3534              		.loc 1 1150 0 discriminator 8
 3535 1474 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3536 1476 082B     		cmp	r3, #8
 3537 1478 1FD0     		beq	.L202
 3538              		.loc 1 1150 0 discriminator 9
 3539 147a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3540 147c 092B     		cmp	r3, #9
 3541 147e 1CD0     		beq	.L202
 3542              		.loc 1 1150 0 discriminator 10
 3543 1480 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3544 1482 0A2B     		cmp	r3, #10
 3545 1484 19D0     		beq	.L202
 3546              		.loc 1 1150 0 discriminator 11
 3547 1486 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3548 1488 0B2B     		cmp	r3, #11
 3549 148a 16D0     		beq	.L202
 3550              		.loc 1 1150 0 discriminator 12
 3551 148c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3552 148e 0C2B     		cmp	r3, #12
 3553 1490 13D0     		beq	.L202
 3554              		.loc 1 1150 0 discriminator 13
 3555 1492 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3556 1494 0D2B     		cmp	r3, #13
 3557 1496 10D0     		beq	.L202
 3558              		.loc 1 1150 0 discriminator 14
 3559 1498 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3560 149a 0E2B     		cmp	r3, #14
 3561 149c 0DD0     		beq	.L202
 3562              		.loc 1 1150 0 discriminator 15
 3563 149e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3564 14a0 0F2B     		cmp	r3, #15
 3565 14a2 0AD0     		beq	.L202
 3566              		.loc 1 1150 0 discriminator 16
 3567 14a4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3568 14a6 102B     		cmp	r3, #16
 3569 14a8 07D0     		beq	.L202
 3570              		.loc 1 1150 0 discriminator 17
 3571 14aa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3572 14ac 112B     		cmp	r3, #17
 3573 14ae 04D0     		beq	.L202
 3574              		.loc 1 1150 0 discriminator 18
 3575 14b0 0E48     		ldr	r0, .L203+12
 3576 14b2 40F27E41 		movw	r1, #1150
 3577 14b6 FFF7FEFF 		bl	assert_failed
 3578              	.L202:
1151:../SPL/src/stm32f10x_adc.c ****   /* Get the old register value */
1152:../SPL/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 3579              		.loc 1 1152 0 is_stmt 1
 3580 14ba 7B68     		ldr	r3, [r7, #4]
 3581 14bc 5B68     		ldr	r3, [r3, #4]
 3582 14be FB60     		str	r3, [r7, #12]
1153:../SPL/src/stm32f10x_adc.c ****   /* Clear the Analog watchdog channel select bits */
1154:../SPL/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDCH_Reset;
 3583              		.loc 1 1154 0
 3584 14c0 FB68     		ldr	r3, [r7, #12]
 3585 14c2 23F01F03 		bic	r3, r3, #31
 3586 14c6 FB60     		str	r3, [r7, #12]
1155:../SPL/src/stm32f10x_adc.c ****   /* Set the Analog watchdog channel */
1156:../SPL/src/stm32f10x_adc.c ****   tmpreg |= ADC_Channel;
 3587              		.loc 1 1156 0
 3588 14c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3589 14ca FA68     		ldr	r2, [r7, #12]
 3590 14cc 1343     		orrs	r3, r3, r2
 3591 14ce FB60     		str	r3, [r7, #12]
1157:../SPL/src/stm32f10x_adc.c ****   /* Store the new register value */
1158:../SPL/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 3592              		.loc 1 1158 0
 3593 14d0 7B68     		ldr	r3, [r7, #4]
 3594 14d2 FA68     		ldr	r2, [r7, #12]
 3595 14d4 5A60     		str	r2, [r3, #4]
1159:../SPL/src/stm32f10x_adc.c **** }
 3596              		.loc 1 1159 0
 3597 14d6 07F11007 		add	r7, r7, #16
 3598 14da BD46     		mov	sp, r7
 3599 14dc 80BD     		pop	{r7, pc}
 3600              	.L204:
 3601 14de 00BF     		.align	2
 3602              	.L203:
 3603 14e0 00240140 		.word	1073816576
 3604 14e4 00280140 		.word	1073817600
 3605 14e8 003C0140 		.word	1073822720
 3606 14ec 00000000 		.word	.LC0
 3607              		.cfi_endproc
 3608              	.LFE59:
 3610              		.align	2
 3611              		.global	ADC_TempSensorVrefintCmd
 3612              		.thumb
 3613              		.thumb_func
 3615              	ADC_TempSensorVrefintCmd:
 3616              	.LFB60:
1160:../SPL/src/stm32f10x_adc.c **** 
1161:../SPL/src/stm32f10x_adc.c **** /**
1162:../SPL/src/stm32f10x_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channel.
1163:../SPL/src/stm32f10x_adc.c ****   * @param  NewState: new state of the temperature sensor.
1164:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1165:../SPL/src/stm32f10x_adc.c ****   * @retval None
1166:../SPL/src/stm32f10x_adc.c ****   */
1167:../SPL/src/stm32f10x_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)
1168:../SPL/src/stm32f10x_adc.c **** {
 3617              		.loc 1 1168 0
 3618              		.cfi_startproc
 3619              		@ args = 0, pretend = 0, frame = 8
 3620              		@ frame_needed = 1, uses_anonymous_args = 0
 3621 14f0 80B5     		push	{r7, lr}
 3622              	.LCFI92:
 3623              		.cfi_def_cfa_offset 8
 3624              		.cfi_offset 7, -8
 3625              		.cfi_offset 14, -4
 3626 14f2 82B0     		sub	sp, sp, #8
 3627              	.LCFI93:
 3628              		.cfi_def_cfa_offset 16
 3629 14f4 00AF     		add	r7, sp, #0
 3630              	.LCFI94:
 3631              		.cfi_def_cfa_register 7
 3632 14f6 0346     		mov	r3, r0
 3633 14f8 FB71     		strb	r3, [r7, #7]
1169:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1170:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3634              		.loc 1 1170 0
 3635 14fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3636 14fc 002B     		cmp	r3, #0
 3637 14fe 07D0     		beq	.L206
 3638              		.loc 1 1170 0 is_stmt 0 discriminator 1
 3639 1500 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3640 1502 012B     		cmp	r3, #1
 3641 1504 04D0     		beq	.L206
 3642              		.loc 1 1170 0 discriminator 2
 3643 1506 0C48     		ldr	r0, .L209
 3644 1508 40F29241 		movw	r1, #1170
 3645 150c FFF7FEFF 		bl	assert_failed
 3646              	.L206:
1171:../SPL/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 3647              		.loc 1 1171 0 is_stmt 1
 3648 1510 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3649 1512 002B     		cmp	r3, #0
 3650 1514 06D0     		beq	.L207
1172:../SPL/src/stm32f10x_adc.c ****   {
1173:../SPL/src/stm32f10x_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
1174:../SPL/src/stm32f10x_adc.c ****     ADC1->CR2 |= CR2_TSVREFE_Set;
 3651              		.loc 1 1174 0
 3652 1516 094B     		ldr	r3, .L209+4
 3653 1518 084A     		ldr	r2, .L209+4
 3654 151a 9268     		ldr	r2, [r2, #8]
 3655 151c 42F40002 		orr	r2, r2, #8388608
 3656 1520 9A60     		str	r2, [r3, #8]
 3657 1522 05E0     		b	.L205
 3658              	.L207:
1175:../SPL/src/stm32f10x_adc.c ****   }
1176:../SPL/src/stm32f10x_adc.c ****   else
1177:../SPL/src/stm32f10x_adc.c ****   {
1178:../SPL/src/stm32f10x_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
1179:../SPL/src/stm32f10x_adc.c ****     ADC1->CR2 &= CR2_TSVREFE_Reset;
 3659              		.loc 1 1179 0
 3660 1524 054B     		ldr	r3, .L209+4
 3661 1526 054A     		ldr	r2, .L209+4
 3662 1528 9268     		ldr	r2, [r2, #8]
 3663 152a 22F40002 		bic	r2, r2, #8388608
 3664 152e 9A60     		str	r2, [r3, #8]
 3665              	.L205:
1180:../SPL/src/stm32f10x_adc.c ****   }
1181:../SPL/src/stm32f10x_adc.c **** }
 3666              		.loc 1 1181 0
 3667 1530 07F10807 		add	r7, r7, #8
 3668 1534 BD46     		mov	sp, r7
 3669 1536 80BD     		pop	{r7, pc}
 3670              	.L210:
 3671              		.align	2
 3672              	.L209:
 3673 1538 00000000 		.word	.LC0
 3674 153c 00240140 		.word	1073816576
 3675              		.cfi_endproc
 3676              	.LFE60:
 3678              		.align	2
 3679              		.global	ADC_GetFlagStatus
 3680              		.thumb
 3681              		.thumb_func
 3683              	ADC_GetFlagStatus:
 3684              	.LFB61:
1182:../SPL/src/stm32f10x_adc.c **** 
1183:../SPL/src/stm32f10x_adc.c **** /**
1184:../SPL/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1185:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1186:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1187:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1188:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1189:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1190:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1191:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1192:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1193:../SPL/src/stm32f10x_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1194:../SPL/src/stm32f10x_adc.c ****   */
1195:../SPL/src/stm32f10x_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1196:../SPL/src/stm32f10x_adc.c **** {
 3685              		.loc 1 1196 0
 3686              		.cfi_startproc
 3687              		@ args = 0, pretend = 0, frame = 16
 3688              		@ frame_needed = 1, uses_anonymous_args = 0
 3689 1540 80B5     		push	{r7, lr}
 3690              	.LCFI95:
 3691              		.cfi_def_cfa_offset 8
 3692              		.cfi_offset 7, -8
 3693              		.cfi_offset 14, -4
 3694 1542 84B0     		sub	sp, sp, #16
 3695              	.LCFI96:
 3696              		.cfi_def_cfa_offset 24
 3697 1544 00AF     		add	r7, sp, #0
 3698              	.LCFI97:
 3699              		.cfi_def_cfa_register 7
 3700 1546 7860     		str	r0, [r7, #4]
 3701 1548 0B46     		mov	r3, r1
 3702 154a FB70     		strb	r3, [r7, #3]
1197:../SPL/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 3703              		.loc 1 1197 0
 3704 154c 4FF00003 		mov	r3, #0
 3705 1550 FB73     		strb	r3, [r7, #15]
1198:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1199:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3706              		.loc 1 1199 0
 3707 1552 7A68     		ldr	r2, [r7, #4]
 3708 1554 1B4B     		ldr	r3, .L217
 3709 1556 9A42     		cmp	r2, r3
 3710 1558 0CD0     		beq	.L212
 3711              		.loc 1 1199 0 is_stmt 0 discriminator 1
 3712 155a 7A68     		ldr	r2, [r7, #4]
 3713 155c 1A4B     		ldr	r3, .L217+4
 3714 155e 9A42     		cmp	r2, r3
 3715 1560 08D0     		beq	.L212
 3716              		.loc 1 1199 0 discriminator 2
 3717 1562 7A68     		ldr	r2, [r7, #4]
 3718 1564 194B     		ldr	r3, .L217+8
 3719 1566 9A42     		cmp	r2, r3
 3720 1568 04D0     		beq	.L212
 3721              		.loc 1 1199 0 discriminator 3
 3722 156a 1948     		ldr	r0, .L217+12
 3723 156c 40F2AF41 		movw	r1, #1199
 3724 1570 FFF7FEFF 		bl	assert_failed
 3725              	.L212:
1200:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
 3726              		.loc 1 1200 0 is_stmt 1
 3727 1574 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3728 1576 012B     		cmp	r3, #1
 3729 1578 10D0     		beq	.L213
 3730              		.loc 1 1200 0 is_stmt 0 discriminator 1
 3731 157a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3732 157c 022B     		cmp	r3, #2
 3733 157e 0DD0     		beq	.L213
 3734              		.loc 1 1200 0 discriminator 2
 3735 1580 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3736 1582 042B     		cmp	r3, #4
 3737 1584 0AD0     		beq	.L213
 3738              		.loc 1 1200 0 discriminator 3
 3739 1586 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3740 1588 082B     		cmp	r3, #8
 3741 158a 07D0     		beq	.L213
 3742              		.loc 1 1200 0 discriminator 4
 3743 158c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3744 158e 102B     		cmp	r3, #16
 3745 1590 04D0     		beq	.L213
 3746              		.loc 1 1200 0 discriminator 5
 3747 1592 0F48     		ldr	r0, .L217+12
 3748 1594 4FF49661 		mov	r1, #1200
 3749 1598 FFF7FEFF 		bl	assert_failed
 3750              	.L213:
1201:../SPL/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC flag */
1202:../SPL/src/stm32f10x_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 3751              		.loc 1 1202 0 is_stmt 1
 3752 159c 7B68     		ldr	r3, [r7, #4]
 3753 159e 1A68     		ldr	r2, [r3, #0]
 3754 15a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3755 15a2 1340     		ands	r3, r3, r2
 3756 15a4 002B     		cmp	r3, #0
 3757 15a6 03D0     		beq	.L214
1203:../SPL/src/stm32f10x_adc.c ****   {
1204:../SPL/src/stm32f10x_adc.c ****     /* ADC_FLAG is set */
1205:../SPL/src/stm32f10x_adc.c ****     bitstatus = SET;
 3758              		.loc 1 1205 0
 3759 15a8 4FF00103 		mov	r3, #1
 3760 15ac FB73     		strb	r3, [r7, #15]
 3761 15ae 02E0     		b	.L215
 3762              	.L214:
1206:../SPL/src/stm32f10x_adc.c ****   }
1207:../SPL/src/stm32f10x_adc.c ****   else
1208:../SPL/src/stm32f10x_adc.c ****   {
1209:../SPL/src/stm32f10x_adc.c ****     /* ADC_FLAG is reset */
1210:../SPL/src/stm32f10x_adc.c ****     bitstatus = RESET;
 3763              		.loc 1 1210 0
 3764 15b0 4FF00003 		mov	r3, #0
 3765 15b4 FB73     		strb	r3, [r7, #15]
 3766              	.L215:
1211:../SPL/src/stm32f10x_adc.c ****   }
1212:../SPL/src/stm32f10x_adc.c ****   /* Return the ADC_FLAG status */
1213:../SPL/src/stm32f10x_adc.c ****   return  bitstatus;
 3767              		.loc 1 1213 0
 3768 15b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1214:../SPL/src/stm32f10x_adc.c **** }
 3769              		.loc 1 1214 0
 3770 15b8 1846     		mov	r0, r3
 3771 15ba 07F11007 		add	r7, r7, #16
 3772 15be BD46     		mov	sp, r7
 3773 15c0 80BD     		pop	{r7, pc}
 3774              	.L218:
 3775 15c2 00BF     		.align	2
 3776              	.L217:
 3777 15c4 00240140 		.word	1073816576
 3778 15c8 00280140 		.word	1073817600
 3779 15cc 003C0140 		.word	1073822720
 3780 15d0 00000000 		.word	.LC0
 3781              		.cfi_endproc
 3782              	.LFE61:
 3784              		.align	2
 3785              		.global	ADC_ClearFlag
 3786              		.thumb
 3787              		.thumb_func
 3789              	ADC_ClearFlag:
 3790              	.LFB62:
1215:../SPL/src/stm32f10x_adc.c **** 
1216:../SPL/src/stm32f10x_adc.c **** /**
1217:../SPL/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's pending flags.
1218:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1219:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1220:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1221:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1222:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1223:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1224:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1225:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1226:../SPL/src/stm32f10x_adc.c ****   * @retval None
1227:../SPL/src/stm32f10x_adc.c ****   */
1228:../SPL/src/stm32f10x_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1229:../SPL/src/stm32f10x_adc.c **** {
 3791              		.loc 1 1229 0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 8
 3794              		@ frame_needed = 1, uses_anonymous_args = 0
 3795 15d4 80B5     		push	{r7, lr}
 3796              	.LCFI98:
 3797              		.cfi_def_cfa_offset 8
 3798              		.cfi_offset 7, -8
 3799              		.cfi_offset 14, -4
 3800 15d6 82B0     		sub	sp, sp, #8
 3801              	.LCFI99:
 3802              		.cfi_def_cfa_offset 16
 3803 15d8 00AF     		add	r7, sp, #0
 3804              	.LCFI100:
 3805              		.cfi_def_cfa_register 7
 3806 15da 7860     		str	r0, [r7, #4]
 3807 15dc 0B46     		mov	r3, r1
 3808 15de FB70     		strb	r3, [r7, #3]
1230:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1231:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3809              		.loc 1 1231 0
 3810 15e0 7A68     		ldr	r2, [r7, #4]
 3811 15e2 134B     		ldr	r3, .L223
 3812 15e4 9A42     		cmp	r2, r3
 3813 15e6 0CD0     		beq	.L220
 3814              		.loc 1 1231 0 is_stmt 0 discriminator 1
 3815 15e8 7A68     		ldr	r2, [r7, #4]
 3816 15ea 124B     		ldr	r3, .L223+4
 3817 15ec 9A42     		cmp	r2, r3
 3818 15ee 08D0     		beq	.L220
 3819              		.loc 1 1231 0 discriminator 2
 3820 15f0 7A68     		ldr	r2, [r7, #4]
 3821 15f2 114B     		ldr	r3, .L223+8
 3822 15f4 9A42     		cmp	r2, r3
 3823 15f6 04D0     		beq	.L220
 3824              		.loc 1 1231 0 discriminator 3
 3825 15f8 1048     		ldr	r0, .L223+12
 3826 15fa 40F2CF41 		movw	r1, #1231
 3827 15fe FFF7FEFF 		bl	assert_failed
 3828              	.L220:
1232:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
 3829              		.loc 1 1232 0 is_stmt 1
 3830 1602 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3831 1604 03F0E003 		and	r3, r3, #224
 3832 1608 002B     		cmp	r3, #0
 3833 160a 02D1     		bne	.L221
 3834              		.loc 1 1232 0 is_stmt 0 discriminator 2
 3835 160c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3836 160e 002B     		cmp	r3, #0
 3837 1610 04D1     		bne	.L222
 3838              	.L221:
 3839              		.loc 1 1232 0 discriminator 1
 3840 1612 0A48     		ldr	r0, .L223+12
 3841 1614 4FF49A61 		mov	r1, #1232
 3842 1618 FFF7FEFF 		bl	assert_failed
 3843              	.L222:
1233:../SPL/src/stm32f10x_adc.c ****   /* Clear the selected ADC flags */
1234:../SPL/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 3844              		.loc 1 1234 0 is_stmt 1
 3845 161c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3846 161e 6FEA0302 		mvn	r2, r3
 3847 1622 7B68     		ldr	r3, [r7, #4]
 3848 1624 1A60     		str	r2, [r3, #0]
1235:../SPL/src/stm32f10x_adc.c **** }
 3849              		.loc 1 1235 0
 3850 1626 07F10807 		add	r7, r7, #8
 3851 162a BD46     		mov	sp, r7
 3852 162c 80BD     		pop	{r7, pc}
 3853              	.L224:
 3854 162e 00BF     		.align	2
 3855              	.L223:
 3856 1630 00240140 		.word	1073816576
 3857 1634 00280140 		.word	1073817600
 3858 1638 003C0140 		.word	1073822720
 3859 163c 00000000 		.word	.LC0
 3860              		.cfi_endproc
 3861              	.LFE62:
 3863              		.align	2
 3864              		.global	ADC_GetITStatus
 3865              		.thumb
 3866              		.thumb_func
 3868              	ADC_GetITStatus:
 3869              	.LFB63:
1236:../SPL/src/stm32f10x_adc.c **** 
1237:../SPL/src/stm32f10x_adc.c **** /**
1238:../SPL/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1239:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1240:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1241:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1242:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1243:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1244:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1245:../SPL/src/stm32f10x_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1246:../SPL/src/stm32f10x_adc.c ****   */
1247:../SPL/src/stm32f10x_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1248:../SPL/src/stm32f10x_adc.c **** {
 3870              		.loc 1 1248 0
 3871              		.cfi_startproc
 3872              		@ args = 0, pretend = 0, frame = 24
 3873              		@ frame_needed = 1, uses_anonymous_args = 0
 3874 1640 80B5     		push	{r7, lr}
 3875              	.LCFI101:
 3876              		.cfi_def_cfa_offset 8
 3877              		.cfi_offset 7, -8
 3878              		.cfi_offset 14, -4
 3879 1642 86B0     		sub	sp, sp, #24
 3880              	.LCFI102:
 3881              		.cfi_def_cfa_offset 32
 3882 1644 00AF     		add	r7, sp, #0
 3883              	.LCFI103:
 3884              		.cfi_def_cfa_register 7
 3885 1646 7860     		str	r0, [r7, #4]
 3886 1648 0B46     		mov	r3, r1
 3887 164a 7B80     		strh	r3, [r7, #2]	@ movhi
1249:../SPL/src/stm32f10x_adc.c ****   ITStatus bitstatus = RESET;
 3888              		.loc 1 1249 0
 3889 164c 4FF00003 		mov	r3, #0
 3890 1650 FB75     		strb	r3, [r7, #23]
1250:../SPL/src/stm32f10x_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 3891              		.loc 1 1250 0
 3892 1652 4FF00003 		mov	r3, #0
 3893 1656 3B61     		str	r3, [r7, #16]
 3894 1658 4FF00003 		mov	r3, #0
 3895 165c FB60     		str	r3, [r7, #12]
1251:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1252:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 3896              		.loc 1 1252 0
 3897 165e 7A68     		ldr	r2, [r7, #4]
 3898 1660 204B     		ldr	r3, .L231
 3899 1662 9A42     		cmp	r2, r3
 3900 1664 0CD0     		beq	.L226
 3901              		.loc 1 1252 0 is_stmt 0 discriminator 1
 3902 1666 7A68     		ldr	r2, [r7, #4]
 3903 1668 1F4B     		ldr	r3, .L231+4
 3904 166a 9A42     		cmp	r2, r3
 3905 166c 08D0     		beq	.L226
 3906              		.loc 1 1252 0 discriminator 2
 3907 166e 7A68     		ldr	r2, [r7, #4]
 3908 1670 1E4B     		ldr	r3, .L231+8
 3909 1672 9A42     		cmp	r2, r3
 3910 1674 04D0     		beq	.L226
 3911              		.loc 1 1252 0 discriminator 3
 3912 1676 1E48     		ldr	r0, .L231+12
 3913 1678 40F2E441 		movw	r1, #1252
 3914 167c FFF7FEFF 		bl	assert_failed
 3915              	.L226:
1253:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_IT(ADC_IT));
 3916              		.loc 1 1253 0 is_stmt 1
 3917 1680 7B88     		ldrh	r3, [r7, #2]
 3918 1682 B3F5087F 		cmp	r3, #544
 3919 1686 0CD0     		beq	.L227
 3920              		.loc 1 1253 0 is_stmt 0 discriminator 1
 3921 1688 7B88     		ldrh	r3, [r7, #2]
 3922 168a B3F5A07F 		cmp	r3, #320
 3923 168e 08D0     		beq	.L227
 3924              		.loc 1 1253 0 discriminator 2
 3925 1690 7B88     		ldrh	r3, [r7, #2]
 3926 1692 B3F5906F 		cmp	r3, #1152
 3927 1696 04D0     		beq	.L227
 3928              		.loc 1 1253 0 discriminator 3
 3929 1698 1548     		ldr	r0, .L231+12
 3930 169a 40F2E541 		movw	r1, #1253
 3931 169e FFF7FEFF 		bl	assert_failed
 3932              	.L227:
1254:../SPL/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1255:../SPL/src/stm32f10x_adc.c ****   itmask = ADC_IT >> 8;
 3933              		.loc 1 1255 0 is_stmt 1
 3934 16a2 7B88     		ldrh	r3, [r7, #2]
 3935 16a4 4FEA1323 		lsr	r3, r3, #8
 3936 16a8 9BB2     		uxth	r3, r3
 3937 16aa 3B61     		str	r3, [r7, #16]
1256:../SPL/src/stm32f10x_adc.c ****   /* Get the ADC_IT enable bit status */
1257:../SPL/src/stm32f10x_adc.c ****   enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 3938              		.loc 1 1257 0
 3939 16ac 7B68     		ldr	r3, [r7, #4]
 3940 16ae 5A68     		ldr	r2, [r3, #4]
 3941 16b0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3942 16b2 DBB2     		uxtb	r3, r3
 3943 16b4 1340     		ands	r3, r3, r2
 3944 16b6 FB60     		str	r3, [r7, #12]
1258:../SPL/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC interrupt */
1259:../SPL/src/stm32f10x_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 3945              		.loc 1 1259 0
 3946 16b8 7B68     		ldr	r3, [r7, #4]
 3947 16ba 1A68     		ldr	r2, [r3, #0]
 3948 16bc 3B69     		ldr	r3, [r7, #16]
 3949 16be 1340     		ands	r3, r3, r2
 3950 16c0 002B     		cmp	r3, #0
 3951 16c2 06D0     		beq	.L228
 3952              		.loc 1 1259 0 is_stmt 0 discriminator 1
 3953 16c4 FB68     		ldr	r3, [r7, #12]
 3954 16c6 002B     		cmp	r3, #0
 3955 16c8 03D0     		beq	.L228
1260:../SPL/src/stm32f10x_adc.c ****   {
1261:../SPL/src/stm32f10x_adc.c ****     /* ADC_IT is set */
1262:../SPL/src/stm32f10x_adc.c ****     bitstatus = SET;
 3956              		.loc 1 1262 0 is_stmt 1
 3957 16ca 4FF00103 		mov	r3, #1
 3958 16ce FB75     		strb	r3, [r7, #23]
 3959 16d0 02E0     		b	.L229
 3960              	.L228:
1263:../SPL/src/stm32f10x_adc.c ****   }
1264:../SPL/src/stm32f10x_adc.c ****   else
1265:../SPL/src/stm32f10x_adc.c ****   {
1266:../SPL/src/stm32f10x_adc.c ****     /* ADC_IT is reset */
1267:../SPL/src/stm32f10x_adc.c ****     bitstatus = RESET;
 3961              		.loc 1 1267 0
 3962 16d2 4FF00003 		mov	r3, #0
 3963 16d6 FB75     		strb	r3, [r7, #23]
 3964              	.L229:
1268:../SPL/src/stm32f10x_adc.c ****   }
1269:../SPL/src/stm32f10x_adc.c ****   /* Return the ADC_IT status */
1270:../SPL/src/stm32f10x_adc.c ****   return  bitstatus;
 3965              		.loc 1 1270 0
 3966 16d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1271:../SPL/src/stm32f10x_adc.c **** }
 3967              		.loc 1 1271 0
 3968 16da 1846     		mov	r0, r3
 3969 16dc 07F11807 		add	r7, r7, #24
 3970 16e0 BD46     		mov	sp, r7
 3971 16e2 80BD     		pop	{r7, pc}
 3972              	.L232:
 3973              		.align	2
 3974              	.L231:
 3975 16e4 00240140 		.word	1073816576
 3976 16e8 00280140 		.word	1073817600
 3977 16ec 003C0140 		.word	1073822720
 3978 16f0 00000000 		.word	.LC0
 3979              		.cfi_endproc
 3980              	.LFE63:
 3982              		.align	2
 3983              		.global	ADC_ClearITPendingBit
 3984              		.thumb
 3985              		.thumb_func
 3987              	ADC_ClearITPendingBit:
 3988              	.LFB64:
1272:../SPL/src/stm32f10x_adc.c **** 
1273:../SPL/src/stm32f10x_adc.c **** /**
1274:../SPL/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1275:../SPL/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1276:../SPL/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1277:../SPL/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1278:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1279:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1280:../SPL/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1281:../SPL/src/stm32f10x_adc.c ****   * @retval None
1282:../SPL/src/stm32f10x_adc.c ****   */
1283:../SPL/src/stm32f10x_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1284:../SPL/src/stm32f10x_adc.c **** {
 3989              		.loc 1 1284 0
 3990              		.cfi_startproc
 3991              		@ args = 0, pretend = 0, frame = 16
 3992              		@ frame_needed = 1, uses_anonymous_args = 0
 3993 16f4 80B5     		push	{r7, lr}
 3994              	.LCFI104:
 3995              		.cfi_def_cfa_offset 8
 3996              		.cfi_offset 7, -8
 3997              		.cfi_offset 14, -4
 3998 16f6 84B0     		sub	sp, sp, #16
 3999              	.LCFI105:
 4000              		.cfi_def_cfa_offset 24
 4001 16f8 00AF     		add	r7, sp, #0
 4002              	.LCFI106:
 4003              		.cfi_def_cfa_register 7
 4004 16fa 7860     		str	r0, [r7, #4]
 4005 16fc 0B46     		mov	r3, r1
 4006 16fe 7B80     		strh	r3, [r7, #2]	@ movhi
1285:../SPL/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 4007              		.loc 1 1285 0
 4008 1700 4FF00003 		mov	r3, #0
 4009 1704 FB73     		strb	r3, [r7, #15]
1286:../SPL/src/stm32f10x_adc.c ****   /* Check the parameters */
1287:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 4010              		.loc 1 1287 0
 4011 1706 7A68     		ldr	r2, [r7, #4]
 4012 1708 154B     		ldr	r3, .L237
 4013 170a 9A42     		cmp	r2, r3
 4014 170c 0CD0     		beq	.L234
 4015              		.loc 1 1287 0 is_stmt 0 discriminator 1
 4016 170e 7A68     		ldr	r2, [r7, #4]
 4017 1710 144B     		ldr	r3, .L237+4
 4018 1712 9A42     		cmp	r2, r3
 4019 1714 08D0     		beq	.L234
 4020              		.loc 1 1287 0 discriminator 2
 4021 1716 7A68     		ldr	r2, [r7, #4]
 4022 1718 134B     		ldr	r3, .L237+8
 4023 171a 9A42     		cmp	r2, r3
 4024 171c 04D0     		beq	.L234
 4025              		.loc 1 1287 0 discriminator 3
 4026 171e 1348     		ldr	r0, .L237+12
 4027 1720 40F20751 		movw	r1, #1287
 4028 1724 FFF7FEFF 		bl	assert_failed
 4029              	.L234:
1288:../SPL/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
 4030              		.loc 1 1288 0 is_stmt 1
 4031 1728 7A88     		ldrh	r2, [r7, #2]
 4032 172a 4FF61F03 		movw	r3, #63519
 4033 172e 1340     		ands	r3, r3, r2
 4034 1730 002B     		cmp	r3, #0
 4035 1732 02D1     		bne	.L235
 4036              		.loc 1 1288 0 is_stmt 0 discriminator 2
 4037 1734 7B88     		ldrh	r3, [r7, #2]
 4038 1736 002B     		cmp	r3, #0
 4039 1738 04D1     		bne	.L236
 4040              	.L235:
 4041              		.loc 1 1288 0 discriminator 1
 4042 173a 0C48     		ldr	r0, .L237+12
 4043 173c 4FF4A161 		mov	r1, #1288
 4044 1740 FFF7FEFF 		bl	assert_failed
 4045              	.L236:
1289:../SPL/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1290:../SPL/src/stm32f10x_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 4046              		.loc 1 1290 0 is_stmt 1
 4047 1744 7B88     		ldrh	r3, [r7, #2]
 4048 1746 4FEA1323 		lsr	r3, r3, #8
 4049 174a 9BB2     		uxth	r3, r3
 4050 174c FB73     		strb	r3, [r7, #15]
1291:../SPL/src/stm32f10x_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1292:../SPL/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 4051              		.loc 1 1292 0
 4052 174e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4053 1750 6FEA0302 		mvn	r2, r3
 4054 1754 7B68     		ldr	r3, [r7, #4]
 4055 1756 1A60     		str	r2, [r3, #0]
1293:../SPL/src/stm32f10x_adc.c **** }
 4056              		.loc 1 1293 0
 4057 1758 07F11007 		add	r7, r7, #16
 4058 175c BD46     		mov	sp, r7
 4059 175e 80BD     		pop	{r7, pc}
 4060              	.L238:
 4061              		.align	2
 4062              	.L237:
 4063 1760 00240140 		.word	1073816576
 4064 1764 00280140 		.word	1073817600
 4065 1768 003C0140 		.word	1073822720
 4066 176c 00000000 		.word	.LC0
 4067              		.cfi_endproc
 4068              	.LFE64:
 4070              	.Letext0:
 4071              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 4072              		.file 3 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/stm32f10x.h"
 4073              		.file 4 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\SPL\\inc/stm32f10x_adc.h"
 4074              		.file 5 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_adc.c
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:19     .rodata:00000000 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:23     .text:00000000 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:28     .text:00000000 ADC_DeInit
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:118    .text:00000098 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:125    .text:000000a8 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:130    .text:000000a8 ADC_Init
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:450    .text:000002dc $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:458    .text:000002f0 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:463    .text:000002f0 ADC_StructInit
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:518    .text:00000334 ADC_Cmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:597    .text:000003a0 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:604    .text:000003b0 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:609    .text:000003b0 ADC_DMACmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:683    .text:00000414 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:689    .text:00000420 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:694    .text:00000420 ADC_ITConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:800    .text:000004bc $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:807    .text:000004cc $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:812    .text:000004cc ADC_ResetCalibration
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:863    .text:0000050c $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:870    .text:0000051c $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:875    .text:0000051c ADC_GetResetCalibrationStatus
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:941    .text:00000574 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:948    .text:00000584 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:953    .text:00000584 ADC_StartCalibration
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1004   .text:000005c4 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1011   .text:000005d4 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1016   .text:000005d4 ADC_GetCalibrationStatus
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1082   .text:0000062c $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1089   .text:0000063c $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1094   .text:0000063c ADC_SoftwareStartConvCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1173   .text:000006a8 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1180   .text:000006b8 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1185   .text:000006b8 ADC_GetSoftwareStartConvStatus
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1251   .text:00000710 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1258   .text:00000720 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1263   .text:00000720 ADC_DiscModeChannelCountConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1352   .text:000007a0 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1359   .text:000007b0 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1364   .text:000007b0 ADC_DiscModeCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1443   .text:0000081c $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1450   .text:0000082c $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1455   .text:0000082c ADC_RegularChannelConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1796   .text:00000a78 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1802   .text:00000a88 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1851   .text:00000ae0 ADC_ExternalTrigConvCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1930   .text:00000b4c $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1937   .text:00000b5c $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1942   .text:00000b5c ADC_GetConversionValue
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1992   .text:00000b98 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:1999   .text:00000ba8 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2004   .text:00000ba8 ADC_GetDualModeConversionValue
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2029   .text:00000bb8 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2033   .text:00000bbc $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2038   .text:00000bbc ADC_AutoInjectedConvCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2117   .text:00000c28 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2124   .text:00000c38 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2129   .text:00000c38 ADC_InjectedDiscModeCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2208   .text:00000ca4 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2215   .text:00000cb4 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2220   .text:00000cb4 ADC_ExternalTrigInjectedConvConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2343   .text:00000d7c $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2350   .text:00000d8c $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2355   .text:00000d8c ADC_ExternalTrigInjectedConvCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2434   .text:00000df8 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2441   .text:00000e08 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2446   .text:00000e08 ADC_SoftwareStartInjectedConvCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2525   .text:00000e74 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2532   .text:00000e84 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2537   .text:00000e84 ADC_GetSoftwareStartInjectedConvCmdStatus
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2603   .text:00000edc $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2610   .text:00000eec $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2615   .text:00000eec ADC_InjectedChannelConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2935   .text:00001118 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2942   .text:00001128 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:2947   .text:00001128 ADC_InjectedSequencerLengthConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3036   .text:000011a8 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3043   .text:000011b8 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3048   .text:000011b8 ADC_SetInjectedOffset
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3143   .text:00001240 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3150   .text:00001250 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3155   .text:00001250 ADC_GetInjectedConversionValue
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3240   .text:000012c8 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3247   .text:000012d8 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3252   .text:000012d8 ADC_AnalogWatchdogCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3355   .text:00001374 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3365   .text:00001390 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3370   .text:00001390 ADC_AnalogWatchdogThresholdsConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3447   .text:00001400 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3454   .text:00001410 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3459   .text:00001410 ADC_AnalogWatchdogSingleChannelConfig
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3603   .text:000014e0 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3610   .text:000014f0 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3615   .text:000014f0 ADC_TempSensorVrefintCmd
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3673   .text:00001538 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3678   .text:00001540 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3683   .text:00001540 ADC_GetFlagStatus
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3777   .text:000015c4 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3784   .text:000015d4 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3789   .text:000015d4 ADC_ClearFlag
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3856   .text:00001630 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3863   .text:00001640 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3868   .text:00001640 ADC_GetITStatus
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3975   .text:000016e4 $d
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3982   .text:000016f4 $t
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:3987   .text:000016f4 ADC_ClearITPendingBit
C:\Users\PC108\AppData\Local\Temp\ccVkSTYD.s:4063   .text:00001760 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9001f459856fa07d79ce9793bb17c6cd
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_exti.h.56.8b2f216f9ded9d03a9eb42ed6973fc04
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922

UNDEFINED SYMBOLS
assert_failed
RCC_APB2PeriphResetCmd

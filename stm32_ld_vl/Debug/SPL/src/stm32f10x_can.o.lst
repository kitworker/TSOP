   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_can.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC0:
  21 0000 2E2E2F53 		.ascii	"../SPL/src/stm32f10x_can.c\000"
  21      504C2F73 
  21      72632F73 
  21      746D3332 
  21      66313078 
  22 001b 00       		.text
  23              		.align	2
  24              		.global	CAN_DeInit
  25              		.thumb
  26              		.thumb_func
  28              	CAN_DeInit:
  29              	.LFB29:
  30              		.file 1 "../SPL/src/stm32f10x_can.c"
   1:../SPL/src/stm32f10x_can.c **** /**
   2:../SPL/src/stm32f10x_can.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_can.c ****   * @file    stm32f10x_can.c
   4:../SPL/src/stm32f10x_can.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_can.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_can.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_can.c ****   * @brief   This file provides all the CAN firmware functions.
   8:../SPL/src/stm32f10x_can.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_can.c ****   * @attention
  10:../SPL/src/stm32f10x_can.c ****   *
  11:../SPL/src/stm32f10x_can.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_can.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_can.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_can.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_can.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_can.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_can.c ****   *
  18:../SPL/src/stm32f10x_can.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_can.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_can.c ****   */
  21:../SPL/src/stm32f10x_can.c **** 
  22:../SPL/src/stm32f10x_can.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_can.c **** #include "stm32f10x_can.h"
  24:../SPL/src/stm32f10x_can.c **** #include "stm32f10x_rcc.h"
  25:../SPL/src/stm32f10x_can.c **** 
  26:../SPL/src/stm32f10x_can.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../SPL/src/stm32f10x_can.c ****   * @{
  28:../SPL/src/stm32f10x_can.c ****   */
  29:../SPL/src/stm32f10x_can.c **** 
  30:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN 
  31:../SPL/src/stm32f10x_can.c ****   * @brief CAN driver modules
  32:../SPL/src/stm32f10x_can.c ****   * @{
  33:../SPL/src/stm32f10x_can.c ****   */ 
  34:../SPL/src/stm32f10x_can.c **** 
  35:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN_Private_TypesDefinitions
  36:../SPL/src/stm32f10x_can.c ****   * @{
  37:../SPL/src/stm32f10x_can.c ****   */
  38:../SPL/src/stm32f10x_can.c **** 
  39:../SPL/src/stm32f10x_can.c **** /**
  40:../SPL/src/stm32f10x_can.c ****   * @}
  41:../SPL/src/stm32f10x_can.c ****   */
  42:../SPL/src/stm32f10x_can.c **** 
  43:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Defines
  44:../SPL/src/stm32f10x_can.c ****   * @{
  45:../SPL/src/stm32f10x_can.c ****   */
  46:../SPL/src/stm32f10x_can.c **** 
  47:../SPL/src/stm32f10x_can.c **** /* CAN Master Control Register bits */
  48:../SPL/src/stm32f10x_can.c **** 
  49:../SPL/src/stm32f10x_can.c **** #define MCR_DBF      ((uint32_t)0x00010000) /* software master reset */
  50:../SPL/src/stm32f10x_can.c **** 
  51:../SPL/src/stm32f10x_can.c **** /* CAN Mailbox Transmit Request */
  52:../SPL/src/stm32f10x_can.c **** #define TMIDxR_TXRQ  ((uint32_t)0x00000001) /* Transmit mailbox request */
  53:../SPL/src/stm32f10x_can.c **** 
  54:../SPL/src/stm32f10x_can.c **** /* CAN Filter Master Register bits */
  55:../SPL/src/stm32f10x_can.c **** #define FMR_FINIT    ((uint32_t)0x00000001) /* Filter init mode */
  56:../SPL/src/stm32f10x_can.c **** 
  57:../SPL/src/stm32f10x_can.c **** /* Time out for INAK bit */
  58:../SPL/src/stm32f10x_can.c **** #define INAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  59:../SPL/src/stm32f10x_can.c **** /* Time out for SLAK bit */
  60:../SPL/src/stm32f10x_can.c **** #define SLAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  61:../SPL/src/stm32f10x_can.c **** 
  62:../SPL/src/stm32f10x_can.c **** 
  63:../SPL/src/stm32f10x_can.c **** 
  64:../SPL/src/stm32f10x_can.c **** /* Flags in TSR register */
  65:../SPL/src/stm32f10x_can.c **** #define CAN_FLAGS_TSR              ((uint32_t)0x08000000) 
  66:../SPL/src/stm32f10x_can.c **** /* Flags in RF1R register */
  67:../SPL/src/stm32f10x_can.c **** #define CAN_FLAGS_RF1R             ((uint32_t)0x04000000) 
  68:../SPL/src/stm32f10x_can.c **** /* Flags in RF0R register */
  69:../SPL/src/stm32f10x_can.c **** #define CAN_FLAGS_RF0R             ((uint32_t)0x02000000) 
  70:../SPL/src/stm32f10x_can.c **** /* Flags in MSR register */
  71:../SPL/src/stm32f10x_can.c **** #define CAN_FLAGS_MSR              ((uint32_t)0x01000000) 
  72:../SPL/src/stm32f10x_can.c **** /* Flags in ESR register */
  73:../SPL/src/stm32f10x_can.c **** #define CAN_FLAGS_ESR              ((uint32_t)0x00F00000) 
  74:../SPL/src/stm32f10x_can.c **** 
  75:../SPL/src/stm32f10x_can.c **** /* Mailboxes definition */
  76:../SPL/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_0                   ((uint8_t)0x00)
  77:../SPL/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_1                   ((uint8_t)0x01)
  78:../SPL/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_2                   ((uint8_t)0x02) 
  79:../SPL/src/stm32f10x_can.c **** 
  80:../SPL/src/stm32f10x_can.c **** 
  81:../SPL/src/stm32f10x_can.c **** 
  82:../SPL/src/stm32f10x_can.c **** #define CAN_MODE_MASK              ((uint32_t) 0x00000003)
  83:../SPL/src/stm32f10x_can.c **** /**
  84:../SPL/src/stm32f10x_can.c ****   * @}
  85:../SPL/src/stm32f10x_can.c ****   */
  86:../SPL/src/stm32f10x_can.c **** 
  87:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Macros
  88:../SPL/src/stm32f10x_can.c ****   * @{
  89:../SPL/src/stm32f10x_can.c ****   */
  90:../SPL/src/stm32f10x_can.c **** 
  91:../SPL/src/stm32f10x_can.c **** /**
  92:../SPL/src/stm32f10x_can.c ****   * @}
  93:../SPL/src/stm32f10x_can.c ****   */
  94:../SPL/src/stm32f10x_can.c **** 
  95:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Variables
  96:../SPL/src/stm32f10x_can.c ****   * @{
  97:../SPL/src/stm32f10x_can.c ****   */
  98:../SPL/src/stm32f10x_can.c **** 
  99:../SPL/src/stm32f10x_can.c **** /**
 100:../SPL/src/stm32f10x_can.c ****   * @}
 101:../SPL/src/stm32f10x_can.c ****   */
 102:../SPL/src/stm32f10x_can.c **** 
 103:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN_Private_FunctionPrototypes
 104:../SPL/src/stm32f10x_can.c ****   * @{
 105:../SPL/src/stm32f10x_can.c ****   */
 106:../SPL/src/stm32f10x_can.c **** 
 107:../SPL/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 108:../SPL/src/stm32f10x_can.c **** 
 109:../SPL/src/stm32f10x_can.c **** /**
 110:../SPL/src/stm32f10x_can.c ****   * @}
 111:../SPL/src/stm32f10x_can.c ****   */
 112:../SPL/src/stm32f10x_can.c **** 
 113:../SPL/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Functions
 114:../SPL/src/stm32f10x_can.c ****   * @{
 115:../SPL/src/stm32f10x_can.c ****   */
 116:../SPL/src/stm32f10x_can.c **** 
 117:../SPL/src/stm32f10x_can.c **** /**
 118:../SPL/src/stm32f10x_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 119:../SPL/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 120:../SPL/src/stm32f10x_can.c ****   * @retval None.
 121:../SPL/src/stm32f10x_can.c ****   */
 122:../SPL/src/stm32f10x_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 123:../SPL/src/stm32f10x_can.c **** {
  31              		.loc 1 123 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 7860     		str	r0, [r7, #4]
 124:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 125:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
  47              		.loc 1 125 0
  48 0008 7A68     		ldr	r2, [r7, #4]
  49 000a 164B     		ldr	r3, .L5
  50 000c 9A42     		cmp	r2, r3
  51 000e 08D0     		beq	.L2
  52              		.loc 1 125 0 is_stmt 0 discriminator 1
  53 0010 7A68     		ldr	r2, [r7, #4]
  54 0012 154B     		ldr	r3, .L5+4
  55 0014 9A42     		cmp	r2, r3
  56 0016 04D0     		beq	.L2
  57              		.loc 1 125 0 discriminator 2
  58 0018 1448     		ldr	r0, .L5+8
  59 001a 4FF07D01 		mov	r1, #125
  60 001e FFF7FEFF 		bl	assert_failed
  61              	.L2:
 126:../SPL/src/stm32f10x_can.c ****  
 127:../SPL/src/stm32f10x_can.c ****   if (CANx == CAN1)
  62              		.loc 1 127 0 is_stmt 1
  63 0022 7A68     		ldr	r2, [r7, #4]
  64 0024 0F4B     		ldr	r3, .L5
  65 0026 9A42     		cmp	r2, r3
  66 0028 0CD1     		bne	.L3
 128:../SPL/src/stm32f10x_can.c ****   {
 129:../SPL/src/stm32f10x_can.c ****     /* Enable CAN1 reset state */
 130:../SPL/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
  67              		.loc 1 130 0
  68 002a 4FF00070 		mov	r0, #33554432
  69 002e 4FF00101 		mov	r1, #1
  70 0032 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 131:../SPL/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
 132:../SPL/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  71              		.loc 1 132 0
  72 0036 4FF00070 		mov	r0, #33554432
  73 003a 4FF00001 		mov	r1, #0
  74 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  75 0042 0BE0     		b	.L1
  76              	.L3:
 133:../SPL/src/stm32f10x_can.c ****   }
 134:../SPL/src/stm32f10x_can.c ****   else
 135:../SPL/src/stm32f10x_can.c ****   {  
 136:../SPL/src/stm32f10x_can.c ****     /* Enable CAN2 reset state */
 137:../SPL/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
  77              		.loc 1 137 0
  78 0044 4FF08060 		mov	r0, #67108864
  79 0048 4FF00101 		mov	r1, #1
  80 004c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 138:../SPL/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
 139:../SPL/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  81              		.loc 1 139 0
  82 0050 4FF08060 		mov	r0, #67108864
  83 0054 4FF00001 		mov	r1, #0
  84 0058 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85              	.L1:
 140:../SPL/src/stm32f10x_can.c ****   }
 141:../SPL/src/stm32f10x_can.c **** }
  86              		.loc 1 141 0
  87 005c 07F10807 		add	r7, r7, #8
  88 0060 BD46     		mov	sp, r7
  89 0062 80BD     		pop	{r7, pc}
  90              	.L6:
  91              		.align	2
  92              	.L5:
  93 0064 00640040 		.word	1073767424
  94 0068 00680040 		.word	1073768448
  95 006c 00000000 		.word	.LC0
  96              		.cfi_endproc
  97              	.LFE29:
  99              		.align	2
 100              		.global	CAN_Init
 101              		.thumb
 102              		.thumb_func
 104              	CAN_Init:
 105              	.LFB30:
 142:../SPL/src/stm32f10x_can.c **** 
 143:../SPL/src/stm32f10x_can.c **** /**
 144:../SPL/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 145:../SPL/src/stm32f10x_can.c ****   *         parameters in the CAN_InitStruct.
 146:../SPL/src/stm32f10x_can.c ****   * @param  CANx:           where x can be 1 or 2 to to select the CAN 
 147:../SPL/src/stm32f10x_can.c ****   *                         peripheral.
 148:../SPL/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that
 149:../SPL/src/stm32f10x_can.c ****   *                         contains the configuration information for the 
 150:../SPL/src/stm32f10x_can.c ****   *                         CAN peripheral.
 151:../SPL/src/stm32f10x_can.c ****   * @retval Constant indicates initialization succeed which will be 
 152:../SPL/src/stm32f10x_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 153:../SPL/src/stm32f10x_can.c ****   */
 154:../SPL/src/stm32f10x_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 155:../SPL/src/stm32f10x_can.c **** {
 106              		.loc 1 155 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 16
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110 0070 80B5     		push	{r7, lr}
 111              	.LCFI3:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0072 84B0     		sub	sp, sp, #16
 116              	.LCFI4:
 117              		.cfi_def_cfa_offset 24
 118 0074 00AF     		add	r7, sp, #0
 119              	.LCFI5:
 120              		.cfi_def_cfa_register 7
 121 0076 7860     		str	r0, [r7, #4]
 122 0078 3960     		str	r1, [r7, #0]
 156:../SPL/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 123              		.loc 1 156 0
 124 007a 4FF00003 		mov	r3, #0
 125 007e FB73     		strb	r3, [r7, #15]
 157:../SPL/src/stm32f10x_can.c ****   uint32_t wait_ack = 0x00000000;
 126              		.loc 1 157 0
 127 0080 4FF00003 		mov	r3, #0
 128 0084 BB60     		str	r3, [r7, #8]
 158:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 159:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 129              		.loc 1 159 0
 130 0086 7A68     		ldr	r2, [r7, #4]
 131 0088 944B     		ldr	r3, .L43
 132 008a 9A42     		cmp	r2, r3
 133 008c 08D0     		beq	.L8
 134              		.loc 1 159 0 is_stmt 0 discriminator 1
 135 008e 7A68     		ldr	r2, [r7, #4]
 136 0090 934B     		ldr	r3, .L43+4
 137 0092 9A42     		cmp	r2, r3
 138 0094 04D0     		beq	.L8
 139              		.loc 1 159 0 discriminator 2
 140 0096 9348     		ldr	r0, .L43+8
 141 0098 4FF09F01 		mov	r1, #159
 142 009c FFF7FEFF 		bl	assert_failed
 143              	.L8:
 160:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 144              		.loc 1 160 0 is_stmt 1
 145 00a0 3B68     		ldr	r3, [r7, #0]
 146 00a2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 147 00a4 002B     		cmp	r3, #0
 148 00a6 08D0     		beq	.L9
 149              		.loc 1 160 0 is_stmt 0 discriminator 1
 150 00a8 3B68     		ldr	r3, [r7, #0]
 151 00aa 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 152 00ac 012B     		cmp	r3, #1
 153 00ae 04D0     		beq	.L9
 154              		.loc 1 160 0 discriminator 2
 155 00b0 8C48     		ldr	r0, .L43+8
 156 00b2 4FF0A001 		mov	r1, #160
 157 00b6 FFF7FEFF 		bl	assert_failed
 158              	.L9:
 161:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 159              		.loc 1 161 0 is_stmt 1
 160 00ba 3B68     		ldr	r3, [r7, #0]
 161 00bc DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 162 00be 002B     		cmp	r3, #0
 163 00c0 08D0     		beq	.L10
 164              		.loc 1 161 0 is_stmt 0 discriminator 1
 165 00c2 3B68     		ldr	r3, [r7, #0]
 166 00c4 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 167 00c6 012B     		cmp	r3, #1
 168 00c8 04D0     		beq	.L10
 169              		.loc 1 161 0 discriminator 2
 170 00ca 8648     		ldr	r0, .L43+8
 171 00cc 4FF0A101 		mov	r1, #161
 172 00d0 FFF7FEFF 		bl	assert_failed
 173              	.L10:
 162:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 174              		.loc 1 162 0 is_stmt 1
 175 00d4 3B68     		ldr	r3, [r7, #0]
 176 00d6 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 177 00d8 002B     		cmp	r3, #0
 178 00da 08D0     		beq	.L11
 179              		.loc 1 162 0 is_stmt 0 discriminator 1
 180 00dc 3B68     		ldr	r3, [r7, #0]
 181 00de 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 182 00e0 012B     		cmp	r3, #1
 183 00e2 04D0     		beq	.L11
 184              		.loc 1 162 0 discriminator 2
 185 00e4 7F48     		ldr	r0, .L43+8
 186 00e6 4FF0A201 		mov	r1, #162
 187 00ea FFF7FEFF 		bl	assert_failed
 188              	.L11:
 163:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 189              		.loc 1 163 0 is_stmt 1
 190 00ee 3B68     		ldr	r3, [r7, #0]
 191 00f0 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 192 00f2 002B     		cmp	r3, #0
 193 00f4 08D0     		beq	.L12
 194              		.loc 1 163 0 is_stmt 0 discriminator 1
 195 00f6 3B68     		ldr	r3, [r7, #0]
 196 00f8 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 197 00fa 012B     		cmp	r3, #1
 198 00fc 04D0     		beq	.L12
 199              		.loc 1 163 0 discriminator 2
 200 00fe 7948     		ldr	r0, .L43+8
 201 0100 4FF0A301 		mov	r1, #163
 202 0104 FFF7FEFF 		bl	assert_failed
 203              	.L12:
 164:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 204              		.loc 1 164 0 is_stmt 1
 205 0108 3B68     		ldr	r3, [r7, #0]
 206 010a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 207 010c 002B     		cmp	r3, #0
 208 010e 08D0     		beq	.L13
 209              		.loc 1 164 0 is_stmt 0 discriminator 1
 210 0110 3B68     		ldr	r3, [r7, #0]
 211 0112 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 212 0114 012B     		cmp	r3, #1
 213 0116 04D0     		beq	.L13
 214              		.loc 1 164 0 discriminator 2
 215 0118 7248     		ldr	r0, .L43+8
 216 011a 4FF0A401 		mov	r1, #164
 217 011e FFF7FEFF 		bl	assert_failed
 218              	.L13:
 165:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 219              		.loc 1 165 0 is_stmt 1
 220 0122 3B68     		ldr	r3, [r7, #0]
 221 0124 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 222 0126 002B     		cmp	r3, #0
 223 0128 08D0     		beq	.L14
 224              		.loc 1 165 0 is_stmt 0 discriminator 1
 225 012a 3B68     		ldr	r3, [r7, #0]
 226 012c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 227 012e 012B     		cmp	r3, #1
 228 0130 04D0     		beq	.L14
 229              		.loc 1 165 0 discriminator 2
 230 0132 6C48     		ldr	r0, .L43+8
 231 0134 4FF0A501 		mov	r1, #165
 232 0138 FFF7FEFF 		bl	assert_failed
 233              	.L14:
 166:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 234              		.loc 1 166 0 is_stmt 1
 235 013c 3B68     		ldr	r3, [r7, #0]
 236 013e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 237 0140 002B     		cmp	r3, #0
 238 0142 10D0     		beq	.L15
 239              		.loc 1 166 0 is_stmt 0 discriminator 1
 240 0144 3B68     		ldr	r3, [r7, #0]
 241 0146 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 242 0148 012B     		cmp	r3, #1
 243 014a 0CD0     		beq	.L15
 244              		.loc 1 166 0 discriminator 2
 245 014c 3B68     		ldr	r3, [r7, #0]
 246 014e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 247 0150 022B     		cmp	r3, #2
 248 0152 08D0     		beq	.L15
 249              		.loc 1 166 0 discriminator 3
 250 0154 3B68     		ldr	r3, [r7, #0]
 251 0156 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 252 0158 032B     		cmp	r3, #3
 253 015a 04D0     		beq	.L15
 254              		.loc 1 166 0 discriminator 4
 255 015c 6148     		ldr	r0, .L43+8
 256 015e 4FF0A601 		mov	r1, #166
 257 0162 FFF7FEFF 		bl	assert_failed
 258              	.L15:
 167:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 259              		.loc 1 167 0 is_stmt 1
 260 0166 3B68     		ldr	r3, [r7, #0]
 261 0168 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 262 016a 002B     		cmp	r3, #0
 263 016c 10D0     		beq	.L16
 264              		.loc 1 167 0 is_stmt 0 discriminator 1
 265 016e 3B68     		ldr	r3, [r7, #0]
 266 0170 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 267 0172 012B     		cmp	r3, #1
 268 0174 0CD0     		beq	.L16
 269              		.loc 1 167 0 discriminator 2
 270 0176 3B68     		ldr	r3, [r7, #0]
 271 0178 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 272 017a 022B     		cmp	r3, #2
 273 017c 08D0     		beq	.L16
 274              		.loc 1 167 0 discriminator 3
 275 017e 3B68     		ldr	r3, [r7, #0]
 276 0180 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 277 0182 032B     		cmp	r3, #3
 278 0184 04D0     		beq	.L16
 279              		.loc 1 167 0 discriminator 4
 280 0186 5748     		ldr	r0, .L43+8
 281 0188 4FF0A701 		mov	r1, #167
 282 018c FFF7FEFF 		bl	assert_failed
 283              	.L16:
 168:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 284              		.loc 1 168 0 is_stmt 1
 285 0190 3B68     		ldr	r3, [r7, #0]
 286 0192 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 287 0194 0F2B     		cmp	r3, #15
 288 0196 04D9     		bls	.L17
 289              		.loc 1 168 0 is_stmt 0 discriminator 1
 290 0198 5248     		ldr	r0, .L43+8
 291 019a 4FF0A801 		mov	r1, #168
 292 019e FFF7FEFF 		bl	assert_failed
 293              	.L17:
 169:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 294              		.loc 1 169 0 is_stmt 1
 295 01a2 3B68     		ldr	r3, [r7, #0]
 296 01a4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 297 01a6 072B     		cmp	r3, #7
 298 01a8 04D9     		bls	.L18
 299              		.loc 1 169 0 is_stmt 0 discriminator 1
 300 01aa 4E48     		ldr	r0, .L43+8
 301 01ac 4FF0A901 		mov	r1, #169
 302 01b0 FFF7FEFF 		bl	assert_failed
 303              	.L18:
 170:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 304              		.loc 1 170 0 is_stmt 1
 305 01b4 3B68     		ldr	r3, [r7, #0]
 306 01b6 1B88     		ldrh	r3, [r3, #0]
 307 01b8 002B     		cmp	r3, #0
 308 01ba 04D0     		beq	.L19
 309              		.loc 1 170 0 is_stmt 0 discriminator 2
 310 01bc 3B68     		ldr	r3, [r7, #0]
 311 01be 1B88     		ldrh	r3, [r3, #0]
 312 01c0 B3F5806F 		cmp	r3, #1024
 313 01c4 04D9     		bls	.L20
 314              	.L19:
 315              		.loc 1 170 0 discriminator 1
 316 01c6 4748     		ldr	r0, .L43+8
 317 01c8 4FF0AA01 		mov	r1, #170
 318 01cc FFF7FEFF 		bl	assert_failed
 319              	.L20:
 171:../SPL/src/stm32f10x_can.c **** 
 172:../SPL/src/stm32f10x_can.c ****   /* Exit from sleep mode */
 173:../SPL/src/stm32f10x_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 320              		.loc 1 173 0 is_stmt 1
 321 01d0 7B68     		ldr	r3, [r7, #4]
 322 01d2 1B68     		ldr	r3, [r3, #0]
 323 01d4 23F00202 		bic	r2, r3, #2
 324 01d8 7B68     		ldr	r3, [r7, #4]
 325 01da 1A60     		str	r2, [r3, #0]
 174:../SPL/src/stm32f10x_can.c **** 
 175:../SPL/src/stm32f10x_can.c ****   /* Request initialisation */
 176:../SPL/src/stm32f10x_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 326              		.loc 1 176 0
 327 01dc 7B68     		ldr	r3, [r7, #4]
 328 01de 1B68     		ldr	r3, [r3, #0]
 329 01e0 43F00102 		orr	r2, r3, #1
 330 01e4 7B68     		ldr	r3, [r7, #4]
 331 01e6 1A60     		str	r2, [r3, #0]
 177:../SPL/src/stm32f10x_can.c **** 
 178:../SPL/src/stm32f10x_can.c ****   /* Wait the acknowledge */
 179:../SPL/src/stm32f10x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 332              		.loc 1 179 0
 333 01e8 03E0     		b	.L21
 334              	.L23:
 180:../SPL/src/stm32f10x_can.c ****   {
 181:../SPL/src/stm32f10x_can.c ****     wait_ack++;
 335              		.loc 1 181 0
 336 01ea BB68     		ldr	r3, [r7, #8]
 337 01ec 03F10103 		add	r3, r3, #1
 338 01f0 BB60     		str	r3, [r7, #8]
 339              	.L21:
 179:../SPL/src/stm32f10x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 340              		.loc 1 179 0 discriminator 1
 341 01f2 7B68     		ldr	r3, [r7, #4]
 342 01f4 5B68     		ldr	r3, [r3, #4]
 343 01f6 03F00103 		and	r3, r3, #1
 344 01fa 002B     		cmp	r3, #0
 345 01fc 04D1     		bne	.L22
 179:../SPL/src/stm32f10x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 346              		.loc 1 179 0 is_stmt 0 discriminator 2
 347 01fe BA68     		ldr	r2, [r7, #8]
 348 0200 4FF6FF73 		movw	r3, #65535
 349 0204 9A42     		cmp	r2, r3
 350 0206 F0D1     		bne	.L23
 351              	.L22:
 182:../SPL/src/stm32f10x_can.c ****   }
 183:../SPL/src/stm32f10x_can.c **** 
 184:../SPL/src/stm32f10x_can.c ****   /* Check acknowledge */
 185:../SPL/src/stm32f10x_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 352              		.loc 1 185 0 is_stmt 1
 353 0208 7B68     		ldr	r3, [r7, #4]
 354 020a 5B68     		ldr	r3, [r3, #4]
 355 020c 03F00103 		and	r3, r3, #1
 356 0210 002B     		cmp	r3, #0
 357 0212 03D1     		bne	.L24
 186:../SPL/src/stm32f10x_can.c ****   {
 187:../SPL/src/stm32f10x_can.c ****     InitStatus = CAN_InitStatus_Failed;
 358              		.loc 1 187 0
 359 0214 4FF00003 		mov	r3, #0
 360 0218 FB73     		strb	r3, [r7, #15]
 361 021a ABE0     		b	.L25
 362              	.L24:
 188:../SPL/src/stm32f10x_can.c ****   }
 189:../SPL/src/stm32f10x_can.c ****   else 
 190:../SPL/src/stm32f10x_can.c ****   {
 191:../SPL/src/stm32f10x_can.c ****     /* Set the time triggered communication mode */
 192:../SPL/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 363              		.loc 1 192 0
 364 021c 3B68     		ldr	r3, [r7, #0]
 365 021e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 366 0220 012B     		cmp	r3, #1
 367 0222 06D1     		bne	.L26
 193:../SPL/src/stm32f10x_can.c ****     {
 194:../SPL/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 368              		.loc 1 194 0
 369 0224 7B68     		ldr	r3, [r7, #4]
 370 0226 1B68     		ldr	r3, [r3, #0]
 371 0228 43F08002 		orr	r2, r3, #128
 372 022c 7B68     		ldr	r3, [r7, #4]
 373 022e 1A60     		str	r2, [r3, #0]
 374 0230 05E0     		b	.L27
 375              	.L26:
 195:../SPL/src/stm32f10x_can.c ****     }
 196:../SPL/src/stm32f10x_can.c ****     else
 197:../SPL/src/stm32f10x_can.c ****     {
 198:../SPL/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 376              		.loc 1 198 0
 377 0232 7B68     		ldr	r3, [r7, #4]
 378 0234 1B68     		ldr	r3, [r3, #0]
 379 0236 23F08002 		bic	r2, r3, #128
 380 023a 7B68     		ldr	r3, [r7, #4]
 381 023c 1A60     		str	r2, [r3, #0]
 382              	.L27:
 199:../SPL/src/stm32f10x_can.c ****     }
 200:../SPL/src/stm32f10x_can.c **** 
 201:../SPL/src/stm32f10x_can.c ****     /* Set the automatic bus-off management */
 202:../SPL/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 383              		.loc 1 202 0
 384 023e 3B68     		ldr	r3, [r7, #0]
 385 0240 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 386 0242 012B     		cmp	r3, #1
 387 0244 06D1     		bne	.L28
 203:../SPL/src/stm32f10x_can.c ****     {
 204:../SPL/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 388              		.loc 1 204 0
 389 0246 7B68     		ldr	r3, [r7, #4]
 390 0248 1B68     		ldr	r3, [r3, #0]
 391 024a 43F04002 		orr	r2, r3, #64
 392 024e 7B68     		ldr	r3, [r7, #4]
 393 0250 1A60     		str	r2, [r3, #0]
 394 0252 05E0     		b	.L29
 395              	.L28:
 205:../SPL/src/stm32f10x_can.c ****     }
 206:../SPL/src/stm32f10x_can.c ****     else
 207:../SPL/src/stm32f10x_can.c ****     {
 208:../SPL/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 396              		.loc 1 208 0
 397 0254 7B68     		ldr	r3, [r7, #4]
 398 0256 1B68     		ldr	r3, [r3, #0]
 399 0258 23F04002 		bic	r2, r3, #64
 400 025c 7B68     		ldr	r3, [r7, #4]
 401 025e 1A60     		str	r2, [r3, #0]
 402              	.L29:
 209:../SPL/src/stm32f10x_can.c ****     }
 210:../SPL/src/stm32f10x_can.c **** 
 211:../SPL/src/stm32f10x_can.c ****     /* Set the automatic wake-up mode */
 212:../SPL/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 403              		.loc 1 212 0
 404 0260 3B68     		ldr	r3, [r7, #0]
 405 0262 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 406 0264 012B     		cmp	r3, #1
 407 0266 06D1     		bne	.L30
 213:../SPL/src/stm32f10x_can.c ****     {
 214:../SPL/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 408              		.loc 1 214 0
 409 0268 7B68     		ldr	r3, [r7, #4]
 410 026a 1B68     		ldr	r3, [r3, #0]
 411 026c 43F02002 		orr	r2, r3, #32
 412 0270 7B68     		ldr	r3, [r7, #4]
 413 0272 1A60     		str	r2, [r3, #0]
 414 0274 05E0     		b	.L31
 415              	.L30:
 215:../SPL/src/stm32f10x_can.c ****     }
 216:../SPL/src/stm32f10x_can.c ****     else
 217:../SPL/src/stm32f10x_can.c ****     {
 218:../SPL/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 416              		.loc 1 218 0
 417 0276 7B68     		ldr	r3, [r7, #4]
 418 0278 1B68     		ldr	r3, [r3, #0]
 419 027a 23F02002 		bic	r2, r3, #32
 420 027e 7B68     		ldr	r3, [r7, #4]
 421 0280 1A60     		str	r2, [r3, #0]
 422              	.L31:
 219:../SPL/src/stm32f10x_can.c ****     }
 220:../SPL/src/stm32f10x_can.c **** 
 221:../SPL/src/stm32f10x_can.c ****     /* Set the no automatic retransmission */
 222:../SPL/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 423              		.loc 1 222 0
 424 0282 3B68     		ldr	r3, [r7, #0]
 425 0284 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 426 0286 012B     		cmp	r3, #1
 427 0288 06D1     		bne	.L32
 223:../SPL/src/stm32f10x_can.c ****     {
 224:../SPL/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_NART;
 428              		.loc 1 224 0
 429 028a 7B68     		ldr	r3, [r7, #4]
 430 028c 1B68     		ldr	r3, [r3, #0]
 431 028e 43F01002 		orr	r2, r3, #16
 432 0292 7B68     		ldr	r3, [r7, #4]
 433 0294 1A60     		str	r2, [r3, #0]
 434 0296 05E0     		b	.L33
 435              	.L32:
 225:../SPL/src/stm32f10x_can.c ****     }
 226:../SPL/src/stm32f10x_can.c ****     else
 227:../SPL/src/stm32f10x_can.c ****     {
 228:../SPL/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 436              		.loc 1 228 0
 437 0298 7B68     		ldr	r3, [r7, #4]
 438 029a 1B68     		ldr	r3, [r3, #0]
 439 029c 23F01002 		bic	r2, r3, #16
 440 02a0 7B68     		ldr	r3, [r7, #4]
 441 02a2 1A60     		str	r2, [r3, #0]
 442              	.L33:
 229:../SPL/src/stm32f10x_can.c ****     }
 230:../SPL/src/stm32f10x_can.c **** 
 231:../SPL/src/stm32f10x_can.c ****     /* Set the receive FIFO locked mode */
 232:../SPL/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 443              		.loc 1 232 0
 444 02a4 3B68     		ldr	r3, [r7, #0]
 445 02a6 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 446 02a8 012B     		cmp	r3, #1
 447 02aa 06D1     		bne	.L34
 233:../SPL/src/stm32f10x_can.c ****     {
 234:../SPL/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 448              		.loc 1 234 0
 449 02ac 7B68     		ldr	r3, [r7, #4]
 450 02ae 1B68     		ldr	r3, [r3, #0]
 451 02b0 43F00802 		orr	r2, r3, #8
 452 02b4 7B68     		ldr	r3, [r7, #4]
 453 02b6 1A60     		str	r2, [r3, #0]
 454 02b8 05E0     		b	.L35
 455              	.L34:
 235:../SPL/src/stm32f10x_can.c ****     }
 236:../SPL/src/stm32f10x_can.c ****     else
 237:../SPL/src/stm32f10x_can.c ****     {
 238:../SPL/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 456              		.loc 1 238 0
 457 02ba 7B68     		ldr	r3, [r7, #4]
 458 02bc 1B68     		ldr	r3, [r3, #0]
 459 02be 23F00802 		bic	r2, r3, #8
 460 02c2 7B68     		ldr	r3, [r7, #4]
 461 02c4 1A60     		str	r2, [r3, #0]
 462              	.L35:
 239:../SPL/src/stm32f10x_can.c ****     }
 240:../SPL/src/stm32f10x_can.c **** 
 241:../SPL/src/stm32f10x_can.c ****     /* Set the transmit FIFO priority */
 242:../SPL/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 463              		.loc 1 242 0
 464 02c6 3B68     		ldr	r3, [r7, #0]
 465 02c8 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 466 02ca 012B     		cmp	r3, #1
 467 02cc 0CD1     		bne	.L36
 243:../SPL/src/stm32f10x_can.c ****     {
 244:../SPL/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 468              		.loc 1 244 0
 469 02ce 7B68     		ldr	r3, [r7, #4]
 470 02d0 1B68     		ldr	r3, [r3, #0]
 471 02d2 43F00402 		orr	r2, r3, #4
 472 02d6 7B68     		ldr	r3, [r7, #4]
 473 02d8 1A60     		str	r2, [r3, #0]
 474 02da 0BE0     		b	.L37
 475              	.L44:
 476              		.align	2
 477              	.L43:
 478 02dc 00640040 		.word	1073767424
 479 02e0 00680040 		.word	1073768448
 480 02e4 00000000 		.word	.LC0
 481              	.L36:
 245:../SPL/src/stm32f10x_can.c ****     }
 246:../SPL/src/stm32f10x_can.c ****     else
 247:../SPL/src/stm32f10x_can.c ****     {
 248:../SPL/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 482              		.loc 1 248 0
 483 02e8 7B68     		ldr	r3, [r7, #4]
 484 02ea 1B68     		ldr	r3, [r3, #0]
 485 02ec 23F00402 		bic	r2, r3, #4
 486 02f0 7B68     		ldr	r3, [r7, #4]
 487 02f2 1A60     		str	r2, [r3, #0]
 488              	.L37:
 249:../SPL/src/stm32f10x_can.c ****     }
 250:../SPL/src/stm32f10x_can.c **** 
 251:../SPL/src/stm32f10x_can.c ****     /* Set the bit timing register */
 252:../SPL/src/stm32f10x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 489              		.loc 1 252 0
 490 02f4 3B68     		ldr	r3, [r7, #0]
 491 02f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 492 02f8 4FEA8372 		lsl	r2, r3, #30
 253:../SPL/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 493              		.loc 1 253 0
 494 02fc 3B68     		ldr	r3, [r7, #0]
 495 02fe DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 496 0300 4FEA0363 		lsl	r3, r3, #24
 252:../SPL/src/stm32f10x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 497              		.loc 1 252 0
 498 0304 1A43     		orrs	r2, r2, r3
 254:../SPL/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 499              		.loc 1 254 0
 500 0306 3B68     		ldr	r3, [r7, #0]
 501 0308 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 502 030a 4FEA0343 		lsl	r3, r3, #16
 253:../SPL/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 503              		.loc 1 253 0
 504 030e 1A43     		orrs	r2, r2, r3
 255:../SPL/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 505              		.loc 1 255 0
 506 0310 3B68     		ldr	r3, [r7, #0]
 507 0312 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 508 0314 4FEA0353 		lsl	r3, r3, #20
 254:../SPL/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 509              		.loc 1 254 0
 510 0318 1A43     		orrs	r2, r2, r3
 256:../SPL/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 511              		.loc 1 256 0
 512 031a 3B68     		ldr	r3, [r7, #0]
 513 031c 1B88     		ldrh	r3, [r3, #0]
 514 031e 03F1FF33 		add	r3, r3, #-1
 255:../SPL/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 515              		.loc 1 255 0
 516 0322 1A43     		orrs	r2, r2, r3
 252:../SPL/src/stm32f10x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 517              		.loc 1 252 0
 518 0324 7B68     		ldr	r3, [r7, #4]
 519 0326 DA61     		str	r2, [r3, #28]
 257:../SPL/src/stm32f10x_can.c **** 
 258:../SPL/src/stm32f10x_can.c ****     /* Request leave initialisation */
 259:../SPL/src/stm32f10x_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 520              		.loc 1 259 0
 521 0328 7B68     		ldr	r3, [r7, #4]
 522 032a 1B68     		ldr	r3, [r3, #0]
 523 032c 23F00102 		bic	r2, r3, #1
 524 0330 7B68     		ldr	r3, [r7, #4]
 525 0332 1A60     		str	r2, [r3, #0]
 260:../SPL/src/stm32f10x_can.c **** 
 261:../SPL/src/stm32f10x_can.c ****    /* Wait the acknowledge */
 262:../SPL/src/stm32f10x_can.c ****    wait_ack = 0;
 526              		.loc 1 262 0
 527 0334 4FF00003 		mov	r3, #0
 528 0338 BB60     		str	r3, [r7, #8]
 263:../SPL/src/stm32f10x_can.c **** 
 264:../SPL/src/stm32f10x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 529              		.loc 1 264 0
 530 033a 03E0     		b	.L38
 531              	.L40:
 265:../SPL/src/stm32f10x_can.c ****    {
 266:../SPL/src/stm32f10x_can.c ****      wait_ack++;
 532              		.loc 1 266 0
 533 033c BB68     		ldr	r3, [r7, #8]
 534 033e 03F10103 		add	r3, r3, #1
 535 0342 BB60     		str	r3, [r7, #8]
 536              	.L38:
 264:../SPL/src/stm32f10x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 537              		.loc 1 264 0 discriminator 1
 538 0344 7B68     		ldr	r3, [r7, #4]
 539 0346 5B68     		ldr	r3, [r3, #4]
 540 0348 03F00103 		and	r3, r3, #1
 541 034c 002B     		cmp	r3, #0
 542 034e 04D0     		beq	.L39
 264:../SPL/src/stm32f10x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 543              		.loc 1 264 0 is_stmt 0 discriminator 2
 544 0350 BA68     		ldr	r2, [r7, #8]
 545 0352 4FF6FF73 		movw	r3, #65535
 546 0356 9A42     		cmp	r2, r3
 547 0358 F0D1     		bne	.L40
 548              	.L39:
 267:../SPL/src/stm32f10x_can.c ****    }
 268:../SPL/src/stm32f10x_can.c **** 
 269:../SPL/src/stm32f10x_can.c ****     /* ...and check acknowledged */
 270:../SPL/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 549              		.loc 1 270 0 is_stmt 1
 550 035a 7B68     		ldr	r3, [r7, #4]
 551 035c 5B68     		ldr	r3, [r3, #4]
 552 035e 03F00103 		and	r3, r3, #1
 553 0362 002B     		cmp	r3, #0
 554 0364 03D0     		beq	.L41
 271:../SPL/src/stm32f10x_can.c ****     {
 272:../SPL/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Failed;
 555              		.loc 1 272 0
 556 0366 4FF00003 		mov	r3, #0
 557 036a FB73     		strb	r3, [r7, #15]
 558 036c 02E0     		b	.L25
 559              	.L41:
 273:../SPL/src/stm32f10x_can.c ****     }
 274:../SPL/src/stm32f10x_can.c ****     else
 275:../SPL/src/stm32f10x_can.c ****     {
 276:../SPL/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Success ;
 560              		.loc 1 276 0
 561 036e 4FF00103 		mov	r3, #1
 562 0372 FB73     		strb	r3, [r7, #15]
 563              	.L25:
 277:../SPL/src/stm32f10x_can.c ****     }
 278:../SPL/src/stm32f10x_can.c ****   }
 279:../SPL/src/stm32f10x_can.c **** 
 280:../SPL/src/stm32f10x_can.c ****   /* At this step, return the status of initialization */
 281:../SPL/src/stm32f10x_can.c ****   return InitStatus;
 564              		.loc 1 281 0
 565 0374 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 282:../SPL/src/stm32f10x_can.c **** }
 566              		.loc 1 282 0
 567 0376 1846     		mov	r0, r3
 568 0378 07F11007 		add	r7, r7, #16
 569 037c BD46     		mov	sp, r7
 570 037e 80BD     		pop	{r7, pc}
 571              		.cfi_endproc
 572              	.LFE30:
 574              		.align	2
 575              		.global	CAN_FilterInit
 576              		.thumb
 577              		.thumb_func
 579              	CAN_FilterInit:
 580              	.LFB31:
 283:../SPL/src/stm32f10x_can.c **** 
 284:../SPL/src/stm32f10x_can.c **** /**
 285:../SPL/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 286:../SPL/src/stm32f10x_can.c ****   *         parameters in the CAN_FilterInitStruct.
 287:../SPL/src/stm32f10x_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef
 288:../SPL/src/stm32f10x_can.c ****   *                               structure that contains the configuration 
 289:../SPL/src/stm32f10x_can.c ****   *                               information.
 290:../SPL/src/stm32f10x_can.c ****   * @retval None.
 291:../SPL/src/stm32f10x_can.c ****   */
 292:../SPL/src/stm32f10x_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 293:../SPL/src/stm32f10x_can.c **** {
 581              		.loc 1 293 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 16
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585 0380 80B5     		push	{r7, lr}
 586              	.LCFI6:
 587              		.cfi_def_cfa_offset 8
 588              		.cfi_offset 7, -8
 589              		.cfi_offset 14, -4
 590 0382 84B0     		sub	sp, sp, #16
 591              	.LCFI7:
 592              		.cfi_def_cfa_offset 24
 593 0384 00AF     		add	r7, sp, #0
 594              	.LCFI8:
 595              		.cfi_def_cfa_register 7
 596 0386 7860     		str	r0, [r7, #4]
 294:../SPL/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
 597              		.loc 1 294 0
 598 0388 4FF00003 		mov	r3, #0
 599 038c FB60     		str	r3, [r7, #12]
 295:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 296:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 600              		.loc 1 296 0
 601 038e 7B68     		ldr	r3, [r7, #4]
 602 0390 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 603 0392 0D2B     		cmp	r3, #13
 604 0394 04D9     		bls	.L46
 605              		.loc 1 296 0 is_stmt 0 discriminator 1
 606 0396 7848     		ldr	r0, .L58
 607 0398 4FF49471 		mov	r1, #296
 608 039c FFF7FEFF 		bl	assert_failed
 609              	.L46:
 297:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 610              		.loc 1 297 0 is_stmt 1
 611 03a0 7B68     		ldr	r3, [r7, #4]
 612 03a2 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 613 03a4 002B     		cmp	r3, #0
 614 03a6 08D0     		beq	.L47
 615              		.loc 1 297 0 is_stmt 0 discriminator 1
 616 03a8 7B68     		ldr	r3, [r7, #4]
 617 03aa DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 618 03ac 012B     		cmp	r3, #1
 619 03ae 04D0     		beq	.L47
 620              		.loc 1 297 0 discriminator 2
 621 03b0 7148     		ldr	r0, .L58
 622 03b2 40F22911 		movw	r1, #297
 623 03b6 FFF7FEFF 		bl	assert_failed
 624              	.L47:
 298:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 625              		.loc 1 298 0 is_stmt 1
 626 03ba 7B68     		ldr	r3, [r7, #4]
 627 03bc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 628 03be 002B     		cmp	r3, #0
 629 03c0 08D0     		beq	.L48
 630              		.loc 1 298 0 is_stmt 0 discriminator 1
 631 03c2 7B68     		ldr	r3, [r7, #4]
 632 03c4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 633 03c6 012B     		cmp	r3, #1
 634 03c8 04D0     		beq	.L48
 635              		.loc 1 298 0 discriminator 2
 636 03ca 6B48     		ldr	r0, .L58
 637 03cc 4FF49571 		mov	r1, #298
 638 03d0 FFF7FEFF 		bl	assert_failed
 639              	.L48:
 299:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 640              		.loc 1 299 0 is_stmt 1
 641 03d4 7B68     		ldr	r3, [r7, #4]
 642 03d6 1B89     		ldrh	r3, [r3, #8]
 643 03d8 002B     		cmp	r3, #0
 644 03da 08D0     		beq	.L49
 645              		.loc 1 299 0 is_stmt 0 discriminator 1
 646 03dc 7B68     		ldr	r3, [r7, #4]
 647 03de 1B89     		ldrh	r3, [r3, #8]
 648 03e0 012B     		cmp	r3, #1
 649 03e2 04D0     		beq	.L49
 650              		.loc 1 299 0 discriminator 2
 651 03e4 6448     		ldr	r0, .L58
 652 03e6 40F22B11 		movw	r1, #299
 653 03ea FFF7FEFF 		bl	assert_failed
 654              	.L49:
 300:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 655              		.loc 1 300 0 is_stmt 1
 656 03ee 7B68     		ldr	r3, [r7, #4]
 657 03f0 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 658 03f2 002B     		cmp	r3, #0
 659 03f4 08D0     		beq	.L50
 660              		.loc 1 300 0 is_stmt 0 discriminator 1
 661 03f6 7B68     		ldr	r3, [r7, #4]
 662 03f8 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 663 03fa 012B     		cmp	r3, #1
 664 03fc 04D0     		beq	.L50
 665              		.loc 1 300 0 discriminator 2
 666 03fe 5E48     		ldr	r0, .L58
 667 0400 4FF49671 		mov	r1, #300
 668 0404 FFF7FEFF 		bl	assert_failed
 669              	.L50:
 301:../SPL/src/stm32f10x_can.c **** 
 302:../SPL/src/stm32f10x_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 670              		.loc 1 302 0 is_stmt 1
 671 0408 7B68     		ldr	r3, [r7, #4]
 672 040a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 673 040c 4FF00102 		mov	r2, #1
 674 0410 02FA03F3 		lsl	r3, r2, r3
 675 0414 FB60     		str	r3, [r7, #12]
 303:../SPL/src/stm32f10x_can.c **** 
 304:../SPL/src/stm32f10x_can.c ****   /* Initialisation mode for the filter */
 305:../SPL/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 676              		.loc 1 305 0
 677 0416 594B     		ldr	r3, .L58+4
 678 0418 584A     		ldr	r2, .L58+4
 679 041a D2F80022 		ldr	r2, [r2, #512]
 680 041e 42F00102 		orr	r2, r2, #1
 681 0422 C3F80022 		str	r2, [r3, #512]
 306:../SPL/src/stm32f10x_can.c **** 
 307:../SPL/src/stm32f10x_can.c ****   /* Filter Deactivation */
 308:../SPL/src/stm32f10x_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 682              		.loc 1 308 0
 683 0426 554B     		ldr	r3, .L58+4
 684 0428 544A     		ldr	r2, .L58+4
 685 042a D2F81C12 		ldr	r1, [r2, #540]
 686 042e FA68     		ldr	r2, [r7, #12]
 687 0430 6FEA0202 		mvn	r2, r2
 688 0434 0A40     		ands	r2, r2, r1
 689 0436 C3F81C22 		str	r2, [r3, #540]
 309:../SPL/src/stm32f10x_can.c **** 
 310:../SPL/src/stm32f10x_can.c ****   /* Filter Scale */
 311:../SPL/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 690              		.loc 1 311 0
 691 043a 7B68     		ldr	r3, [r7, #4]
 692 043c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 693 043e 002B     		cmp	r3, #0
 694 0440 27D1     		bne	.L51
 312:../SPL/src/stm32f10x_can.c ****   {
 313:../SPL/src/stm32f10x_can.c ****     /* 16-bit scale for the filter */
 314:../SPL/src/stm32f10x_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 695              		.loc 1 314 0
 696 0442 4E4B     		ldr	r3, .L58+4
 697 0444 4D4A     		ldr	r2, .L58+4
 698 0446 D2F80C12 		ldr	r1, [r2, #524]
 699 044a FA68     		ldr	r2, [r7, #12]
 700 044c 6FEA0202 		mvn	r2, r2
 701 0450 0A40     		ands	r2, r2, r1
 702 0452 C3F80C22 		str	r2, [r3, #524]
 315:../SPL/src/stm32f10x_can.c **** 
 316:../SPL/src/stm32f10x_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 317:../SPL/src/stm32f10x_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 318:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 703              		.loc 1 318 0
 704 0456 494B     		ldr	r3, .L58+4
 705 0458 7A68     		ldr	r2, [r7, #4]
 706 045a 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 319:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 707              		.loc 1 319 0
 708 045c 7968     		ldr	r1, [r7, #4]
 709 045e C988     		ldrh	r1, [r1, #6]
 710 0460 4FEA0140 		lsl	r0, r1, #16
 320:../SPL/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 711              		.loc 1 320 0
 712 0464 7968     		ldr	r1, [r7, #4]
 713 0466 4988     		ldrh	r1, [r1, #2]
 319:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 714              		.loc 1 319 0
 715 0468 0143     		orrs	r1, r1, r0
 318:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 716              		.loc 1 318 0
 717 046a 02F14802 		add	r2, r2, #72
 718 046e 43F83210 		str	r1, [r3, r2, lsl #3]
 321:../SPL/src/stm32f10x_can.c **** 
 322:../SPL/src/stm32f10x_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 323:../SPL/src/stm32f10x_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 324:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 719              		.loc 1 324 0
 720 0472 4249     		ldr	r1, .L58+4
 721 0474 7B68     		ldr	r3, [r7, #4]
 722 0476 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 325:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 723              		.loc 1 325 0
 724 0478 7A68     		ldr	r2, [r7, #4]
 725 047a 9288     		ldrh	r2, [r2, #4]
 726 047c 4FEA0240 		lsl	r0, r2, #16
 326:../SPL/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 727              		.loc 1 326 0
 728 0480 7A68     		ldr	r2, [r7, #4]
 729 0482 1288     		ldrh	r2, [r2, #0]
 325:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 730              		.loc 1 325 0
 731 0484 0243     		orrs	r2, r2, r0
 324:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 732              		.loc 1 324 0
 733 0486 03F14803 		add	r3, r3, #72
 734 048a 4FEAC303 		lsl	r3, r3, #3
 735 048e CB18     		adds	r3, r1, r3
 736 0490 5A60     		str	r2, [r3, #4]
 737              	.L51:
 327:../SPL/src/stm32f10x_can.c ****   }
 328:../SPL/src/stm32f10x_can.c **** 
 329:../SPL/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 738              		.loc 1 329 0
 739 0492 7B68     		ldr	r3, [r7, #4]
 740 0494 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 741 0496 012B     		cmp	r3, #1
 742 0498 25D1     		bne	.L52
 330:../SPL/src/stm32f10x_can.c ****   {
 331:../SPL/src/stm32f10x_can.c ****     /* 32-bit scale for the filter */
 332:../SPL/src/stm32f10x_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 743              		.loc 1 332 0
 744 049a 384B     		ldr	r3, .L58+4
 745 049c 374A     		ldr	r2, .L58+4
 746 049e D2F80C12 		ldr	r1, [r2, #524]
 747 04a2 FA68     		ldr	r2, [r7, #12]
 748 04a4 0A43     		orrs	r2, r2, r1
 749 04a6 C3F80C22 		str	r2, [r3, #524]
 333:../SPL/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 334:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 750              		.loc 1 334 0
 751 04aa 344B     		ldr	r3, .L58+4
 752 04ac 7A68     		ldr	r2, [r7, #4]
 753 04ae 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 335:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 754              		.loc 1 335 0
 755 04b0 7968     		ldr	r1, [r7, #4]
 756 04b2 0988     		ldrh	r1, [r1, #0]
 757 04b4 4FEA0140 		lsl	r0, r1, #16
 336:../SPL/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 758              		.loc 1 336 0
 759 04b8 7968     		ldr	r1, [r7, #4]
 760 04ba 4988     		ldrh	r1, [r1, #2]
 335:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 761              		.loc 1 335 0
 762 04bc 0143     		orrs	r1, r1, r0
 334:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 763              		.loc 1 334 0
 764 04be 02F14802 		add	r2, r2, #72
 765 04c2 43F83210 		str	r1, [r3, r2, lsl #3]
 337:../SPL/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 338:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 766              		.loc 1 338 0
 767 04c6 2D49     		ldr	r1, .L58+4
 768 04c8 7B68     		ldr	r3, [r7, #4]
 769 04ca 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 339:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 770              		.loc 1 339 0
 771 04cc 7A68     		ldr	r2, [r7, #4]
 772 04ce 9288     		ldrh	r2, [r2, #4]
 773 04d0 4FEA0240 		lsl	r0, r2, #16
 340:../SPL/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 774              		.loc 1 340 0
 775 04d4 7A68     		ldr	r2, [r7, #4]
 776 04d6 D288     		ldrh	r2, [r2, #6]
 339:../SPL/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 777              		.loc 1 339 0
 778 04d8 0243     		orrs	r2, r2, r0
 338:../SPL/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 779              		.loc 1 338 0
 780 04da 03F14803 		add	r3, r3, #72
 781 04de 4FEAC303 		lsl	r3, r3, #3
 782 04e2 CB18     		adds	r3, r1, r3
 783 04e4 5A60     		str	r2, [r3, #4]
 784              	.L52:
 341:../SPL/src/stm32f10x_can.c ****   }
 342:../SPL/src/stm32f10x_can.c **** 
 343:../SPL/src/stm32f10x_can.c ****   /* Filter Mode */
 344:../SPL/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 785              		.loc 1 344 0
 786 04e6 7B68     		ldr	r3, [r7, #4]
 787 04e8 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 788 04ea 002B     		cmp	r3, #0
 789 04ec 0AD1     		bne	.L53
 345:../SPL/src/stm32f10x_can.c ****   {
 346:../SPL/src/stm32f10x_can.c ****     /*Id/Mask mode for the filter*/
 347:../SPL/src/stm32f10x_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 790              		.loc 1 347 0
 791 04ee 234B     		ldr	r3, .L58+4
 792 04f0 224A     		ldr	r2, .L58+4
 793 04f2 D2F80412 		ldr	r1, [r2, #516]
 794 04f6 FA68     		ldr	r2, [r7, #12]
 795 04f8 6FEA0202 		mvn	r2, r2
 796 04fc 0A40     		ands	r2, r2, r1
 797 04fe C3F80422 		str	r2, [r3, #516]
 798 0502 07E0     		b	.L54
 799              	.L53:
 348:../SPL/src/stm32f10x_can.c ****   }
 349:../SPL/src/stm32f10x_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 350:../SPL/src/stm32f10x_can.c ****   {
 351:../SPL/src/stm32f10x_can.c ****     /*Identifier list mode for the filter*/
 352:../SPL/src/stm32f10x_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800              		.loc 1 352 0
 801 0504 1D4B     		ldr	r3, .L58+4
 802 0506 1D4A     		ldr	r2, .L58+4
 803 0508 D2F80412 		ldr	r1, [r2, #516]
 804 050c FA68     		ldr	r2, [r7, #12]
 805 050e 0A43     		orrs	r2, r2, r1
 806 0510 C3F80422 		str	r2, [r3, #516]
 807              	.L54:
 353:../SPL/src/stm32f10x_can.c ****   }
 354:../SPL/src/stm32f10x_can.c **** 
 355:../SPL/src/stm32f10x_can.c ****   /* Filter FIFO assignment */
 356:../SPL/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 808              		.loc 1 356 0
 809 0514 7B68     		ldr	r3, [r7, #4]
 810 0516 1B89     		ldrh	r3, [r3, #8]
 811 0518 002B     		cmp	r3, #0
 812 051a 09D1     		bne	.L55
 357:../SPL/src/stm32f10x_can.c ****   {
 358:../SPL/src/stm32f10x_can.c ****     /* FIFO 0 assignation for the filter */
 359:../SPL/src/stm32f10x_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 813              		.loc 1 359 0
 814 051c 174B     		ldr	r3, .L58+4
 815 051e 174A     		ldr	r2, .L58+4
 816 0520 D2F81412 		ldr	r1, [r2, #532]
 817 0524 FA68     		ldr	r2, [r7, #12]
 818 0526 6FEA0202 		mvn	r2, r2
 819 052a 0A40     		ands	r2, r2, r1
 820 052c C3F81422 		str	r2, [r3, #532]
 821              	.L55:
 360:../SPL/src/stm32f10x_can.c ****   }
 361:../SPL/src/stm32f10x_can.c **** 
 362:../SPL/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 822              		.loc 1 362 0
 823 0530 7B68     		ldr	r3, [r7, #4]
 824 0532 1B89     		ldrh	r3, [r3, #8]
 825 0534 012B     		cmp	r3, #1
 826 0536 07D1     		bne	.L56
 363:../SPL/src/stm32f10x_can.c ****   {
 364:../SPL/src/stm32f10x_can.c ****     /* FIFO 1 assignation for the filter */
 365:../SPL/src/stm32f10x_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 827              		.loc 1 365 0
 828 0538 104B     		ldr	r3, .L58+4
 829 053a 104A     		ldr	r2, .L58+4
 830 053c D2F81412 		ldr	r1, [r2, #532]
 831 0540 FA68     		ldr	r2, [r7, #12]
 832 0542 0A43     		orrs	r2, r2, r1
 833 0544 C3F81422 		str	r2, [r3, #532]
 834              	.L56:
 366:../SPL/src/stm32f10x_can.c ****   }
 367:../SPL/src/stm32f10x_can.c ****   
 368:../SPL/src/stm32f10x_can.c ****   /* Filter activation */
 369:../SPL/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 835              		.loc 1 369 0
 836 0548 7B68     		ldr	r3, [r7, #4]
 837 054a 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 838 054c 012B     		cmp	r3, #1
 839 054e 07D1     		bne	.L57
 370:../SPL/src/stm32f10x_can.c ****   {
 371:../SPL/src/stm32f10x_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 840              		.loc 1 371 0
 841 0550 0A4B     		ldr	r3, .L58+4
 842 0552 0A4A     		ldr	r2, .L58+4
 843 0554 D2F81C12 		ldr	r1, [r2, #540]
 844 0558 FA68     		ldr	r2, [r7, #12]
 845 055a 0A43     		orrs	r2, r2, r1
 846 055c C3F81C22 		str	r2, [r3, #540]
 847              	.L57:
 372:../SPL/src/stm32f10x_can.c ****   }
 373:../SPL/src/stm32f10x_can.c **** 
 374:../SPL/src/stm32f10x_can.c ****   /* Leave the initialisation mode for the filter */
 375:../SPL/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 848              		.loc 1 375 0
 849 0560 064B     		ldr	r3, .L58+4
 850 0562 064A     		ldr	r2, .L58+4
 851 0564 D2F80022 		ldr	r2, [r2, #512]
 852 0568 22F00102 		bic	r2, r2, #1
 853 056c C3F80022 		str	r2, [r3, #512]
 376:../SPL/src/stm32f10x_can.c **** }
 854              		.loc 1 376 0
 855 0570 07F11007 		add	r7, r7, #16
 856 0574 BD46     		mov	sp, r7
 857 0576 80BD     		pop	{r7, pc}
 858              	.L59:
 859              		.align	2
 860              	.L58:
 861 0578 00000000 		.word	.LC0
 862 057c 00640040 		.word	1073767424
 863              		.cfi_endproc
 864              	.LFE31:
 866              		.align	2
 867              		.global	CAN_StructInit
 868              		.thumb
 869              		.thumb_func
 871              	CAN_StructInit:
 872              	.LFB32:
 377:../SPL/src/stm32f10x_can.c **** 
 378:../SPL/src/stm32f10x_can.c **** /**
 379:../SPL/src/stm32f10x_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 380:../SPL/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
 381:../SPL/src/stm32f10x_can.c ****   *                         will be initialized.
 382:../SPL/src/stm32f10x_can.c ****   * @retval None.
 383:../SPL/src/stm32f10x_can.c ****   */
 384:../SPL/src/stm32f10x_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 385:../SPL/src/stm32f10x_can.c **** {
 873              		.loc 1 385 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 8
 876              		@ frame_needed = 1, uses_anonymous_args = 0
 877              		@ link register save eliminated.
 878 0580 80B4     		push	{r7}
 879              	.LCFI9:
 880              		.cfi_def_cfa_offset 4
 881              		.cfi_offset 7, -4
 882 0582 83B0     		sub	sp, sp, #12
 883              	.LCFI10:
 884              		.cfi_def_cfa_offset 16
 885 0584 00AF     		add	r7, sp, #0
 886              	.LCFI11:
 887              		.cfi_def_cfa_register 7
 888 0586 7860     		str	r0, [r7, #4]
 386:../SPL/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 387:../SPL/src/stm32f10x_can.c ****   
 388:../SPL/src/stm32f10x_can.c ****   /* Initialize the time triggered communication mode */
 389:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 889              		.loc 1 389 0
 890 0588 7B68     		ldr	r3, [r7, #4]
 891 058a 4FF00002 		mov	r2, #0
 892 058e 9A71     		strb	r2, [r3, #6]
 390:../SPL/src/stm32f10x_can.c ****   
 391:../SPL/src/stm32f10x_can.c ****   /* Initialize the automatic bus-off management */
 392:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 893              		.loc 1 392 0
 894 0590 7B68     		ldr	r3, [r7, #4]
 895 0592 4FF00002 		mov	r2, #0
 896 0596 DA71     		strb	r2, [r3, #7]
 393:../SPL/src/stm32f10x_can.c ****   
 394:../SPL/src/stm32f10x_can.c ****   /* Initialize the automatic wake-up mode */
 395:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 897              		.loc 1 395 0
 898 0598 7B68     		ldr	r3, [r7, #4]
 899 059a 4FF00002 		mov	r2, #0
 900 059e 1A72     		strb	r2, [r3, #8]
 396:../SPL/src/stm32f10x_can.c ****   
 397:../SPL/src/stm32f10x_can.c ****   /* Initialize the no automatic retransmission */
 398:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 901              		.loc 1 398 0
 902 05a0 7B68     		ldr	r3, [r7, #4]
 903 05a2 4FF00002 		mov	r2, #0
 904 05a6 5A72     		strb	r2, [r3, #9]
 399:../SPL/src/stm32f10x_can.c ****   
 400:../SPL/src/stm32f10x_can.c ****   /* Initialize the receive FIFO locked mode */
 401:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 905              		.loc 1 401 0
 906 05a8 7B68     		ldr	r3, [r7, #4]
 907 05aa 4FF00002 		mov	r2, #0
 908 05ae 9A72     		strb	r2, [r3, #10]
 402:../SPL/src/stm32f10x_can.c ****   
 403:../SPL/src/stm32f10x_can.c ****   /* Initialize the transmit FIFO priority */
 404:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 909              		.loc 1 404 0
 910 05b0 7B68     		ldr	r3, [r7, #4]
 911 05b2 4FF00002 		mov	r2, #0
 912 05b6 DA72     		strb	r2, [r3, #11]
 405:../SPL/src/stm32f10x_can.c ****   
 406:../SPL/src/stm32f10x_can.c ****   /* Initialize the CAN_Mode member */
 407:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 913              		.loc 1 407 0
 914 05b8 7B68     		ldr	r3, [r7, #4]
 915 05ba 4FF00002 		mov	r2, #0
 916 05be 9A70     		strb	r2, [r3, #2]
 408:../SPL/src/stm32f10x_can.c ****   
 409:../SPL/src/stm32f10x_can.c ****   /* Initialize the CAN_SJW member */
 410:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 917              		.loc 1 410 0
 918 05c0 7B68     		ldr	r3, [r7, #4]
 919 05c2 4FF00002 		mov	r2, #0
 920 05c6 DA70     		strb	r2, [r3, #3]
 411:../SPL/src/stm32f10x_can.c ****   
 412:../SPL/src/stm32f10x_can.c ****   /* Initialize the CAN_BS1 member */
 413:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 921              		.loc 1 413 0
 922 05c8 7B68     		ldr	r3, [r7, #4]
 923 05ca 4FF00302 		mov	r2, #3
 924 05ce 1A71     		strb	r2, [r3, #4]
 414:../SPL/src/stm32f10x_can.c ****   
 415:../SPL/src/stm32f10x_can.c ****   /* Initialize the CAN_BS2 member */
 416:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 925              		.loc 1 416 0
 926 05d0 7B68     		ldr	r3, [r7, #4]
 927 05d2 4FF00202 		mov	r2, #2
 928 05d6 5A71     		strb	r2, [r3, #5]
 417:../SPL/src/stm32f10x_can.c ****   
 418:../SPL/src/stm32f10x_can.c ****   /* Initialize the CAN_Prescaler member */
 419:../SPL/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 929              		.loc 1 419 0
 930 05d8 7B68     		ldr	r3, [r7, #4]
 931 05da 4FF00102 		mov	r2, #1
 932 05de 1A80     		strh	r2, [r3, #0]	@ movhi
 420:../SPL/src/stm32f10x_can.c **** }
 933              		.loc 1 420 0
 934 05e0 07F10C07 		add	r7, r7, #12
 935 05e4 BD46     		mov	sp, r7
 936 05e6 80BC     		pop	{r7}
 937 05e8 7047     		bx	lr
 938              		.cfi_endproc
 939              	.LFE32:
 941 05ea 00BF     		.align	2
 942              		.global	CAN_SlaveStartBank
 943              		.thumb
 944              		.thumb_func
 946              	CAN_SlaveStartBank:
 947              	.LFB33:
 421:../SPL/src/stm32f10x_can.c **** 
 422:../SPL/src/stm32f10x_can.c **** /**
 423:../SPL/src/stm32f10x_can.c ****   * @brief  Select the start bank filter for slave CAN.
 424:../SPL/src/stm32f10x_can.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 425:../SPL/src/stm32f10x_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 426:../SPL/src/stm32f10x_can.c ****   * @retval None.
 427:../SPL/src/stm32f10x_can.c ****   */
 428:../SPL/src/stm32f10x_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 429:../SPL/src/stm32f10x_can.c **** {
 948              		.loc 1 429 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 8
 951              		@ frame_needed = 1, uses_anonymous_args = 0
 952 05ec 80B5     		push	{r7, lr}
 953              	.LCFI12:
 954              		.cfi_def_cfa_offset 8
 955              		.cfi_offset 7, -8
 956              		.cfi_offset 14, -4
 957 05ee 82B0     		sub	sp, sp, #8
 958              	.LCFI13:
 959              		.cfi_def_cfa_offset 16
 960 05f0 00AF     		add	r7, sp, #0
 961              	.LCFI14:
 962              		.cfi_def_cfa_register 7
 963 05f2 0346     		mov	r3, r0
 964 05f4 FB71     		strb	r3, [r7, #7]
 430:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 431:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 965              		.loc 1 431 0
 966 05f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 967 05f8 002B     		cmp	r3, #0
 968 05fa 02D0     		beq	.L62
 969              		.loc 1 431 0 is_stmt 0 discriminator 2
 970 05fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 971 05fe 1B2B     		cmp	r3, #27
 972 0600 04D9     		bls	.L63
 973              	.L62:
 974              		.loc 1 431 0 discriminator 1
 975 0602 1648     		ldr	r0, .L64
 976 0604 40F2AF11 		movw	r1, #431
 977 0608 FFF7FEFF 		bl	assert_failed
 978              	.L63:
 432:../SPL/src/stm32f10x_can.c ****   
 433:../SPL/src/stm32f10x_can.c ****   /* Enter Initialisation mode for the filter */
 434:../SPL/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 979              		.loc 1 434 0 is_stmt 1
 980 060c 144B     		ldr	r3, .L64+4
 981 060e 144A     		ldr	r2, .L64+4
 982 0610 D2F80022 		ldr	r2, [r2, #512]
 983 0614 42F00102 		orr	r2, r2, #1
 984 0618 C3F80022 		str	r2, [r3, #512]
 435:../SPL/src/stm32f10x_can.c ****   
 436:../SPL/src/stm32f10x_can.c ****   /* Select the start slave bank */
 437:../SPL/src/stm32f10x_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 985              		.loc 1 437 0
 986 061c 104A     		ldr	r2, .L64+4
 987 061e 104B     		ldr	r3, .L64+4
 988 0620 D3F80032 		ldr	r3, [r3, #512]
 989 0624 23F47C53 		bic	r3, r3, #16128
 990 0628 23F00E03 		bic	r3, r3, #14
 991 062c C2F80032 		str	r3, [r2, #512]
 438:../SPL/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 992              		.loc 1 438 0
 993 0630 0B4B     		ldr	r3, .L64+4
 994 0632 0B4A     		ldr	r2, .L64+4
 995 0634 D2F80012 		ldr	r1, [r2, #512]
 996 0638 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 997 063a 4FEA0222 		lsl	r2, r2, #8
 998 063e 0A43     		orrs	r2, r2, r1
 999 0640 C3F80022 		str	r2, [r3, #512]
 439:../SPL/src/stm32f10x_can.c ****   
 440:../SPL/src/stm32f10x_can.c ****   /* Leave Initialisation mode for the filter */
 441:../SPL/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 1000              		.loc 1 441 0
 1001 0644 064B     		ldr	r3, .L64+4
 1002 0646 064A     		ldr	r2, .L64+4
 1003 0648 D2F80022 		ldr	r2, [r2, #512]
 1004 064c 22F00102 		bic	r2, r2, #1
 1005 0650 C3F80022 		str	r2, [r3, #512]
 442:../SPL/src/stm32f10x_can.c **** }
 1006              		.loc 1 442 0
 1007 0654 07F10807 		add	r7, r7, #8
 1008 0658 BD46     		mov	sp, r7
 1009 065a 80BD     		pop	{r7, pc}
 1010              	.L65:
 1011              		.align	2
 1012              	.L64:
 1013 065c 00000000 		.word	.LC0
 1014 0660 00640040 		.word	1073767424
 1015              		.cfi_endproc
 1016              	.LFE33:
 1018              		.align	2
 1019              		.global	CAN_DBGFreeze
 1020              		.thumb
 1021              		.thumb_func
 1023              	CAN_DBGFreeze:
 1024              	.LFB34:
 443:../SPL/src/stm32f10x_can.c **** 
 444:../SPL/src/stm32f10x_can.c **** /**
 445:../SPL/src/stm32f10x_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 446:../SPL/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
 447:../SPL/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN peripheral. This parameter can 
 448:../SPL/src/stm32f10x_can.c ****   *                   be: ENABLE or DISABLE.
 449:../SPL/src/stm32f10x_can.c ****   * @retval None.
 450:../SPL/src/stm32f10x_can.c ****   */
 451:../SPL/src/stm32f10x_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 452:../SPL/src/stm32f10x_can.c **** {
 1025              		.loc 1 452 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 8
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 0664 80B5     		push	{r7, lr}
 1030              	.LCFI15:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 7, -8
 1033              		.cfi_offset 14, -4
 1034 0666 82B0     		sub	sp, sp, #8
 1035              	.LCFI16:
 1036              		.cfi_def_cfa_offset 16
 1037 0668 00AF     		add	r7, sp, #0
 1038              	.LCFI17:
 1039              		.cfi_def_cfa_register 7
 1040 066a 7860     		str	r0, [r7, #4]
 1041 066c 0B46     		mov	r3, r1
 1042 066e FB70     		strb	r3, [r7, #3]
 453:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 454:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 1043              		.loc 1 454 0
 1044 0670 7A68     		ldr	r2, [r7, #4]
 1045 0672 154B     		ldr	r3, .L71
 1046 0674 9A42     		cmp	r2, r3
 1047 0676 08D0     		beq	.L67
 1048              		.loc 1 454 0 is_stmt 0 discriminator 1
 1049 0678 7A68     		ldr	r2, [r7, #4]
 1050 067a 144B     		ldr	r3, .L71+4
 1051 067c 9A42     		cmp	r2, r3
 1052 067e 04D0     		beq	.L67
 1053              		.loc 1 454 0 discriminator 2
 1054 0680 1348     		ldr	r0, .L71+8
 1055 0682 4FF4E371 		mov	r1, #454
 1056 0686 FFF7FEFF 		bl	assert_failed
 1057              	.L67:
 455:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1058              		.loc 1 455 0 is_stmt 1
 1059 068a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1060 068c 002B     		cmp	r3, #0
 1061 068e 07D0     		beq	.L68
 1062              		.loc 1 455 0 is_stmt 0 discriminator 1
 1063 0690 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1064 0692 012B     		cmp	r3, #1
 1065 0694 04D0     		beq	.L68
 1066              		.loc 1 455 0 discriminator 2
 1067 0696 0E48     		ldr	r0, .L71+8
 1068 0698 40F2C711 		movw	r1, #455
 1069 069c FFF7FEFF 		bl	assert_failed
 1070              	.L68:
 456:../SPL/src/stm32f10x_can.c ****   
 457:../SPL/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 1071              		.loc 1 457 0 is_stmt 1
 1072 06a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1073 06a2 002B     		cmp	r3, #0
 1074 06a4 06D0     		beq	.L69
 458:../SPL/src/stm32f10x_can.c ****   {
 459:../SPL/src/stm32f10x_can.c ****     /* Enable Debug Freeze  */
 460:../SPL/src/stm32f10x_can.c ****     CANx->MCR |= MCR_DBF;
 1075              		.loc 1 460 0
 1076 06a6 7B68     		ldr	r3, [r7, #4]
 1077 06a8 1B68     		ldr	r3, [r3, #0]
 1078 06aa 43F48032 		orr	r2, r3, #65536
 1079 06ae 7B68     		ldr	r3, [r7, #4]
 1080 06b0 1A60     		str	r2, [r3, #0]
 1081 06b2 05E0     		b	.L66
 1082              	.L69:
 461:../SPL/src/stm32f10x_can.c ****   }
 462:../SPL/src/stm32f10x_can.c ****   else
 463:../SPL/src/stm32f10x_can.c ****   {
 464:../SPL/src/stm32f10x_can.c ****     /* Disable Debug Freeze */
 465:../SPL/src/stm32f10x_can.c ****     CANx->MCR &= ~MCR_DBF;
 1083              		.loc 1 465 0
 1084 06b4 7B68     		ldr	r3, [r7, #4]
 1085 06b6 1B68     		ldr	r3, [r3, #0]
 1086 06b8 23F48032 		bic	r2, r3, #65536
 1087 06bc 7B68     		ldr	r3, [r7, #4]
 1088 06be 1A60     		str	r2, [r3, #0]
 1089              	.L66:
 466:../SPL/src/stm32f10x_can.c ****   }
 467:../SPL/src/stm32f10x_can.c **** }
 1090              		.loc 1 467 0
 1091 06c0 07F10807 		add	r7, r7, #8
 1092 06c4 BD46     		mov	sp, r7
 1093 06c6 80BD     		pop	{r7, pc}
 1094              	.L72:
 1095              		.align	2
 1096              	.L71:
 1097 06c8 00640040 		.word	1073767424
 1098 06cc 00680040 		.word	1073768448
 1099 06d0 00000000 		.word	.LC0
 1100              		.cfi_endproc
 1101              	.LFE34:
 1103              		.align	2
 1104              		.global	CAN_TTComModeCmd
 1105              		.thumb
 1106              		.thumb_func
 1108              	CAN_TTComModeCmd:
 1109              	.LFB35:
 468:../SPL/src/stm32f10x_can.c **** 
 469:../SPL/src/stm32f10x_can.c **** 
 470:../SPL/src/stm32f10x_can.c **** /**
 471:../SPL/src/stm32f10x_can.c ****   * @brief  Enables or disabes the CAN Time TriggerOperation communication mode.
 472:../SPL/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 473:../SPL/src/stm32f10x_can.c ****   * @param  NewState : Mode new state , can be one of @ref FunctionalState.
 474:../SPL/src/stm32f10x_can.c ****   * @note   when enabled, Time stamp (TIME[15:0]) value is sent in the last 
 475:../SPL/src/stm32f10x_can.c ****   *         two data bytes of the 8-byte message: TIME[7:0] in data byte 6 
 476:../SPL/src/stm32f10x_can.c ****   *         and TIME[15:8] in data byte 7 
 477:../SPL/src/stm32f10x_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 478:../SPL/src/stm32f10x_can.c ****   *         sent over the CAN bus.  
 479:../SPL/src/stm32f10x_can.c ****   * @retval None
 480:../SPL/src/stm32f10x_can.c ****   */
 481:../SPL/src/stm32f10x_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 482:../SPL/src/stm32f10x_can.c **** {
 1110              		.loc 1 482 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 8
 1113              		@ frame_needed = 1, uses_anonymous_args = 0
 1114 06d4 80B5     		push	{r7, lr}
 1115              	.LCFI18:
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119 06d6 82B0     		sub	sp, sp, #8
 1120              	.LCFI19:
 1121              		.cfi_def_cfa_offset 16
 1122 06d8 00AF     		add	r7, sp, #0
 1123              	.LCFI20:
 1124              		.cfi_def_cfa_register 7
 1125 06da 7860     		str	r0, [r7, #4]
 1126 06dc 0B46     		mov	r3, r1
 1127 06de FB70     		strb	r3, [r7, #3]
 483:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 484:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 1128              		.loc 1 484 0
 1129 06e0 7A68     		ldr	r2, [r7, #4]
 1130 06e2 2D4B     		ldr	r3, .L78
 1131 06e4 9A42     		cmp	r2, r3
 1132 06e6 08D0     		beq	.L74
 1133              		.loc 1 484 0 is_stmt 0 discriminator 1
 1134 06e8 7A68     		ldr	r2, [r7, #4]
 1135 06ea 2C4B     		ldr	r3, .L78+4
 1136 06ec 9A42     		cmp	r2, r3
 1137 06ee 04D0     		beq	.L74
 1138              		.loc 1 484 0 discriminator 2
 1139 06f0 2B48     		ldr	r0, .L78+8
 1140 06f2 4FF4F271 		mov	r1, #484
 1141 06f6 FFF7FEFF 		bl	assert_failed
 1142              	.L74:
 485:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1143              		.loc 1 485 0 is_stmt 1
 1144 06fa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1145 06fc 002B     		cmp	r3, #0
 1146 06fe 07D0     		beq	.L75
 1147              		.loc 1 485 0 is_stmt 0 discriminator 1
 1148 0700 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1149 0702 012B     		cmp	r3, #1
 1150 0704 04D0     		beq	.L75
 1151              		.loc 1 485 0 discriminator 2
 1152 0706 2648     		ldr	r0, .L78+8
 1153 0708 40F2E511 		movw	r1, #485
 1154 070c FFF7FEFF 		bl	assert_failed
 1155              	.L75:
 486:../SPL/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 1156              		.loc 1 486 0 is_stmt 1
 1157 0710 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1158 0712 002B     		cmp	r3, #0
 1159 0714 1ED0     		beq	.L76
 487:../SPL/src/stm32f10x_can.c ****   {
 488:../SPL/src/stm32f10x_can.c ****     /* Enable the TTCM mode */
 489:../SPL/src/stm32f10x_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 1160              		.loc 1 489 0
 1161 0716 7B68     		ldr	r3, [r7, #4]
 1162 0718 1B68     		ldr	r3, [r3, #0]
 1163 071a 43F08002 		orr	r2, r3, #128
 1164 071e 7B68     		ldr	r3, [r7, #4]
 1165 0720 1A60     		str	r2, [r3, #0]
 490:../SPL/src/stm32f10x_can.c **** 
 491:../SPL/src/stm32f10x_can.c ****     /* Set TGT bits */
 492:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 1166              		.loc 1 492 0
 1167 0722 7B68     		ldr	r3, [r7, #4]
 1168 0724 D3F88431 		ldr	r3, [r3, #388]
 1169 0728 43F48072 		orr	r2, r3, #256
 1170 072c 7B68     		ldr	r3, [r7, #4]
 1171 072e C3F88421 		str	r2, [r3, #388]
 493:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 1172              		.loc 1 493 0
 1173 0732 7B68     		ldr	r3, [r7, #4]
 1174 0734 D3F89431 		ldr	r3, [r3, #404]
 1175 0738 43F48072 		orr	r2, r3, #256
 1176 073c 7B68     		ldr	r3, [r7, #4]
 1177 073e C3F89421 		str	r2, [r3, #404]
 494:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 1178              		.loc 1 494 0
 1179 0742 7B68     		ldr	r3, [r7, #4]
 1180 0744 D3F8A431 		ldr	r3, [r3, #420]
 1181 0748 43F48072 		orr	r2, r3, #256
 1182 074c 7B68     		ldr	r3, [r7, #4]
 1183 074e C3F8A421 		str	r2, [r3, #420]
 1184 0752 1DE0     		b	.L73
 1185              	.L76:
 495:../SPL/src/stm32f10x_can.c ****   }
 496:../SPL/src/stm32f10x_can.c ****   else
 497:../SPL/src/stm32f10x_can.c ****   {
 498:../SPL/src/stm32f10x_can.c ****     /* Disable the TTCM mode */
 499:../SPL/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 1186              		.loc 1 499 0
 1187 0754 7B68     		ldr	r3, [r7, #4]
 1188 0756 1B68     		ldr	r3, [r3, #0]
 1189 0758 23F08002 		bic	r2, r3, #128
 1190 075c 7B68     		ldr	r3, [r7, #4]
 1191 075e 1A60     		str	r2, [r3, #0]
 500:../SPL/src/stm32f10x_can.c **** 
 501:../SPL/src/stm32f10x_can.c ****     /* Reset TGT bits */
 502:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 1192              		.loc 1 502 0
 1193 0760 7B68     		ldr	r3, [r7, #4]
 1194 0762 D3F88431 		ldr	r3, [r3, #388]
 1195 0766 23F48072 		bic	r2, r3, #256
 1196 076a 7B68     		ldr	r3, [r7, #4]
 1197 076c C3F88421 		str	r2, [r3, #388]
 503:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 1198              		.loc 1 503 0
 1199 0770 7B68     		ldr	r3, [r7, #4]
 1200 0772 D3F89431 		ldr	r3, [r3, #404]
 1201 0776 23F48072 		bic	r2, r3, #256
 1202 077a 7B68     		ldr	r3, [r7, #4]
 1203 077c C3F89421 		str	r2, [r3, #404]
 504:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 1204              		.loc 1 504 0
 1205 0780 7B68     		ldr	r3, [r7, #4]
 1206 0782 D3F8A431 		ldr	r3, [r3, #420]
 1207 0786 23F48072 		bic	r2, r3, #256
 1208 078a 7B68     		ldr	r3, [r7, #4]
 1209 078c C3F8A421 		str	r2, [r3, #420]
 1210              	.L73:
 505:../SPL/src/stm32f10x_can.c ****   }
 506:../SPL/src/stm32f10x_can.c **** }
 1211              		.loc 1 506 0
 1212 0790 07F10807 		add	r7, r7, #8
 1213 0794 BD46     		mov	sp, r7
 1214 0796 80BD     		pop	{r7, pc}
 1215              	.L79:
 1216              		.align	2
 1217              	.L78:
 1218 0798 00640040 		.word	1073767424
 1219 079c 00680040 		.word	1073768448
 1220 07a0 00000000 		.word	.LC0
 1221              		.cfi_endproc
 1222              	.LFE35:
 1224              		.align	2
 1225              		.global	CAN_Transmit
 1226              		.thumb
 1227              		.thumb_func
 1229              	CAN_Transmit:
 1230              	.LFB36:
 507:../SPL/src/stm32f10x_can.c **** /**
 508:../SPL/src/stm32f10x_can.c ****   * @brief  Initiates the transmission of a message.
 509:../SPL/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 510:../SPL/src/stm32f10x_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN
 511:../SPL/src/stm32f10x_can.c ****   *                    DLC and CAN data.
 512:../SPL/src/stm32f10x_can.c ****   * @retval The number of the mailbox that is used for transmission
 513:../SPL/src/stm32f10x_can.c ****   *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
 514:../SPL/src/stm32f10x_can.c ****   */
 515:../SPL/src/stm32f10x_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 516:../SPL/src/stm32f10x_can.c **** {
 1231              		.loc 1 516 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 16
 1234              		@ frame_needed = 1, uses_anonymous_args = 0
 1235 07a4 80B5     		push	{r7, lr}
 1236              	.LCFI21:
 1237              		.cfi_def_cfa_offset 8
 1238              		.cfi_offset 7, -8
 1239              		.cfi_offset 14, -4
 1240 07a6 84B0     		sub	sp, sp, #16
 1241              	.LCFI22:
 1242              		.cfi_def_cfa_offset 24
 1243 07a8 00AF     		add	r7, sp, #0
 1244              	.LCFI23:
 1245              		.cfi_def_cfa_register 7
 1246 07aa 7860     		str	r0, [r7, #4]
 1247 07ac 3960     		str	r1, [r7, #0]
 517:../SPL/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 1248              		.loc 1 517 0
 1249 07ae 4FF00003 		mov	r3, #0
 1250 07b2 FB73     		strb	r3, [r7, #15]
 518:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 519:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 1251              		.loc 1 519 0
 1252 07b4 7A68     		ldr	r2, [r7, #4]
 1253 07b6 954B     		ldr	r3, .L95
 1254 07b8 9A42     		cmp	r2, r3
 1255 07ba 08D0     		beq	.L81
 1256              		.loc 1 519 0 is_stmt 0 discriminator 1
 1257 07bc 7A68     		ldr	r2, [r7, #4]
 1258 07be 944B     		ldr	r3, .L95+4
 1259 07c0 9A42     		cmp	r2, r3
 1260 07c2 04D0     		beq	.L81
 1261              		.loc 1 519 0 discriminator 2
 1262 07c4 9348     		ldr	r0, .L95+8
 1263 07c6 40F20721 		movw	r1, #519
 1264 07ca FFF7FEFF 		bl	assert_failed
 1265              	.L81:
 520:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 1266              		.loc 1 520 0 is_stmt 1
 1267 07ce 3B68     		ldr	r3, [r7, #0]
 1268 07d0 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1269 07d2 002B     		cmp	r3, #0
 1270 07d4 08D0     		beq	.L82
 1271              		.loc 1 520 0 is_stmt 0 discriminator 1
 1272 07d6 3B68     		ldr	r3, [r7, #0]
 1273 07d8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1274 07da 042B     		cmp	r3, #4
 1275 07dc 04D0     		beq	.L82
 1276              		.loc 1 520 0 discriminator 2
 1277 07de 8D48     		ldr	r0, .L95+8
 1278 07e0 4FF40271 		mov	r1, #520
 1279 07e4 FFF7FEFF 		bl	assert_failed
 1280              	.L82:
 521:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 1281              		.loc 1 521 0 is_stmt 1
 1282 07e8 3B68     		ldr	r3, [r7, #0]
 1283 07ea 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1284 07ec 002B     		cmp	r3, #0
 1285 07ee 08D0     		beq	.L83
 1286              		.loc 1 521 0 is_stmt 0 discriminator 1
 1287 07f0 3B68     		ldr	r3, [r7, #0]
 1288 07f2 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1289 07f4 022B     		cmp	r3, #2
 1290 07f6 04D0     		beq	.L83
 1291              		.loc 1 521 0 discriminator 2
 1292 07f8 8648     		ldr	r0, .L95+8
 1293 07fa 40F20921 		movw	r1, #521
 1294 07fe FFF7FEFF 		bl	assert_failed
 1295              	.L83:
 522:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 1296              		.loc 1 522 0 is_stmt 1
 1297 0802 3B68     		ldr	r3, [r7, #0]
 1298 0804 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1299 0806 082B     		cmp	r3, #8
 1300 0808 04D9     		bls	.L84
 1301              		.loc 1 522 0 is_stmt 0 discriminator 1
 1302 080a 8248     		ldr	r0, .L95+8
 1303 080c 40F20A21 		movw	r1, #522
 1304 0810 FFF7FEFF 		bl	assert_failed
 1305              	.L84:
 523:../SPL/src/stm32f10x_can.c **** 
 524:../SPL/src/stm32f10x_can.c ****   /* Select one empty transmit mailbox */
 525:../SPL/src/stm32f10x_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 1306              		.loc 1 525 0 is_stmt 1
 1307 0814 7B68     		ldr	r3, [r7, #4]
 1308 0816 9B68     		ldr	r3, [r3, #8]
 1309 0818 03F08063 		and	r3, r3, #67108864
 1310 081c 002B     		cmp	r3, #0
 1311 081e 03D0     		beq	.L85
 526:../SPL/src/stm32f10x_can.c ****   {
 527:../SPL/src/stm32f10x_can.c ****     transmit_mailbox = 0;
 1312              		.loc 1 527 0
 1313 0820 4FF00003 		mov	r3, #0
 1314 0824 FB73     		strb	r3, [r7, #15]
 1315 0826 16E0     		b	.L86
 1316              	.L85:
 528:../SPL/src/stm32f10x_can.c ****   }
 529:../SPL/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 1317              		.loc 1 529 0
 1318 0828 7B68     		ldr	r3, [r7, #4]
 1319 082a 9B68     		ldr	r3, [r3, #8]
 1320 082c 03F00063 		and	r3, r3, #134217728
 1321 0830 002B     		cmp	r3, #0
 1322 0832 03D0     		beq	.L87
 530:../SPL/src/stm32f10x_can.c ****   {
 531:../SPL/src/stm32f10x_can.c ****     transmit_mailbox = 1;
 1323              		.loc 1 531 0
 1324 0834 4FF00103 		mov	r3, #1
 1325 0838 FB73     		strb	r3, [r7, #15]
 1326 083a 0CE0     		b	.L86
 1327              	.L87:
 532:../SPL/src/stm32f10x_can.c ****   }
 533:../SPL/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 1328              		.loc 1 533 0
 1329 083c 7B68     		ldr	r3, [r7, #4]
 1330 083e 9B68     		ldr	r3, [r3, #8]
 1331 0840 03F08053 		and	r3, r3, #268435456
 1332 0844 002B     		cmp	r3, #0
 1333 0846 03D0     		beq	.L88
 534:../SPL/src/stm32f10x_can.c ****   {
 535:../SPL/src/stm32f10x_can.c ****     transmit_mailbox = 2;
 1334              		.loc 1 535 0
 1335 0848 4FF00203 		mov	r3, #2
 1336 084c FB73     		strb	r3, [r7, #15]
 1337 084e 02E0     		b	.L86
 1338              	.L88:
 536:../SPL/src/stm32f10x_can.c ****   }
 537:../SPL/src/stm32f10x_can.c ****   else
 538:../SPL/src/stm32f10x_can.c ****   {
 539:../SPL/src/stm32f10x_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 1339              		.loc 1 539 0
 1340 0850 4FF00403 		mov	r3, #4
 1341 0854 FB73     		strb	r3, [r7, #15]
 1342              	.L86:
 540:../SPL/src/stm32f10x_can.c ****   }
 541:../SPL/src/stm32f10x_can.c **** 
 542:../SPL/src/stm32f10x_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 1343              		.loc 1 542 0
 1344 0856 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1345 0858 042B     		cmp	r3, #4
 1346 085a 00F0D080 		beq	.L89
 543:../SPL/src/stm32f10x_can.c ****   {
 544:../SPL/src/stm32f10x_can.c ****     /* Set up the Id */
 545:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 1347              		.loc 1 545 0
 1348 085e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1349 0860 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1350 0862 7968     		ldr	r1, [r7, #4]
 1351 0864 02F11802 		add	r2, r2, #24
 1352 0868 4FEA0212 		lsl	r2, r2, #4
 1353 086c 8A18     		adds	r2, r1, r2
 1354 086e 1268     		ldr	r2, [r2, #0]
 1355 0870 02F00102 		and	r2, r2, #1
 1356 0874 7968     		ldr	r1, [r7, #4]
 1357 0876 03F11803 		add	r3, r3, #24
 1358 087a 4FEA0313 		lsl	r3, r3, #4
 1359 087e CB18     		adds	r3, r1, r3
 1360 0880 1A60     		str	r2, [r3, #0]
 546:../SPL/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 1361              		.loc 1 546 0
 1362 0882 3B68     		ldr	r3, [r7, #0]
 1363 0884 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1364 0886 002B     		cmp	r3, #0
 1365 0888 23D1     		bne	.L90
 547:../SPL/src/stm32f10x_can.c ****     {
 548:../SPL/src/stm32f10x_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 1366              		.loc 1 548 0
 1367 088a 3B68     		ldr	r3, [r7, #0]
 1368 088c 1A68     		ldr	r2, [r3, #0]
 1369 088e 40F2FF73 		movw	r3, #2047
 1370 0892 9A42     		cmp	r2, r3
 1371 0894 04D9     		bls	.L91
 1372              		.loc 1 548 0 is_stmt 0 discriminator 1
 1373 0896 5F48     		ldr	r0, .L95+8
 1374 0898 4FF40971 		mov	r1, #548
 1375 089c FFF7FEFF 		bl	assert_failed
 1376              	.L91:
 549:../SPL/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 1377              		.loc 1 549 0 is_stmt 1
 1378 08a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1379 08a2 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1380 08a4 7968     		ldr	r1, [r7, #4]
 1381 08a6 02F11802 		add	r2, r2, #24
 1382 08aa 4FEA0212 		lsl	r2, r2, #4
 1383 08ae 8A18     		adds	r2, r1, r2
 1384 08b0 1168     		ldr	r1, [r2, #0]
 1385 08b2 3A68     		ldr	r2, [r7, #0]
 1386 08b4 1268     		ldr	r2, [r2, #0]
 1387 08b6 4FEA4250 		lsl	r0, r2, #21
 550:../SPL/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 1388              		.loc 1 550 0
 1389 08ba 3A68     		ldr	r2, [r7, #0]
 1390 08bc 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 549:../SPL/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 1391              		.loc 1 549 0
 1392 08be 0243     		orrs	r2, r2, r0
 1393 08c0 0A43     		orrs	r2, r2, r1
 1394 08c2 7968     		ldr	r1, [r7, #4]
 1395 08c4 03F11803 		add	r3, r3, #24
 1396 08c8 4FEA0313 		lsl	r3, r3, #4
 1397 08cc CB18     		adds	r3, r1, r3
 1398 08ce 1A60     		str	r2, [r3, #0]
 1399 08d0 25E0     		b	.L92
 1400              	.L90:
 551:../SPL/src/stm32f10x_can.c ****     }
 552:../SPL/src/stm32f10x_can.c ****     else
 553:../SPL/src/stm32f10x_can.c ****     {
 554:../SPL/src/stm32f10x_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 1401              		.loc 1 554 0
 1402 08d2 3B68     		ldr	r3, [r7, #0]
 1403 08d4 5A68     		ldr	r2, [r3, #4]
 1404 08d6 6FF06043 		mvn	r3, #-536870912
 1405 08da 9A42     		cmp	r2, r3
 1406 08dc 04D9     		bls	.L93
 1407              		.loc 1 554 0 is_stmt 0 discriminator 1
 1408 08de 4D48     		ldr	r0, .L95+8
 1409 08e0 40F22A21 		movw	r1, #554
 1410 08e4 FFF7FEFF 		bl	assert_failed
 1411              	.L93:
 555:../SPL/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 1412              		.loc 1 555 0 is_stmt 1
 1413 08e8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1414 08ea FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1415 08ec 7968     		ldr	r1, [r7, #4]
 1416 08ee 02F11802 		add	r2, r2, #24
 1417 08f2 4FEA0212 		lsl	r2, r2, #4
 1418 08f6 8A18     		adds	r2, r1, r2
 1419 08f8 1168     		ldr	r1, [r2, #0]
 1420 08fa 3A68     		ldr	r2, [r7, #0]
 1421 08fc 5268     		ldr	r2, [r2, #4]
 1422 08fe 4FEAC200 		lsl	r0, r2, #3
 556:../SPL/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 1423              		.loc 1 556 0
 1424 0902 3A68     		ldr	r2, [r7, #0]
 1425 0904 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 555:../SPL/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 1426              		.loc 1 555 0
 1427 0906 1043     		orrs	r0, r0, r2
 557:../SPL/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 1428              		.loc 1 557 0
 1429 0908 3A68     		ldr	r2, [r7, #0]
 1430 090a 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 556:../SPL/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 1431              		.loc 1 556 0
 1432 090c 0243     		orrs	r2, r2, r0
 555:../SPL/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 1433              		.loc 1 555 0
 1434 090e 0A43     		orrs	r2, r2, r1
 1435 0910 7968     		ldr	r1, [r7, #4]
 1436 0912 03F11803 		add	r3, r3, #24
 1437 0916 4FEA0313 		lsl	r3, r3, #4
 1438 091a CB18     		adds	r3, r1, r3
 1439 091c 1A60     		str	r2, [r3, #0]
 1440              	.L92:
 558:../SPL/src/stm32f10x_can.c ****     }
 559:../SPL/src/stm32f10x_can.c ****     
 560:../SPL/src/stm32f10x_can.c ****     /* Set up the DLC */
 561:../SPL/src/stm32f10x_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 1441              		.loc 1 561 0
 1442 091e 3B68     		ldr	r3, [r7, #0]
 1443 0920 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1444 0922 03F00F03 		and	r3, r3, #15
 1445 0926 DAB2     		uxtb	r2, r3
 1446 0928 3B68     		ldr	r3, [r7, #0]
 1447 092a 9A72     		strb	r2, [r3, #10]
 562:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 1448              		.loc 1 562 0
 1449 092c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1450 092e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1451 0930 7968     		ldr	r1, [r7, #4]
 1452 0932 02F11802 		add	r2, r2, #24
 1453 0936 4FEA0212 		lsl	r2, r2, #4
 1454 093a 8A18     		adds	r2, r1, r2
 1455 093c 5268     		ldr	r2, [r2, #4]
 1456 093e 22F00F02 		bic	r2, r2, #15
 1457 0942 7968     		ldr	r1, [r7, #4]
 1458 0944 03F11803 		add	r3, r3, #24
 1459 0948 4FEA0313 		lsl	r3, r3, #4
 1460 094c CB18     		adds	r3, r1, r3
 1461 094e 5A60     		str	r2, [r3, #4]
 563:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 1462              		.loc 1 563 0
 1463 0950 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1464 0952 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1465 0954 7968     		ldr	r1, [r7, #4]
 1466 0956 02F11802 		add	r2, r2, #24
 1467 095a 4FEA0212 		lsl	r2, r2, #4
 1468 095e 8A18     		adds	r2, r1, r2
 1469 0960 5168     		ldr	r1, [r2, #4]
 1470 0962 3A68     		ldr	r2, [r7, #0]
 1471 0964 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 1472 0966 0A43     		orrs	r2, r2, r1
 1473 0968 7968     		ldr	r1, [r7, #4]
 1474 096a 03F11803 		add	r3, r3, #24
 1475 096e 4FEA0313 		lsl	r3, r3, #4
 1476 0972 CB18     		adds	r3, r1, r3
 1477 0974 5A60     		str	r2, [r3, #4]
 564:../SPL/src/stm32f10x_can.c **** 
 565:../SPL/src/stm32f10x_can.c ****     /* Set up the data field */
 566:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 1478              		.loc 1 566 0
 1479 0976 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1480 0978 3A68     		ldr	r2, [r7, #0]
 1481 097a 927B     		ldrb	r2, [r2, #14]	@ zero_extendqisi2
 1482 097c 4FEA0261 		lsl	r1, r2, #24
 567:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1483              		.loc 1 567 0
 1484 0980 3A68     		ldr	r2, [r7, #0]
 1485 0982 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 1486 0984 4FEA0242 		lsl	r2, r2, #16
 566:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 1487              		.loc 1 566 0
 1488 0988 1143     		orrs	r1, r1, r2
 568:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 1489              		.loc 1 568 0
 1490 098a 3A68     		ldr	r2, [r7, #0]
 1491 098c 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 1492 098e 4FEA0222 		lsl	r2, r2, #8
 567:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1493              		.loc 1 567 0
 1494 0992 1143     		orrs	r1, r1, r2
 569:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 1495              		.loc 1 569 0
 1496 0994 3A68     		ldr	r2, [r7, #0]
 1497 0996 D27A     		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 568:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 1498              		.loc 1 568 0
 1499 0998 0A43     		orrs	r2, r2, r1
 566:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 1500              		.loc 1 566 0
 1501 099a 7968     		ldr	r1, [r7, #4]
 1502 099c 4FEA0313 		lsl	r3, r3, #4
 1503 09a0 CB18     		adds	r3, r1, r3
 1504 09a2 03F5C473 		add	r3, r3, #392
 1505 09a6 1A60     		str	r2, [r3, #0]
 570:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 1506              		.loc 1 570 0
 1507 09a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1508 09aa 3A68     		ldr	r2, [r7, #0]
 1509 09ac 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 1510 09ae 4FEA0261 		lsl	r1, r2, #24
 571:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 1511              		.loc 1 571 0
 1512 09b2 3A68     		ldr	r2, [r7, #0]
 1513 09b4 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 1514 09b6 4FEA0242 		lsl	r2, r2, #16
 570:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 1515              		.loc 1 570 0
 1516 09ba 1143     		orrs	r1, r1, r2
 572:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 1517              		.loc 1 572 0
 1518 09bc 3A68     		ldr	r2, [r7, #0]
 1519 09be 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 1520 09c0 4FEA0222 		lsl	r2, r2, #8
 571:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 1521              		.loc 1 571 0
 1522 09c4 1143     		orrs	r1, r1, r2
 573:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 1523              		.loc 1 573 0
 1524 09c6 3A68     		ldr	r2, [r7, #0]
 1525 09c8 D27B     		ldrb	r2, [r2, #15]	@ zero_extendqisi2
 572:../SPL/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 1526              		.loc 1 572 0
 1527 09ca 0A43     		orrs	r2, r2, r1
 570:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 1528              		.loc 1 570 0
 1529 09cc 7968     		ldr	r1, [r7, #4]
 1530 09ce 4FEA0313 		lsl	r3, r3, #4
 1531 09d2 CB18     		adds	r3, r1, r3
 1532 09d4 03F5C473 		add	r3, r3, #392
 1533 09d8 5A60     		str	r2, [r3, #4]
 574:../SPL/src/stm32f10x_can.c ****     /* Request transmission */
 575:../SPL/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 1534              		.loc 1 575 0
 1535 09da FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1536 09dc FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1537 09de 7968     		ldr	r1, [r7, #4]
 1538 09e0 02F11802 		add	r2, r2, #24
 1539 09e4 4FEA0212 		lsl	r2, r2, #4
 1540 09e8 8A18     		adds	r2, r1, r2
 1541 09ea 1268     		ldr	r2, [r2, #0]
 1542 09ec 42F00102 		orr	r2, r2, #1
 1543 09f0 7968     		ldr	r1, [r7, #4]
 1544 09f2 03F11803 		add	r3, r3, #24
 1545 09f6 4FEA0313 		lsl	r3, r3, #4
 1546 09fa CB18     		adds	r3, r1, r3
 1547 09fc 1A60     		str	r2, [r3, #0]
 1548              	.L89:
 576:../SPL/src/stm32f10x_can.c ****   }
 577:../SPL/src/stm32f10x_can.c ****   return transmit_mailbox;
 1549              		.loc 1 577 0
 1550 09fe FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 578:../SPL/src/stm32f10x_can.c **** }
 1551              		.loc 1 578 0
 1552 0a00 1846     		mov	r0, r3
 1553 0a02 07F11007 		add	r7, r7, #16
 1554 0a06 BD46     		mov	sp, r7
 1555 0a08 80BD     		pop	{r7, pc}
 1556              	.L96:
 1557 0a0a 00BF     		.align	2
 1558              	.L95:
 1559 0a0c 00640040 		.word	1073767424
 1560 0a10 00680040 		.word	1073768448
 1561 0a14 00000000 		.word	.LC0
 1562              		.cfi_endproc
 1563              	.LFE36:
 1565              		.align	2
 1566              		.global	CAN_TransmitStatus
 1567              		.thumb
 1568              		.thumb_func
 1570              	CAN_TransmitStatus:
 1571              	.LFB37:
 579:../SPL/src/stm32f10x_can.c **** 
 580:../SPL/src/stm32f10x_can.c **** /**
 581:../SPL/src/stm32f10x_can.c ****   * @brief  Checks the transmission of a message.
 582:../SPL/src/stm32f10x_can.c ****   * @param  CANx:            where x can be 1 or 2 to to select the 
 583:../SPL/src/stm32f10x_can.c ****   *                          CAN peripheral.
 584:../SPL/src/stm32f10x_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for 
 585:../SPL/src/stm32f10x_can.c ****   *                          transmission.
 586:../SPL/src/stm32f10x_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, CAN_TxStatus_Failed 
 587:../SPL/src/stm32f10x_can.c ****   *         in an other case.
 588:../SPL/src/stm32f10x_can.c ****   */
 589:../SPL/src/stm32f10x_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 590:../SPL/src/stm32f10x_can.c **** {
 1572              		.loc 1 590 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 16
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576 0a18 80B5     		push	{r7, lr}
 1577              	.LCFI24:
 1578              		.cfi_def_cfa_offset 8
 1579              		.cfi_offset 7, -8
 1580              		.cfi_offset 14, -4
 1581 0a1a 84B0     		sub	sp, sp, #16
 1582              	.LCFI25:
 1583              		.cfi_def_cfa_offset 24
 1584 0a1c 00AF     		add	r7, sp, #0
 1585              	.LCFI26:
 1586              		.cfi_def_cfa_register 7
 1587 0a1e 7860     		str	r0, [r7, #4]
 1588 0a20 0B46     		mov	r3, r1
 1589 0a22 FB70     		strb	r3, [r7, #3]
 591:../SPL/src/stm32f10x_can.c ****   uint32_t state = 0;
 1590              		.loc 1 591 0
 1591 0a24 4FF00003 		mov	r3, #0
 1592 0a28 FB60     		str	r3, [r7, #12]
 592:../SPL/src/stm32f10x_can.c **** 
 593:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 594:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 1593              		.loc 1 594 0
 1594 0a2a 7A68     		ldr	r2, [r7, #4]
 1595 0a2c 384B     		ldr	r3, .L117
 1596 0a2e 9A42     		cmp	r2, r3
 1597 0a30 08D0     		beq	.L98
 1598              		.loc 1 594 0 is_stmt 0 discriminator 1
 1599 0a32 7A68     		ldr	r2, [r7, #4]
 1600 0a34 374B     		ldr	r3, .L117+4
 1601 0a36 9A42     		cmp	r2, r3
 1602 0a38 04D0     		beq	.L98
 1603              		.loc 1 594 0 discriminator 2
 1604 0a3a 3748     		ldr	r0, .L117+8
 1605 0a3c 40F25221 		movw	r1, #594
 1606 0a40 FFF7FEFF 		bl	assert_failed
 1607              	.L98:
 595:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 1608              		.loc 1 595 0 is_stmt 1
 1609 0a44 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1610 0a46 022B     		cmp	r3, #2
 1611 0a48 04D9     		bls	.L99
 1612              		.loc 1 595 0 is_stmt 0 discriminator 1
 1613 0a4a 3348     		ldr	r0, .L117+8
 1614 0a4c 40F25321 		movw	r1, #595
 1615 0a50 FFF7FEFF 		bl	assert_failed
 1616              	.L99:
 596:../SPL/src/stm32f10x_can.c ****  
 597:../SPL/src/stm32f10x_can.c ****   switch (TransmitMailbox)
 1617              		.loc 1 597 0 is_stmt 1
 1618 0a54 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1619 0a56 012B     		cmp	r3, #1
 1620 0a58 09D0     		beq	.L102
 1621 0a5a 022B     		cmp	r3, #2
 1622 0a5c 0DD0     		beq	.L103
 1623 0a5e 002B     		cmp	r3, #0
 1624 0a60 11D1     		bne	.L116
 1625              	.L101:
 598:../SPL/src/stm32f10x_can.c ****   {
 599:../SPL/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): 
 600:../SPL/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 1626              		.loc 1 600 0
 1627 0a62 7B68     		ldr	r3, [r7, #4]
 1628 0a64 9A68     		ldr	r2, [r3, #8]
 1629 0a66 2D4B     		ldr	r3, .L117+12
 1630 0a68 1340     		ands	r3, r3, r2
 1631 0a6a FB60     		str	r3, [r7, #12]
 601:../SPL/src/stm32f10x_can.c ****       break;
 1632              		.loc 1 601 0
 1633 0a6c 0FE0     		b	.L104
 1634              	.L102:
 602:../SPL/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): 
 603:../SPL/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 1635              		.loc 1 603 0
 1636 0a6e 7B68     		ldr	r3, [r7, #4]
 1637 0a70 9A68     		ldr	r2, [r3, #8]
 1638 0a72 2B4B     		ldr	r3, .L117+16
 1639 0a74 1340     		ands	r3, r3, r2
 1640 0a76 FB60     		str	r3, [r7, #12]
 604:../SPL/src/stm32f10x_can.c ****       break;
 1641              		.loc 1 604 0
 1642 0a78 09E0     		b	.L104
 1643              	.L103:
 605:../SPL/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 606:../SPL/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 1644              		.loc 1 606 0
 1645 0a7a 7B68     		ldr	r3, [r7, #4]
 1646 0a7c 9A68     		ldr	r2, [r3, #8]
 1647 0a7e 294B     		ldr	r3, .L117+20
 1648 0a80 1340     		ands	r3, r3, r2
 1649 0a82 FB60     		str	r3, [r7, #12]
 607:../SPL/src/stm32f10x_can.c ****       break;
 1650              		.loc 1 607 0
 1651 0a84 03E0     		b	.L104
 1652              	.L116:
 608:../SPL/src/stm32f10x_can.c ****     default:
 609:../SPL/src/stm32f10x_can.c ****       state = CAN_TxStatus_Failed;
 1653              		.loc 1 609 0
 1654 0a86 4FF00003 		mov	r3, #0
 1655 0a8a FB60     		str	r3, [r7, #12]
 610:../SPL/src/stm32f10x_can.c ****       break;
 1656              		.loc 1 610 0
 1657 0a8c 00BF     		nop
 1658              	.L104:
 611:../SPL/src/stm32f10x_can.c ****   }
 612:../SPL/src/stm32f10x_can.c ****   switch (state)
 1659              		.loc 1 612 0
 1660 0a8e FB68     		ldr	r3, [r7, #12]
 1661 0a90 254A     		ldr	r2, .L117+24
 1662 0a92 9342     		cmp	r3, r2
 1663 0a94 1DD0     		beq	.L109
 1664 0a96 244A     		ldr	r2, .L117+24
 1665 0a98 9342     		cmp	r3, r2
 1666 0a9a 08D8     		bhi	.L113
 1667 0a9c 234A     		ldr	r2, .L117+28
 1668 0a9e 9342     		cmp	r3, r2
 1669 0aa0 13D0     		beq	.L107
 1670 0aa2 1E4A     		ldr	r2, .L117+12
 1671 0aa4 9342     		cmp	r3, r2
 1672 0aa6 1CD0     		beq	.L108
 1673 0aa8 002B     		cmp	r3, #0
 1674 0aaa 0AD0     		beq	.L106
 1675 0aac 25E0     		b	.L105
 1676              	.L113:
 1677 0aae 204A     		ldr	r2, .L117+32
 1678 0ab0 9342     		cmp	r3, r2
 1679 0ab2 12D0     		beq	.L111
 1680 0ab4 1B4A     		ldr	r2, .L117+20
 1681 0ab6 9342     		cmp	r3, r2
 1682 0ab8 1BD0     		beq	.L112
 1683 0aba 194A     		ldr	r2, .L117+16
 1684 0abc 9342     		cmp	r3, r2
 1685 0abe 14D0     		beq	.L110
 1686 0ac0 1BE0     		b	.L105
 1687              	.L106:
 613:../SPL/src/stm32f10x_can.c ****   {
 614:../SPL/src/stm32f10x_can.c ****       /* transmit pending  */
 615:../SPL/src/stm32f10x_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 1688              		.loc 1 615 0
 1689 0ac2 4FF00203 		mov	r3, #2
 1690 0ac6 FB60     		str	r3, [r7, #12]
 616:../SPL/src/stm32f10x_can.c ****       break;
 1691              		.loc 1 616 0
 1692 0ac8 1BE0     		b	.L114
 1693              	.L107:
 617:../SPL/src/stm32f10x_can.c ****       /* transmit failed  */
 618:../SPL/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 1694              		.loc 1 618 0
 1695 0aca 4FF00003 		mov	r3, #0
 1696 0ace FB60     		str	r3, [r7, #12]
 619:../SPL/src/stm32f10x_can.c ****       break;
 1697              		.loc 1 619 0
 1698 0ad0 17E0     		b	.L114
 1699              	.L109:
 620:../SPL/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 1700              		.loc 1 620 0
 1701 0ad2 4FF00003 		mov	r3, #0
 1702 0ad6 FB60     		str	r3, [r7, #12]
 621:../SPL/src/stm32f10x_can.c ****       break;
 1703              		.loc 1 621 0
 1704 0ad8 13E0     		b	.L114
 1705              	.L111:
 622:../SPL/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 1706              		.loc 1 622 0
 1707 0ada 4FF00003 		mov	r3, #0
 1708 0ade FB60     		str	r3, [r7, #12]
 623:../SPL/src/stm32f10x_can.c ****       break;
 1709              		.loc 1 623 0
 1710 0ae0 0FE0     		b	.L114
 1711              	.L108:
 624:../SPL/src/stm32f10x_can.c ****       /* transmit succeeded  */
 625:../SPL/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 1712              		.loc 1 625 0
 1713 0ae2 4FF00103 		mov	r3, #1
 1714 0ae6 FB60     		str	r3, [r7, #12]
 626:../SPL/src/stm32f10x_can.c ****       break;
 1715              		.loc 1 626 0
 1716 0ae8 0BE0     		b	.L114
 1717              	.L110:
 627:../SPL/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 1718              		.loc 1 627 0
 1719 0aea 4FF00103 		mov	r3, #1
 1720 0aee FB60     		str	r3, [r7, #12]
 628:../SPL/src/stm32f10x_can.c ****       break;
 1721              		.loc 1 628 0
 1722 0af0 07E0     		b	.L114
 1723              	.L112:
 629:../SPL/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 1724              		.loc 1 629 0
 1725 0af2 4FF00103 		mov	r3, #1
 1726 0af6 FB60     		str	r3, [r7, #12]
 630:../SPL/src/stm32f10x_can.c ****       break;
 1727              		.loc 1 630 0
 1728 0af8 03E0     		b	.L114
 1729              	.L105:
 631:../SPL/src/stm32f10x_can.c ****     default: state = CAN_TxStatus_Failed;
 1730              		.loc 1 631 0
 1731 0afa 4FF00003 		mov	r3, #0
 1732 0afe FB60     		str	r3, [r7, #12]
 632:../SPL/src/stm32f10x_can.c ****       break;
 1733              		.loc 1 632 0
 1734 0b00 00BF     		nop
 1735              	.L114:
 633:../SPL/src/stm32f10x_can.c ****   }
 634:../SPL/src/stm32f10x_can.c ****   return (uint8_t) state;
 1736              		.loc 1 634 0
 1737 0b02 FB68     		ldr	r3, [r7, #12]
 1738 0b04 DBB2     		uxtb	r3, r3
 635:../SPL/src/stm32f10x_can.c **** }
 1739              		.loc 1 635 0
 1740 0b06 1846     		mov	r0, r3
 1741 0b08 07F11007 		add	r7, r7, #16
 1742 0b0c BD46     		mov	sp, r7
 1743 0b0e 80BD     		pop	{r7, pc}
 1744              	.L118:
 1745              		.align	2
 1746              	.L117:
 1747 0b10 00640040 		.word	1073767424
 1748 0b14 00680040 		.word	1073768448
 1749 0b18 00000000 		.word	.LC0
 1750 0b1c 03000004 		.word	67108867
 1751 0b20 00030008 		.word	134218496
 1752 0b24 00000310 		.word	268632064
 1753 0b28 00010008 		.word	134217984
 1754 0b2c 01000004 		.word	67108865
 1755 0b30 00000110 		.word	268500992
 1756              		.cfi_endproc
 1757              	.LFE37:
 1759              		.align	2
 1760              		.global	CAN_CancelTransmit
 1761              		.thumb
 1762              		.thumb_func
 1764              	CAN_CancelTransmit:
 1765              	.LFB38:
 636:../SPL/src/stm32f10x_can.c **** 
 637:../SPL/src/stm32f10x_can.c **** /**
 638:../SPL/src/stm32f10x_can.c ****   * @brief  Cancels a transmit request.
 639:../SPL/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral. 
 640:../SPL/src/stm32f10x_can.c ****   * @param  Mailbox:  Mailbox number.
 641:../SPL/src/stm32f10x_can.c ****   * @retval None.
 642:../SPL/src/stm32f10x_can.c ****   */
 643:../SPL/src/stm32f10x_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 644:../SPL/src/stm32f10x_can.c **** {
 1766              		.loc 1 644 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 8
 1769              		@ frame_needed = 1, uses_anonymous_args = 0
 1770 0b34 80B5     		push	{r7, lr}
 1771              	.LCFI27:
 1772              		.cfi_def_cfa_offset 8
 1773              		.cfi_offset 7, -8
 1774              		.cfi_offset 14, -4
 1775 0b36 82B0     		sub	sp, sp, #8
 1776              	.LCFI28:
 1777              		.cfi_def_cfa_offset 16
 1778 0b38 00AF     		add	r7, sp, #0
 1779              	.LCFI29:
 1780              		.cfi_def_cfa_register 7
 1781 0b3a 7860     		str	r0, [r7, #4]
 1782 0b3c 0B46     		mov	r3, r1
 1783 0b3e FB70     		strb	r3, [r7, #3]
 645:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 646:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 1784              		.loc 1 646 0
 1785 0b40 7A68     		ldr	r2, [r7, #4]
 1786 0b42 1A4B     		ldr	r3, .L128
 1787 0b44 9A42     		cmp	r2, r3
 1788 0b46 08D0     		beq	.L120
 1789              		.loc 1 646 0 is_stmt 0 discriminator 1
 1790 0b48 7A68     		ldr	r2, [r7, #4]
 1791 0b4a 194B     		ldr	r3, .L128+4
 1792 0b4c 9A42     		cmp	r2, r3
 1793 0b4e 04D0     		beq	.L120
 1794              		.loc 1 646 0 discriminator 2
 1795 0b50 1848     		ldr	r0, .L128+8
 1796 0b52 40F28621 		movw	r1, #646
 1797 0b56 FFF7FEFF 		bl	assert_failed
 1798              	.L120:
 647:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 1799              		.loc 1 647 0 is_stmt 1
 1800 0b5a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1801 0b5c 022B     		cmp	r3, #2
 1802 0b5e 04D9     		bls	.L121
 1803              		.loc 1 647 0 is_stmt 0 discriminator 1
 1804 0b60 1448     		ldr	r0, .L128+8
 1805 0b62 40F28721 		movw	r1, #647
 1806 0b66 FFF7FEFF 		bl	assert_failed
 1807              	.L121:
 648:../SPL/src/stm32f10x_can.c ****   /* abort transmission */
 649:../SPL/src/stm32f10x_can.c ****   switch (Mailbox)
 1808              		.loc 1 649 0 is_stmt 1
 1809 0b6a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1810 0b6c 012B     		cmp	r3, #1
 1811 0b6e 0AD0     		beq	.L124
 1812 0b70 022B     		cmp	r3, #2
 1813 0b72 0FD0     		beq	.L125
 1814 0b74 002B     		cmp	r3, #0
 1815 0b76 14D1     		bne	.L127
 1816              	.L123:
 650:../SPL/src/stm32f10x_can.c ****   {
 651:../SPL/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 1817              		.loc 1 651 0
 1818 0b78 7B68     		ldr	r3, [r7, #4]
 1819 0b7a 9B68     		ldr	r3, [r3, #8]
 1820 0b7c 43F08002 		orr	r2, r3, #128
 1821 0b80 7B68     		ldr	r3, [r7, #4]
 1822 0b82 9A60     		str	r2, [r3, #8]
 652:../SPL/src/stm32f10x_can.c ****       break;
 1823              		.loc 1 652 0
 1824 0b84 0EE0     		b	.L119
 1825              	.L124:
 653:../SPL/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 1826              		.loc 1 653 0
 1827 0b86 7B68     		ldr	r3, [r7, #4]
 1828 0b88 9B68     		ldr	r3, [r3, #8]
 1829 0b8a 43F40042 		orr	r2, r3, #32768
 1830 0b8e 7B68     		ldr	r3, [r7, #4]
 1831 0b90 9A60     		str	r2, [r3, #8]
 654:../SPL/src/stm32f10x_can.c ****       break;
 1832              		.loc 1 654 0
 1833 0b92 07E0     		b	.L119
 1834              	.L125:
 655:../SPL/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 1835              		.loc 1 655 0
 1836 0b94 7B68     		ldr	r3, [r7, #4]
 1837 0b96 9B68     		ldr	r3, [r3, #8]
 1838 0b98 43F40002 		orr	r2, r3, #8388608
 1839 0b9c 7B68     		ldr	r3, [r7, #4]
 1840 0b9e 9A60     		str	r2, [r3, #8]
 656:../SPL/src/stm32f10x_can.c ****       break;
 1841              		.loc 1 656 0
 1842 0ba0 00E0     		b	.L119
 1843              	.L127:
 657:../SPL/src/stm32f10x_can.c ****     default:
 658:../SPL/src/stm32f10x_can.c ****       break;
 1844              		.loc 1 658 0
 1845 0ba2 00BF     		nop
 1846              	.L119:
 659:../SPL/src/stm32f10x_can.c ****   }
 660:../SPL/src/stm32f10x_can.c **** }
 1847              		.loc 1 660 0
 1848 0ba4 07F10807 		add	r7, r7, #8
 1849 0ba8 BD46     		mov	sp, r7
 1850 0baa 80BD     		pop	{r7, pc}
 1851              	.L129:
 1852              		.align	2
 1853              	.L128:
 1854 0bac 00640040 		.word	1073767424
 1855 0bb0 00680040 		.word	1073768448
 1856 0bb4 00000000 		.word	.LC0
 1857              		.cfi_endproc
 1858              	.LFE38:
 1860              		.align	2
 1861              		.global	CAN_Receive
 1862              		.thumb
 1863              		.thumb_func
 1865              	CAN_Receive:
 1866              	.LFB39:
 661:../SPL/src/stm32f10x_can.c **** 
 662:../SPL/src/stm32f10x_can.c **** 
 663:../SPL/src/stm32f10x_can.c **** /**
 664:../SPL/src/stm32f10x_can.c ****   * @brief  Receives a message.
 665:../SPL/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 666:../SPL/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 667:../SPL/src/stm32f10x_can.c ****   * @param  RxMessage:  pointer to a structure receive message which contains 
 668:../SPL/src/stm32f10x_can.c ****   *                     CAN Id, CAN DLC, CAN datas and FMI number.
 669:../SPL/src/stm32f10x_can.c ****   * @retval None.
 670:../SPL/src/stm32f10x_can.c ****   */
 671:../SPL/src/stm32f10x_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 672:../SPL/src/stm32f10x_can.c **** {
 1867              		.loc 1 672 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 16
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871 0bb8 80B5     		push	{r7, lr}
 1872              	.LCFI30:
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 7, -8
 1875              		.cfi_offset 14, -4
 1876 0bba 84B0     		sub	sp, sp, #16
 1877              	.LCFI31:
 1878              		.cfi_def_cfa_offset 24
 1879 0bbc 00AF     		add	r7, sp, #0
 1880              	.LCFI32:
 1881              		.cfi_def_cfa_register 7
 1882 0bbe F860     		str	r0, [r7, #12]
 1883 0bc0 0B46     		mov	r3, r1
 1884 0bc2 7A60     		str	r2, [r7, #4]
 1885 0bc4 FB72     		strb	r3, [r7, #11]
 673:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 674:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 1886              		.loc 1 674 0
 1887 0bc6 FA68     		ldr	r2, [r7, #12]
 1888 0bc8 714B     		ldr	r3, .L137
 1889 0bca 9A42     		cmp	r2, r3
 1890 0bcc 08D0     		beq	.L131
 1891              		.loc 1 674 0 is_stmt 0 discriminator 1
 1892 0bce FA68     		ldr	r2, [r7, #12]
 1893 0bd0 704B     		ldr	r3, .L137+4
 1894 0bd2 9A42     		cmp	r2, r3
 1895 0bd4 04D0     		beq	.L131
 1896              		.loc 1 674 0 discriminator 2
 1897 0bd6 7048     		ldr	r0, .L137+8
 1898 0bd8 40F2A221 		movw	r1, #674
 1899 0bdc FFF7FEFF 		bl	assert_failed
 1900              	.L131:
 675:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1901              		.loc 1 675 0 is_stmt 1
 1902 0be0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1903 0be2 002B     		cmp	r3, #0
 1904 0be4 07D0     		beq	.L132
 1905              		.loc 1 675 0 is_stmt 0 discriminator 1
 1906 0be6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1907 0be8 012B     		cmp	r3, #1
 1908 0bea 04D0     		beq	.L132
 1909              		.loc 1 675 0 discriminator 2
 1910 0bec 6A48     		ldr	r0, .L137+8
 1911 0bee 40F2A321 		movw	r1, #675
 1912 0bf2 FFF7FEFF 		bl	assert_failed
 1913              	.L132:
 676:../SPL/src/stm32f10x_can.c ****   /* Get the Id */
 677:../SPL/src/stm32f10x_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1914              		.loc 1 677 0 is_stmt 1
 1915 0bf6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1916 0bf8 FA68     		ldr	r2, [r7, #12]
 1917 0bfa 03F11B03 		add	r3, r3, #27
 1918 0bfe 4FEA0313 		lsl	r3, r3, #4
 1919 0c02 D318     		adds	r3, r2, r3
 1920 0c04 1B68     		ldr	r3, [r3, #0]
 1921 0c06 DBB2     		uxtb	r3, r3
 1922 0c08 03F00403 		and	r3, r3, #4
 1923 0c0c DAB2     		uxtb	r2, r3
 1924 0c0e 7B68     		ldr	r3, [r7, #4]
 1925 0c10 1A72     		strb	r2, [r3, #8]
 678:../SPL/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1926              		.loc 1 678 0
 1927 0c12 7B68     		ldr	r3, [r7, #4]
 1928 0c14 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1929 0c16 002B     		cmp	r3, #0
 1930 0c18 0CD1     		bne	.L133
 679:../SPL/src/stm32f10x_can.c ****   {
 680:../SPL/src/stm32f10x_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 1931              		.loc 1 680 0
 1932 0c1a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1933 0c1c FA68     		ldr	r2, [r7, #12]
 1934 0c1e 03F11B03 		add	r3, r3, #27
 1935 0c22 4FEA0313 		lsl	r3, r3, #4
 1936 0c26 D318     		adds	r3, r2, r3
 1937 0c28 1B68     		ldr	r3, [r3, #0]
 1938 0c2a 4FEA5352 		lsr	r2, r3, #21
 1939 0c2e 7B68     		ldr	r3, [r7, #4]
 1940 0c30 1A60     		str	r2, [r3, #0]
 1941 0c32 0BE0     		b	.L134
 1942              	.L133:
 681:../SPL/src/stm32f10x_can.c ****   }
 682:../SPL/src/stm32f10x_can.c ****   else
 683:../SPL/src/stm32f10x_can.c ****   {
 684:../SPL/src/stm32f10x_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 1943              		.loc 1 684 0
 1944 0c34 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1945 0c36 FA68     		ldr	r2, [r7, #12]
 1946 0c38 03F11B03 		add	r3, r3, #27
 1947 0c3c 4FEA0313 		lsl	r3, r3, #4
 1948 0c40 D318     		adds	r3, r2, r3
 1949 0c42 1B68     		ldr	r3, [r3, #0]
 1950 0c44 4FEAD302 		lsr	r2, r3, #3
 1951 0c48 7B68     		ldr	r3, [r7, #4]
 1952 0c4a 5A60     		str	r2, [r3, #4]
 1953              	.L134:
 685:../SPL/src/stm32f10x_can.c ****   }
 686:../SPL/src/stm32f10x_can.c ****   
 687:../SPL/src/stm32f10x_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1954              		.loc 1 687 0
 1955 0c4c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1956 0c4e FA68     		ldr	r2, [r7, #12]
 1957 0c50 03F11B03 		add	r3, r3, #27
 1958 0c54 4FEA0313 		lsl	r3, r3, #4
 1959 0c58 D318     		adds	r3, r2, r3
 1960 0c5a 1B68     		ldr	r3, [r3, #0]
 1961 0c5c DBB2     		uxtb	r3, r3
 1962 0c5e 03F00203 		and	r3, r3, #2
 1963 0c62 DAB2     		uxtb	r2, r3
 1964 0c64 7B68     		ldr	r3, [r7, #4]
 1965 0c66 5A72     		strb	r2, [r3, #9]
 688:../SPL/src/stm32f10x_can.c ****   /* Get the DLC */
 689:../SPL/src/stm32f10x_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 1966              		.loc 1 689 0
 1967 0c68 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1968 0c6a FA68     		ldr	r2, [r7, #12]
 1969 0c6c 03F11B03 		add	r3, r3, #27
 1970 0c70 4FEA0313 		lsl	r3, r3, #4
 1971 0c74 D318     		adds	r3, r2, r3
 1972 0c76 5B68     		ldr	r3, [r3, #4]
 1973 0c78 DBB2     		uxtb	r3, r3
 1974 0c7a 03F00F03 		and	r3, r3, #15
 1975 0c7e DAB2     		uxtb	r2, r3
 1976 0c80 7B68     		ldr	r3, [r7, #4]
 1977 0c82 9A72     		strb	r2, [r3, #10]
 690:../SPL/src/stm32f10x_can.c ****   /* Get the FMI */
 691:../SPL/src/stm32f10x_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1978              		.loc 1 691 0
 1979 0c84 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1980 0c86 FA68     		ldr	r2, [r7, #12]
 1981 0c88 03F11B03 		add	r3, r3, #27
 1982 0c8c 4FEA0313 		lsl	r3, r3, #4
 1983 0c90 D318     		adds	r3, r2, r3
 1984 0c92 5B68     		ldr	r3, [r3, #4]
 1985 0c94 4FEA1323 		lsr	r3, r3, #8
 1986 0c98 DAB2     		uxtb	r2, r3
 1987 0c9a 7B68     		ldr	r3, [r7, #4]
 1988 0c9c DA74     		strb	r2, [r3, #19]
 692:../SPL/src/stm32f10x_can.c ****   /* Get the data field */
 693:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1989              		.loc 1 693 0
 1990 0c9e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1991 0ca0 FA68     		ldr	r2, [r7, #12]
 1992 0ca2 4FEA0313 		lsl	r3, r3, #4
 1993 0ca6 D318     		adds	r3, r2, r3
 1994 0ca8 03F5DC73 		add	r3, r3, #440
 1995 0cac 1B68     		ldr	r3, [r3, #0]
 1996 0cae DAB2     		uxtb	r2, r3
 1997 0cb0 7B68     		ldr	r3, [r7, #4]
 1998 0cb2 DA72     		strb	r2, [r3, #11]
 694:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1999              		.loc 1 694 0
 2000 0cb4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2001 0cb6 FA68     		ldr	r2, [r7, #12]
 2002 0cb8 4FEA0313 		lsl	r3, r3, #4
 2003 0cbc D318     		adds	r3, r2, r3
 2004 0cbe 03F5DC73 		add	r3, r3, #440
 2005 0cc2 1B68     		ldr	r3, [r3, #0]
 2006 0cc4 4FEA1323 		lsr	r3, r3, #8
 2007 0cc8 DAB2     		uxtb	r2, r3
 2008 0cca 7B68     		ldr	r3, [r7, #4]
 2009 0ccc 1A73     		strb	r2, [r3, #12]
 695:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 2010              		.loc 1 695 0
 2011 0cce FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2012 0cd0 FA68     		ldr	r2, [r7, #12]
 2013 0cd2 4FEA0313 		lsl	r3, r3, #4
 2014 0cd6 D318     		adds	r3, r2, r3
 2015 0cd8 03F5DC73 		add	r3, r3, #440
 2016 0cdc 1B68     		ldr	r3, [r3, #0]
 2017 0cde 4FEA1343 		lsr	r3, r3, #16
 2018 0ce2 DAB2     		uxtb	r2, r3
 2019 0ce4 7B68     		ldr	r3, [r7, #4]
 2020 0ce6 5A73     		strb	r2, [r3, #13]
 696:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 2021              		.loc 1 696 0
 2022 0ce8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2023 0cea FA68     		ldr	r2, [r7, #12]
 2024 0cec 4FEA0313 		lsl	r3, r3, #4
 2025 0cf0 D318     		adds	r3, r2, r3
 2026 0cf2 03F5DC73 		add	r3, r3, #440
 2027 0cf6 1B68     		ldr	r3, [r3, #0]
 2028 0cf8 4FEA1363 		lsr	r3, r3, #24
 2029 0cfc DAB2     		uxtb	r2, r3
 2030 0cfe 7B68     		ldr	r3, [r7, #4]
 2031 0d00 9A73     		strb	r2, [r3, #14]
 697:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 2032              		.loc 1 697 0
 2033 0d02 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2034 0d04 FA68     		ldr	r2, [r7, #12]
 2035 0d06 4FEA0313 		lsl	r3, r3, #4
 2036 0d0a D318     		adds	r3, r2, r3
 2037 0d0c 03F5DC73 		add	r3, r3, #440
 2038 0d10 5B68     		ldr	r3, [r3, #4]
 2039 0d12 DAB2     		uxtb	r2, r3
 2040 0d14 7B68     		ldr	r3, [r7, #4]
 2041 0d16 DA73     		strb	r2, [r3, #15]
 698:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 2042              		.loc 1 698 0
 2043 0d18 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2044 0d1a FA68     		ldr	r2, [r7, #12]
 2045 0d1c 4FEA0313 		lsl	r3, r3, #4
 2046 0d20 D318     		adds	r3, r2, r3
 2047 0d22 03F5DC73 		add	r3, r3, #440
 2048 0d26 5B68     		ldr	r3, [r3, #4]
 2049 0d28 4FEA1323 		lsr	r3, r3, #8
 2050 0d2c DAB2     		uxtb	r2, r3
 2051 0d2e 7B68     		ldr	r3, [r7, #4]
 2052 0d30 1A74     		strb	r2, [r3, #16]
 699:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 2053              		.loc 1 699 0
 2054 0d32 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2055 0d34 FA68     		ldr	r2, [r7, #12]
 2056 0d36 4FEA0313 		lsl	r3, r3, #4
 2057 0d3a D318     		adds	r3, r2, r3
 2058 0d3c 03F5DC73 		add	r3, r3, #440
 2059 0d40 5B68     		ldr	r3, [r3, #4]
 2060 0d42 4FEA1343 		lsr	r3, r3, #16
 2061 0d46 DAB2     		uxtb	r2, r3
 2062 0d48 7B68     		ldr	r3, [r7, #4]
 2063 0d4a 5A74     		strb	r2, [r3, #17]
 700:../SPL/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 2064              		.loc 1 700 0
 2065 0d4c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2066 0d4e FA68     		ldr	r2, [r7, #12]
 2067 0d50 4FEA0313 		lsl	r3, r3, #4
 2068 0d54 D318     		adds	r3, r2, r3
 2069 0d56 03F5DC73 		add	r3, r3, #440
 2070 0d5a 5B68     		ldr	r3, [r3, #4]
 2071 0d5c 4FEA1363 		lsr	r3, r3, #24
 2072 0d60 DAB2     		uxtb	r2, r3
 2073 0d62 7B68     		ldr	r3, [r7, #4]
 2074 0d64 9A74     		strb	r2, [r3, #18]
 701:../SPL/src/stm32f10x_can.c ****   /* Release the FIFO */
 702:../SPL/src/stm32f10x_can.c ****   /* Release FIFO0 */
 703:../SPL/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 2075              		.loc 1 703 0
 2076 0d66 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2077 0d68 002B     		cmp	r3, #0
 2078 0d6a 06D1     		bne	.L135
 704:../SPL/src/stm32f10x_can.c ****   {
 705:../SPL/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 2079              		.loc 1 705 0
 2080 0d6c FB68     		ldr	r3, [r7, #12]
 2081 0d6e DB68     		ldr	r3, [r3, #12]
 2082 0d70 43F02002 		orr	r2, r3, #32
 2083 0d74 FB68     		ldr	r3, [r7, #12]
 2084 0d76 DA60     		str	r2, [r3, #12]
 2085 0d78 05E0     		b	.L130
 2086              	.L135:
 706:../SPL/src/stm32f10x_can.c ****   }
 707:../SPL/src/stm32f10x_can.c ****   /* Release FIFO1 */
 708:../SPL/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 709:../SPL/src/stm32f10x_can.c ****   {
 710:../SPL/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 2087              		.loc 1 710 0
 2088 0d7a FB68     		ldr	r3, [r7, #12]
 2089 0d7c 1B69     		ldr	r3, [r3, #16]
 2090 0d7e 43F02002 		orr	r2, r3, #32
 2091 0d82 FB68     		ldr	r3, [r7, #12]
 2092 0d84 1A61     		str	r2, [r3, #16]
 2093              	.L130:
 711:../SPL/src/stm32f10x_can.c ****   }
 712:../SPL/src/stm32f10x_can.c **** }
 2094              		.loc 1 712 0
 2095 0d86 07F11007 		add	r7, r7, #16
 2096 0d8a BD46     		mov	sp, r7
 2097 0d8c 80BD     		pop	{r7, pc}
 2098              	.L138:
 2099 0d8e 00BF     		.align	2
 2100              	.L137:
 2101 0d90 00640040 		.word	1073767424
 2102 0d94 00680040 		.word	1073768448
 2103 0d98 00000000 		.word	.LC0
 2104              		.cfi_endproc
 2105              	.LFE39:
 2107              		.align	2
 2108              		.global	CAN_FIFORelease
 2109              		.thumb
 2110              		.thumb_func
 2112              	CAN_FIFORelease:
 2113              	.LFB40:
 713:../SPL/src/stm32f10x_can.c **** 
 714:../SPL/src/stm32f10x_can.c **** /**
 715:../SPL/src/stm32f10x_can.c ****   * @brief  Releases the specified FIFO.
 716:../SPL/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral. 
 717:../SPL/src/stm32f10x_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 718:../SPL/src/stm32f10x_can.c ****   * @retval None.
 719:../SPL/src/stm32f10x_can.c ****   */
 720:../SPL/src/stm32f10x_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 721:../SPL/src/stm32f10x_can.c **** {
 2114              		.loc 1 721 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 8
 2117              		@ frame_needed = 1, uses_anonymous_args = 0
 2118 0d9c 80B5     		push	{r7, lr}
 2119              	.LCFI33:
 2120              		.cfi_def_cfa_offset 8
 2121              		.cfi_offset 7, -8
 2122              		.cfi_offset 14, -4
 2123 0d9e 82B0     		sub	sp, sp, #8
 2124              	.LCFI34:
 2125              		.cfi_def_cfa_offset 16
 2126 0da0 00AF     		add	r7, sp, #0
 2127              	.LCFI35:
 2128              		.cfi_def_cfa_register 7
 2129 0da2 7860     		str	r0, [r7, #4]
 2130 0da4 0B46     		mov	r3, r1
 2131 0da6 FB70     		strb	r3, [r7, #3]
 722:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 723:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2132              		.loc 1 723 0
 2133 0da8 7A68     		ldr	r2, [r7, #4]
 2134 0daa 154B     		ldr	r3, .L144
 2135 0dac 9A42     		cmp	r2, r3
 2136 0dae 08D0     		beq	.L140
 2137              		.loc 1 723 0 is_stmt 0 discriminator 1
 2138 0db0 7A68     		ldr	r2, [r7, #4]
 2139 0db2 144B     		ldr	r3, .L144+4
 2140 0db4 9A42     		cmp	r2, r3
 2141 0db6 04D0     		beq	.L140
 2142              		.loc 1 723 0 discriminator 2
 2143 0db8 1348     		ldr	r0, .L144+8
 2144 0dba 40F2D321 		movw	r1, #723
 2145 0dbe FFF7FEFF 		bl	assert_failed
 2146              	.L140:
 724:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 2147              		.loc 1 724 0 is_stmt 1
 2148 0dc2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2149 0dc4 002B     		cmp	r3, #0
 2150 0dc6 07D0     		beq	.L141
 2151              		.loc 1 724 0 is_stmt 0 discriminator 1
 2152 0dc8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2153 0dca 012B     		cmp	r3, #1
 2154 0dcc 04D0     		beq	.L141
 2155              		.loc 1 724 0 discriminator 2
 2156 0dce 0E48     		ldr	r0, .L144+8
 2157 0dd0 4FF43571 		mov	r1, #724
 2158 0dd4 FFF7FEFF 		bl	assert_failed
 2159              	.L141:
 725:../SPL/src/stm32f10x_can.c ****   /* Release FIFO0 */
 726:../SPL/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 2160              		.loc 1 726 0 is_stmt 1
 2161 0dd8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2162 0dda 002B     		cmp	r3, #0
 2163 0ddc 06D1     		bne	.L142
 727:../SPL/src/stm32f10x_can.c ****   {
 728:../SPL/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 2164              		.loc 1 728 0
 2165 0dde 7B68     		ldr	r3, [r7, #4]
 2166 0de0 DB68     		ldr	r3, [r3, #12]
 2167 0de2 43F02002 		orr	r2, r3, #32
 2168 0de6 7B68     		ldr	r3, [r7, #4]
 2169 0de8 DA60     		str	r2, [r3, #12]
 2170 0dea 05E0     		b	.L139
 2171              	.L142:
 729:../SPL/src/stm32f10x_can.c ****   }
 730:../SPL/src/stm32f10x_can.c ****   /* Release FIFO1 */
 731:../SPL/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 732:../SPL/src/stm32f10x_can.c ****   {
 733:../SPL/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 2172              		.loc 1 733 0
 2173 0dec 7B68     		ldr	r3, [r7, #4]
 2174 0dee 1B69     		ldr	r3, [r3, #16]
 2175 0df0 43F02002 		orr	r2, r3, #32
 2176 0df4 7B68     		ldr	r3, [r7, #4]
 2177 0df6 1A61     		str	r2, [r3, #16]
 2178              	.L139:
 734:../SPL/src/stm32f10x_can.c ****   }
 735:../SPL/src/stm32f10x_can.c **** }
 2179              		.loc 1 735 0
 2180 0df8 07F10807 		add	r7, r7, #8
 2181 0dfc BD46     		mov	sp, r7
 2182 0dfe 80BD     		pop	{r7, pc}
 2183              	.L145:
 2184              		.align	2
 2185              	.L144:
 2186 0e00 00640040 		.word	1073767424
 2187 0e04 00680040 		.word	1073768448
 2188 0e08 00000000 		.word	.LC0
 2189              		.cfi_endproc
 2190              	.LFE40:
 2192              		.align	2
 2193              		.global	CAN_MessagePending
 2194              		.thumb
 2195              		.thumb_func
 2197              	CAN_MessagePending:
 2198              	.LFB41:
 736:../SPL/src/stm32f10x_can.c **** 
 737:../SPL/src/stm32f10x_can.c **** /**
 738:../SPL/src/stm32f10x_can.c ****   * @brief  Returns the number of pending messages.
 739:../SPL/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 740:../SPL/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 741:../SPL/src/stm32f10x_can.c ****   * @retval NbMessage : which is the number of pending message.
 742:../SPL/src/stm32f10x_can.c ****   */
 743:../SPL/src/stm32f10x_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 744:../SPL/src/stm32f10x_can.c **** {
 2199              		.loc 1 744 0
 2200              		.cfi_startproc
 2201              		@ args = 0, pretend = 0, frame = 16
 2202              		@ frame_needed = 1, uses_anonymous_args = 0
 2203 0e0c 80B5     		push	{r7, lr}
 2204              	.LCFI36:
 2205              		.cfi_def_cfa_offset 8
 2206              		.cfi_offset 7, -8
 2207              		.cfi_offset 14, -4
 2208 0e0e 84B0     		sub	sp, sp, #16
 2209              	.LCFI37:
 2210              		.cfi_def_cfa_offset 24
 2211 0e10 00AF     		add	r7, sp, #0
 2212              	.LCFI38:
 2213              		.cfi_def_cfa_register 7
 2214 0e12 7860     		str	r0, [r7, #4]
 2215 0e14 0B46     		mov	r3, r1
 2216 0e16 FB70     		strb	r3, [r7, #3]
 745:../SPL/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 2217              		.loc 1 745 0
 2218 0e18 4FF00003 		mov	r3, #0
 2219 0e1c FB73     		strb	r3, [r7, #15]
 746:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 747:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2220              		.loc 1 747 0
 2221 0e1e 7A68     		ldr	r2, [r7, #4]
 2222 0e20 194B     		ldr	r3, .L153
 2223 0e22 9A42     		cmp	r2, r3
 2224 0e24 08D0     		beq	.L147
 2225              		.loc 1 747 0 is_stmt 0 discriminator 1
 2226 0e26 7A68     		ldr	r2, [r7, #4]
 2227 0e28 184B     		ldr	r3, .L153+4
 2228 0e2a 9A42     		cmp	r2, r3
 2229 0e2c 04D0     		beq	.L147
 2230              		.loc 1 747 0 discriminator 2
 2231 0e2e 1848     		ldr	r0, .L153+8
 2232 0e30 40F2EB21 		movw	r1, #747
 2233 0e34 FFF7FEFF 		bl	assert_failed
 2234              	.L147:
 748:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 2235              		.loc 1 748 0 is_stmt 1
 2236 0e38 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2237 0e3a 002B     		cmp	r3, #0
 2238 0e3c 07D0     		beq	.L148
 2239              		.loc 1 748 0 is_stmt 0 discriminator 1
 2240 0e3e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2241 0e40 012B     		cmp	r3, #1
 2242 0e42 04D0     		beq	.L148
 2243              		.loc 1 748 0 discriminator 2
 2244 0e44 1248     		ldr	r0, .L153+8
 2245 0e46 4FF43B71 		mov	r1, #748
 2246 0e4a FFF7FEFF 		bl	assert_failed
 2247              	.L148:
 749:../SPL/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 2248              		.loc 1 749 0 is_stmt 1
 2249 0e4e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2250 0e50 002B     		cmp	r3, #0
 2251 0e52 06D1     		bne	.L149
 750:../SPL/src/stm32f10x_can.c ****   {
 751:../SPL/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 2252              		.loc 1 751 0
 2253 0e54 7B68     		ldr	r3, [r7, #4]
 2254 0e56 DB68     		ldr	r3, [r3, #12]
 2255 0e58 DBB2     		uxtb	r3, r3
 2256 0e5a 03F00303 		and	r3, r3, #3
 2257 0e5e FB73     		strb	r3, [r7, #15]
 2258 0e60 0CE0     		b	.L150
 2259              	.L149:
 752:../SPL/src/stm32f10x_can.c ****   }
 753:../SPL/src/stm32f10x_can.c ****   else if (FIFONumber == CAN_FIFO1)
 2260              		.loc 1 753 0
 2261 0e62 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2262 0e64 012B     		cmp	r3, #1
 2263 0e66 06D1     		bne	.L151
 754:../SPL/src/stm32f10x_can.c ****   {
 755:../SPL/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 2264              		.loc 1 755 0
 2265 0e68 7B68     		ldr	r3, [r7, #4]
 2266 0e6a 1B69     		ldr	r3, [r3, #16]
 2267 0e6c DBB2     		uxtb	r3, r3
 2268 0e6e 03F00303 		and	r3, r3, #3
 2269 0e72 FB73     		strb	r3, [r7, #15]
 2270 0e74 02E0     		b	.L150
 2271              	.L151:
 756:../SPL/src/stm32f10x_can.c ****   }
 757:../SPL/src/stm32f10x_can.c ****   else
 758:../SPL/src/stm32f10x_can.c ****   {
 759:../SPL/src/stm32f10x_can.c ****     message_pending = 0;
 2272              		.loc 1 759 0
 2273 0e76 4FF00003 		mov	r3, #0
 2274 0e7a FB73     		strb	r3, [r7, #15]
 2275              	.L150:
 760:../SPL/src/stm32f10x_can.c ****   }
 761:../SPL/src/stm32f10x_can.c ****   return message_pending;
 2276              		.loc 1 761 0
 2277 0e7c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 762:../SPL/src/stm32f10x_can.c **** }
 2278              		.loc 1 762 0
 2279 0e7e 1846     		mov	r0, r3
 2280 0e80 07F11007 		add	r7, r7, #16
 2281 0e84 BD46     		mov	sp, r7
 2282 0e86 80BD     		pop	{r7, pc}
 2283              	.L154:
 2284              		.align	2
 2285              	.L153:
 2286 0e88 00640040 		.word	1073767424
 2287 0e8c 00680040 		.word	1073768448
 2288 0e90 00000000 		.word	.LC0
 2289              		.cfi_endproc
 2290              	.LFE41:
 2292              		.align	2
 2293              		.global	CAN_OperatingModeRequest
 2294              		.thumb
 2295              		.thumb_func
 2297              	CAN_OperatingModeRequest:
 2298              	.LFB42:
 763:../SPL/src/stm32f10x_can.c **** 
 764:../SPL/src/stm32f10x_can.c **** 
 765:../SPL/src/stm32f10x_can.c **** /**
 766:../SPL/src/stm32f10x_can.c ****   * @brief   Select the CAN Operation mode.
 767:../SPL/src/stm32f10x_can.c ****   * @param CAN_OperatingMode : CAN Operating Mode. This parameter can be one 
 768:../SPL/src/stm32f10x_can.c ****   *                            of @ref CAN_OperatingMode_TypeDef enumeration.
 769:../SPL/src/stm32f10x_can.c ****   * @retval status of the requested mode which can be 
 770:../SPL/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Failed    CAN failed entering the specific mode 
 771:../SPL/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Success   CAN Succeed entering the specific mode 
 772:../SPL/src/stm32f10x_can.c **** 
 773:../SPL/src/stm32f10x_can.c ****   */
 774:../SPL/src/stm32f10x_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 775:../SPL/src/stm32f10x_can.c **** {
 2299              		.loc 1 775 0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 16
 2302              		@ frame_needed = 1, uses_anonymous_args = 0
 2303 0e94 80B5     		push	{r7, lr}
 2304              	.LCFI39:
 2305              		.cfi_def_cfa_offset 8
 2306              		.cfi_offset 7, -8
 2307              		.cfi_offset 14, -4
 2308 0e96 84B0     		sub	sp, sp, #16
 2309              	.LCFI40:
 2310              		.cfi_def_cfa_offset 24
 2311 0e98 00AF     		add	r7, sp, #0
 2312              	.LCFI41:
 2313              		.cfi_def_cfa_register 7
 2314 0e9a 7860     		str	r0, [r7, #4]
 2315 0e9c 0B46     		mov	r3, r1
 2316 0e9e FB70     		strb	r3, [r7, #3]
 776:../SPL/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 2317              		.loc 1 776 0
 2318 0ea0 4FF00003 		mov	r3, #0
 2319 0ea4 FB73     		strb	r3, [r7, #15]
 777:../SPL/src/stm32f10x_can.c ****   
 778:../SPL/src/stm32f10x_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 779:../SPL/src/stm32f10x_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 2320              		.loc 1 779 0
 2321 0ea6 4FF6FF73 		movw	r3, #65535
 2322 0eaa BB60     		str	r3, [r7, #8]
 780:../SPL/src/stm32f10x_can.c **** 
 781:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 782:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2323              		.loc 1 782 0
 2324 0eac 7A68     		ldr	r2, [r7, #4]
 2325 0eae 4B4B     		ldr	r3, .L175
 2326 0eb0 9A42     		cmp	r2, r3
 2327 0eb2 08D0     		beq	.L156
 2328              		.loc 1 782 0 is_stmt 0 discriminator 1
 2329 0eb4 7A68     		ldr	r2, [r7, #4]
 2330 0eb6 4A4B     		ldr	r3, .L175+4
 2331 0eb8 9A42     		cmp	r2, r3
 2332 0eba 04D0     		beq	.L156
 2333              		.loc 1 782 0 discriminator 2
 2334 0ebc 4948     		ldr	r0, .L175+8
 2335 0ebe 40F20E31 		movw	r1, #782
 2336 0ec2 FFF7FEFF 		bl	assert_failed
 2337              	.L156:
 783:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 2338              		.loc 1 783 0 is_stmt 1
 2339 0ec6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2340 0ec8 002B     		cmp	r3, #0
 2341 0eca 0AD0     		beq	.L157
 2342              		.loc 1 783 0 is_stmt 0 discriminator 1
 2343 0ecc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2344 0ece 012B     		cmp	r3, #1
 2345 0ed0 07D0     		beq	.L157
 2346              		.loc 1 783 0 discriminator 2
 2347 0ed2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2348 0ed4 022B     		cmp	r3, #2
 2349 0ed6 04D0     		beq	.L157
 2350              		.loc 1 783 0 discriminator 3
 2351 0ed8 4248     		ldr	r0, .L175+8
 2352 0eda 40F20F31 		movw	r1, #783
 2353 0ede FFF7FEFF 		bl	assert_failed
 2354              	.L157:
 784:../SPL/src/stm32f10x_can.c **** 
 785:../SPL/src/stm32f10x_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 2355              		.loc 1 785 0 is_stmt 1
 2356 0ee2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2357 0ee4 002B     		cmp	r3, #0
 2358 0ee6 23D1     		bne	.L158
 786:../SPL/src/stm32f10x_can.c ****   {
 787:../SPL/src/stm32f10x_can.c ****     /* Request initialisation */
 788:../SPL/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 2359              		.loc 1 788 0
 2360 0ee8 7B68     		ldr	r3, [r7, #4]
 2361 0eea 1B68     		ldr	r3, [r3, #0]
 2362 0eec 23F00303 		bic	r3, r3, #3
 2363 0ef0 43F00102 		orr	r2, r3, #1
 2364 0ef4 7B68     		ldr	r3, [r7, #4]
 2365 0ef6 1A60     		str	r2, [r3, #0]
 789:../SPL/src/stm32f10x_can.c **** 
 790:../SPL/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 791:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 2366              		.loc 1 791 0
 2367 0ef8 03E0     		b	.L159
 2368              	.L161:
 792:../SPL/src/stm32f10x_can.c ****     {
 793:../SPL/src/stm32f10x_can.c ****       timeout--;
 2369              		.loc 1 793 0
 2370 0efa BB68     		ldr	r3, [r7, #8]
 2371 0efc 03F1FF33 		add	r3, r3, #-1
 2372 0f00 BB60     		str	r3, [r7, #8]
 2373              	.L159:
 791:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 2374              		.loc 1 791 0 discriminator 1
 2375 0f02 7B68     		ldr	r3, [r7, #4]
 2376 0f04 5B68     		ldr	r3, [r3, #4]
 2377 0f06 03F00303 		and	r3, r3, #3
 2378 0f0a 012B     		cmp	r3, #1
 2379 0f0c 02D0     		beq	.L160
 791:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 2380              		.loc 1 791 0 is_stmt 0 discriminator 2
 2381 0f0e BB68     		ldr	r3, [r7, #8]
 2382 0f10 002B     		cmp	r3, #0
 2383 0f12 F2D1     		bne	.L161
 2384              	.L160:
 794:../SPL/src/stm32f10x_can.c ****     }
 795:../SPL/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 2385              		.loc 1 795 0 is_stmt 1
 2386 0f14 7B68     		ldr	r3, [r7, #4]
 2387 0f16 5B68     		ldr	r3, [r3, #4]
 2388 0f18 03F00303 		and	r3, r3, #3
 2389 0f1c 012B     		cmp	r3, #1
 2390 0f1e 03D0     		beq	.L162
 796:../SPL/src/stm32f10x_can.c ****     {
 797:../SPL/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 2391              		.loc 1 797 0
 2392 0f20 4FF00003 		mov	r3, #0
 2393 0f24 FB73     		strb	r3, [r7, #15]
 2394 0f26 52E0     		b	.L163
 2395              	.L162:
 798:../SPL/src/stm32f10x_can.c ****     }
 799:../SPL/src/stm32f10x_can.c ****     else
 800:../SPL/src/stm32f10x_can.c ****     {
 801:../SPL/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 2396              		.loc 1 801 0
 2397 0f28 4FF00103 		mov	r3, #1
 2398 0f2c FB73     		strb	r3, [r7, #15]
 2399 0f2e 4EE0     		b	.L163
 2400              	.L158:
 802:../SPL/src/stm32f10x_can.c ****     }
 803:../SPL/src/stm32f10x_can.c ****   }
 804:../SPL/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 2401              		.loc 1 804 0
 2402 0f30 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2403 0f32 012B     		cmp	r3, #1
 2404 0f34 21D1     		bne	.L164
 805:../SPL/src/stm32f10x_can.c ****   {
 806:../SPL/src/stm32f10x_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 807:../SPL/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 2405              		.loc 1 807 0
 2406 0f36 7B68     		ldr	r3, [r7, #4]
 2407 0f38 1B68     		ldr	r3, [r3, #0]
 2408 0f3a 23F00302 		bic	r2, r3, #3
 2409 0f3e 7B68     		ldr	r3, [r7, #4]
 2410 0f40 1A60     		str	r2, [r3, #0]
 808:../SPL/src/stm32f10x_can.c **** 
 809:../SPL/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 810:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 2411              		.loc 1 810 0
 2412 0f42 03E0     		b	.L165
 2413              	.L167:
 811:../SPL/src/stm32f10x_can.c ****     {
 812:../SPL/src/stm32f10x_can.c ****       timeout--;
 2414              		.loc 1 812 0
 2415 0f44 BB68     		ldr	r3, [r7, #8]
 2416 0f46 03F1FF33 		add	r3, r3, #-1
 2417 0f4a BB60     		str	r3, [r7, #8]
 2418              	.L165:
 810:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 2419              		.loc 1 810 0 discriminator 1
 2420 0f4c 7B68     		ldr	r3, [r7, #4]
 2421 0f4e 5B68     		ldr	r3, [r3, #4]
 2422 0f50 03F00303 		and	r3, r3, #3
 2423 0f54 002B     		cmp	r3, #0
 2424 0f56 02D0     		beq	.L166
 810:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 2425              		.loc 1 810 0 is_stmt 0 discriminator 2
 2426 0f58 BB68     		ldr	r3, [r7, #8]
 2427 0f5a 002B     		cmp	r3, #0
 2428 0f5c F2D1     		bne	.L167
 2429              	.L166:
 813:../SPL/src/stm32f10x_can.c ****     }
 814:../SPL/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 2430              		.loc 1 814 0 is_stmt 1
 2431 0f5e 7B68     		ldr	r3, [r7, #4]
 2432 0f60 5B68     		ldr	r3, [r3, #4]
 2433 0f62 03F00303 		and	r3, r3, #3
 2434 0f66 002B     		cmp	r3, #0
 2435 0f68 03D0     		beq	.L168
 815:../SPL/src/stm32f10x_can.c ****     {
 816:../SPL/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 2436              		.loc 1 816 0
 2437 0f6a 4FF00003 		mov	r3, #0
 2438 0f6e FB73     		strb	r3, [r7, #15]
 2439 0f70 2DE0     		b	.L163
 2440              	.L168:
 817:../SPL/src/stm32f10x_can.c ****     }
 818:../SPL/src/stm32f10x_can.c ****     else
 819:../SPL/src/stm32f10x_can.c ****     {
 820:../SPL/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 2441              		.loc 1 820 0
 2442 0f72 4FF00103 		mov	r3, #1
 2443 0f76 FB73     		strb	r3, [r7, #15]
 2444 0f78 29E0     		b	.L163
 2445              	.L164:
 821:../SPL/src/stm32f10x_can.c ****     }
 822:../SPL/src/stm32f10x_can.c ****   }
 823:../SPL/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 2446              		.loc 1 823 0
 2447 0f7a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2448 0f7c 022B     		cmp	r3, #2
 2449 0f7e 23D1     		bne	.L169
 824:../SPL/src/stm32f10x_can.c ****   {
 825:../SPL/src/stm32f10x_can.c ****     /* Request Sleep mode */
 826:../SPL/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 2450              		.loc 1 826 0
 2451 0f80 7B68     		ldr	r3, [r7, #4]
 2452 0f82 1B68     		ldr	r3, [r3, #0]
 2453 0f84 23F00303 		bic	r3, r3, #3
 2454 0f88 43F00202 		orr	r2, r3, #2
 2455 0f8c 7B68     		ldr	r3, [r7, #4]
 2456 0f8e 1A60     		str	r2, [r3, #0]
 827:../SPL/src/stm32f10x_can.c **** 
 828:../SPL/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 829:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 2457              		.loc 1 829 0
 2458 0f90 03E0     		b	.L170
 2459              	.L172:
 830:../SPL/src/stm32f10x_can.c ****     {
 831:../SPL/src/stm32f10x_can.c ****       timeout--;
 2460              		.loc 1 831 0
 2461 0f92 BB68     		ldr	r3, [r7, #8]
 2462 0f94 03F1FF33 		add	r3, r3, #-1
 2463 0f98 BB60     		str	r3, [r7, #8]
 2464              	.L170:
 829:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 2465              		.loc 1 829 0 discriminator 1
 2466 0f9a 7B68     		ldr	r3, [r7, #4]
 2467 0f9c 5B68     		ldr	r3, [r3, #4]
 2468 0f9e 03F00303 		and	r3, r3, #3
 2469 0fa2 022B     		cmp	r3, #2
 2470 0fa4 02D0     		beq	.L171
 829:../SPL/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 2471              		.loc 1 829 0 is_stmt 0 discriminator 2
 2472 0fa6 BB68     		ldr	r3, [r7, #8]
 2473 0fa8 002B     		cmp	r3, #0
 2474 0faa F2D1     		bne	.L172
 2475              	.L171:
 832:../SPL/src/stm32f10x_can.c ****     }
 833:../SPL/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 2476              		.loc 1 833 0 is_stmt 1
 2477 0fac 7B68     		ldr	r3, [r7, #4]
 2478 0fae 5B68     		ldr	r3, [r3, #4]
 2479 0fb0 03F00303 		and	r3, r3, #3
 2480 0fb4 022B     		cmp	r3, #2
 2481 0fb6 03D0     		beq	.L173
 834:../SPL/src/stm32f10x_can.c ****     {
 835:../SPL/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 2482              		.loc 1 835 0
 2483 0fb8 4FF00003 		mov	r3, #0
 2484 0fbc FB73     		strb	r3, [r7, #15]
 2485 0fbe 06E0     		b	.L163
 2486              	.L173:
 836:../SPL/src/stm32f10x_can.c ****     }
 837:../SPL/src/stm32f10x_can.c ****     else
 838:../SPL/src/stm32f10x_can.c ****     {
 839:../SPL/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 2487              		.loc 1 839 0
 2488 0fc0 4FF00103 		mov	r3, #1
 2489 0fc4 FB73     		strb	r3, [r7, #15]
 2490 0fc6 02E0     		b	.L163
 2491              	.L169:
 840:../SPL/src/stm32f10x_can.c ****     }
 841:../SPL/src/stm32f10x_can.c ****   }
 842:../SPL/src/stm32f10x_can.c ****   else
 843:../SPL/src/stm32f10x_can.c ****   {
 844:../SPL/src/stm32f10x_can.c ****     status = CAN_ModeStatus_Failed;
 2492              		.loc 1 844 0
 2493 0fc8 4FF00003 		mov	r3, #0
 2494 0fcc FB73     		strb	r3, [r7, #15]
 2495              	.L163:
 845:../SPL/src/stm32f10x_can.c ****   }
 846:../SPL/src/stm32f10x_can.c **** 
 847:../SPL/src/stm32f10x_can.c ****   return  (uint8_t) status;
 2496              		.loc 1 847 0
 2497 0fce FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 848:../SPL/src/stm32f10x_can.c **** }
 2498              		.loc 1 848 0
 2499 0fd0 1846     		mov	r0, r3
 2500 0fd2 07F11007 		add	r7, r7, #16
 2501 0fd6 BD46     		mov	sp, r7
 2502 0fd8 80BD     		pop	{r7, pc}
 2503              	.L176:
 2504 0fda 00BF     		.align	2
 2505              	.L175:
 2506 0fdc 00640040 		.word	1073767424
 2507 0fe0 00680040 		.word	1073768448
 2508 0fe4 00000000 		.word	.LC0
 2509              		.cfi_endproc
 2510              	.LFE42:
 2512              		.align	2
 2513              		.global	CAN_Sleep
 2514              		.thumb
 2515              		.thumb_func
 2517              	CAN_Sleep:
 2518              	.LFB43:
 849:../SPL/src/stm32f10x_can.c **** 
 850:../SPL/src/stm32f10x_can.c **** /**
 851:../SPL/src/stm32f10x_can.c ****   * @brief  Enters the low power mode.
 852:../SPL/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 853:../SPL/src/stm32f10x_can.c ****   * @retval status: CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed in an 
 854:../SPL/src/stm32f10x_can.c ****   *                 other case.
 855:../SPL/src/stm32f10x_can.c ****   */
 856:../SPL/src/stm32f10x_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 857:../SPL/src/stm32f10x_can.c **** {
 2519              		.loc 1 857 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 16
 2522              		@ frame_needed = 1, uses_anonymous_args = 0
 2523 0fe8 80B5     		push	{r7, lr}
 2524              	.LCFI42:
 2525              		.cfi_def_cfa_offset 8
 2526              		.cfi_offset 7, -8
 2527              		.cfi_offset 14, -4
 2528 0fea 84B0     		sub	sp, sp, #16
 2529              	.LCFI43:
 2530              		.cfi_def_cfa_offset 24
 2531 0fec 00AF     		add	r7, sp, #0
 2532              	.LCFI44:
 2533              		.cfi_def_cfa_register 7
 2534 0fee 7860     		str	r0, [r7, #4]
 858:../SPL/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 2535              		.loc 1 858 0
 2536 0ff0 4FF00003 		mov	r3, #0
 2537 0ff4 FB73     		strb	r3, [r7, #15]
 859:../SPL/src/stm32f10x_can.c ****   
 860:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 861:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2538              		.loc 1 861 0
 2539 0ff6 7A68     		ldr	r2, [r7, #4]
 2540 0ff8 114B     		ldr	r3, .L181
 2541 0ffa 9A42     		cmp	r2, r3
 2542 0ffc 08D0     		beq	.L178
 2543              		.loc 1 861 0 is_stmt 0 discriminator 1
 2544 0ffe 7A68     		ldr	r2, [r7, #4]
 2545 1000 104B     		ldr	r3, .L181+4
 2546 1002 9A42     		cmp	r2, r3
 2547 1004 04D0     		beq	.L178
 2548              		.loc 1 861 0 discriminator 2
 2549 1006 1048     		ldr	r0, .L181+8
 2550 1008 40F25D31 		movw	r1, #861
 2551 100c FFF7FEFF 		bl	assert_failed
 2552              	.L178:
 862:../SPL/src/stm32f10x_can.c ****     
 863:../SPL/src/stm32f10x_can.c ****   /* Request Sleep mode */
 864:../SPL/src/stm32f10x_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 2553              		.loc 1 864 0 is_stmt 1
 2554 1010 7B68     		ldr	r3, [r7, #4]
 2555 1012 1B68     		ldr	r3, [r3, #0]
 2556 1014 23F00303 		bic	r3, r3, #3
 2557 1018 43F00202 		orr	r2, r3, #2
 2558 101c 7B68     		ldr	r3, [r7, #4]
 2559 101e 1A60     		str	r2, [r3, #0]
 865:../SPL/src/stm32f10x_can.c ****    
 866:../SPL/src/stm32f10x_can.c ****   /* Sleep mode status */
 867:../SPL/src/stm32f10x_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 2560              		.loc 1 867 0
 2561 1020 7B68     		ldr	r3, [r7, #4]
 2562 1022 5B68     		ldr	r3, [r3, #4]
 2563 1024 03F00303 		and	r3, r3, #3
 2564 1028 022B     		cmp	r3, #2
 2565 102a 02D1     		bne	.L179
 868:../SPL/src/stm32f10x_can.c ****   {
 869:../SPL/src/stm32f10x_can.c ****     /* Sleep mode not entered */
 870:../SPL/src/stm32f10x_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 2566              		.loc 1 870 0
 2567 102c 4FF00103 		mov	r3, #1
 2568 1030 FB73     		strb	r3, [r7, #15]
 2569              	.L179:
 871:../SPL/src/stm32f10x_can.c ****   }
 872:../SPL/src/stm32f10x_can.c ****   /* return sleep mode status */
 873:../SPL/src/stm32f10x_can.c ****    return (uint8_t)sleepstatus;
 2570              		.loc 1 873 0
 2571 1032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 874:../SPL/src/stm32f10x_can.c **** }
 2572              		.loc 1 874 0
 2573 1034 1846     		mov	r0, r3
 2574 1036 07F11007 		add	r7, r7, #16
 2575 103a BD46     		mov	sp, r7
 2576 103c 80BD     		pop	{r7, pc}
 2577              	.L182:
 2578 103e 00BF     		.align	2
 2579              	.L181:
 2580 1040 00640040 		.word	1073767424
 2581 1044 00680040 		.word	1073768448
 2582 1048 00000000 		.word	.LC0
 2583              		.cfi_endproc
 2584              	.LFE43:
 2586              		.align	2
 2587              		.global	CAN_WakeUp
 2588              		.thumb
 2589              		.thumb_func
 2591              	CAN_WakeUp:
 2592              	.LFB44:
 875:../SPL/src/stm32f10x_can.c **** 
 876:../SPL/src/stm32f10x_can.c **** /**
 877:../SPL/src/stm32f10x_can.c ****   * @brief  Wakes the CAN up.
 878:../SPL/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
 879:../SPL/src/stm32f10x_can.c ****   * @retval status:  CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed in an 
 880:../SPL/src/stm32f10x_can.c ****   *                  other case.
 881:../SPL/src/stm32f10x_can.c ****   */
 882:../SPL/src/stm32f10x_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 883:../SPL/src/stm32f10x_can.c **** {
 2593              		.loc 1 883 0
 2594              		.cfi_startproc
 2595              		@ args = 0, pretend = 0, frame = 16
 2596              		@ frame_needed = 1, uses_anonymous_args = 0
 2597 104c 80B5     		push	{r7, lr}
 2598              	.LCFI45:
 2599              		.cfi_def_cfa_offset 8
 2600              		.cfi_offset 7, -8
 2601              		.cfi_offset 14, -4
 2602 104e 84B0     		sub	sp, sp, #16
 2603              	.LCFI46:
 2604              		.cfi_def_cfa_offset 24
 2605 1050 00AF     		add	r7, sp, #0
 2606              	.LCFI47:
 2607              		.cfi_def_cfa_register 7
 2608 1052 7860     		str	r0, [r7, #4]
 884:../SPL/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 2609              		.loc 1 884 0
 2610 1054 4FF6FF73 		movw	r3, #65535
 2611 1058 FB60     		str	r3, [r7, #12]
 885:../SPL/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 2612              		.loc 1 885 0
 2613 105a 4FF00003 		mov	r3, #0
 2614 105e FB72     		strb	r3, [r7, #11]
 886:../SPL/src/stm32f10x_can.c ****   
 887:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 888:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2615              		.loc 1 888 0
 2616 1060 7A68     		ldr	r2, [r7, #4]
 2617 1062 174B     		ldr	r3, .L190
 2618 1064 9A42     		cmp	r2, r3
 2619 1066 08D0     		beq	.L184
 2620              		.loc 1 888 0 is_stmt 0 discriminator 1
 2621 1068 7A68     		ldr	r2, [r7, #4]
 2622 106a 164B     		ldr	r3, .L190+4
 2623 106c 9A42     		cmp	r2, r3
 2624 106e 04D0     		beq	.L184
 2625              		.loc 1 888 0 discriminator 2
 2626 1070 1548     		ldr	r0, .L190+8
 2627 1072 4FF45E71 		mov	r1, #888
 2628 1076 FFF7FEFF 		bl	assert_failed
 2629              	.L184:
 889:../SPL/src/stm32f10x_can.c ****     
 890:../SPL/src/stm32f10x_can.c ****   /* Wake up request */
 891:../SPL/src/stm32f10x_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 2630              		.loc 1 891 0 is_stmt 1
 2631 107a 7B68     		ldr	r3, [r7, #4]
 2632 107c 1B68     		ldr	r3, [r3, #0]
 2633 107e 23F00202 		bic	r2, r3, #2
 2634 1082 7B68     		ldr	r3, [r7, #4]
 2635 1084 1A60     		str	r2, [r3, #0]
 892:../SPL/src/stm32f10x_can.c ****     
 893:../SPL/src/stm32f10x_can.c ****   /* Sleep mode status */
 894:../SPL/src/stm32f10x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 2636              		.loc 1 894 0
 2637 1086 03E0     		b	.L185
 2638              	.L187:
 895:../SPL/src/stm32f10x_can.c ****   {
 896:../SPL/src/stm32f10x_can.c ****    wait_slak--;
 2639              		.loc 1 896 0
 2640 1088 FB68     		ldr	r3, [r7, #12]
 2641 108a 03F1FF33 		add	r3, r3, #-1
 2642 108e FB60     		str	r3, [r7, #12]
 2643              	.L185:
 894:../SPL/src/stm32f10x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 2644              		.loc 1 894 0 discriminator 1
 2645 1090 7B68     		ldr	r3, [r7, #4]
 2646 1092 5B68     		ldr	r3, [r3, #4]
 2647 1094 03F00203 		and	r3, r3, #2
 2648 1098 002B     		cmp	r3, #0
 2649 109a 02D0     		beq	.L186
 894:../SPL/src/stm32f10x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 2650              		.loc 1 894 0 is_stmt 0 discriminator 2
 2651 109c FB68     		ldr	r3, [r7, #12]
 2652 109e 002B     		cmp	r3, #0
 2653 10a0 F2D1     		bne	.L187
 2654              	.L186:
 897:../SPL/src/stm32f10x_can.c ****   }
 898:../SPL/src/stm32f10x_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 2655              		.loc 1 898 0 is_stmt 1
 2656 10a2 7B68     		ldr	r3, [r7, #4]
 2657 10a4 5B68     		ldr	r3, [r3, #4]
 2658 10a6 03F00203 		and	r3, r3, #2
 2659 10aa 002B     		cmp	r3, #0
 2660 10ac 02D1     		bne	.L188
 899:../SPL/src/stm32f10x_can.c ****   {
 900:../SPL/src/stm32f10x_can.c ****    /* wake up done : Sleep mode exited */
 901:../SPL/src/stm32f10x_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 2661              		.loc 1 901 0
 2662 10ae 4FF00103 		mov	r3, #1
 2663 10b2 FB72     		strb	r3, [r7, #11]
 2664              	.L188:
 902:../SPL/src/stm32f10x_can.c ****   }
 903:../SPL/src/stm32f10x_can.c ****   /* return wakeup status */
 904:../SPL/src/stm32f10x_can.c ****   return (uint8_t)wakeupstatus;
 2665              		.loc 1 904 0
 2666 10b4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 905:../SPL/src/stm32f10x_can.c **** }
 2667              		.loc 1 905 0
 2668 10b6 1846     		mov	r0, r3
 2669 10b8 07F11007 		add	r7, r7, #16
 2670 10bc BD46     		mov	sp, r7
 2671 10be 80BD     		pop	{r7, pc}
 2672              	.L191:
 2673              		.align	2
 2674              	.L190:
 2675 10c0 00640040 		.word	1073767424
 2676 10c4 00680040 		.word	1073768448
 2677 10c8 00000000 		.word	.LC0
 2678              		.cfi_endproc
 2679              	.LFE44:
 2681              		.align	2
 2682              		.global	CAN_GetLastErrorCode
 2683              		.thumb
 2684              		.thumb_func
 2686              	CAN_GetLastErrorCode:
 2687              	.LFB45:
 906:../SPL/src/stm32f10x_can.c **** 
 907:../SPL/src/stm32f10x_can.c **** 
 908:../SPL/src/stm32f10x_can.c **** /**
 909:../SPL/src/stm32f10x_can.c ****   * @brief  Returns the CANx's last error code (LEC).
 910:../SPL/src/stm32f10x_can.c ****   * @param  CANx:          where x can be 1 or 2 to to select the CAN peripheral.  
 911:../SPL/src/stm32f10x_can.c ****   * @retval CAN_ErrorCode: specifies the Error code : 
 912:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_NoErr            No Error  
 913:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_StuffErr         Stuff Error
 914:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_FormErr          Form Error
 915:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_ACKErr           Acknowledgment Error
 916:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitRecessiveErr  Bit Recessive Error
 917:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitDominantErr   Bit Dominant Error
 918:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_CRCErr           CRC Error
 919:../SPL/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_SoftwareSetErr   Software Set Error  
 920:../SPL/src/stm32f10x_can.c ****   */
 921:../SPL/src/stm32f10x_can.c ****  
 922:../SPL/src/stm32f10x_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
 923:../SPL/src/stm32f10x_can.c **** {
 2688              		.loc 1 923 0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 16
 2691              		@ frame_needed = 1, uses_anonymous_args = 0
 2692 10cc 80B5     		push	{r7, lr}
 2693              	.LCFI48:
 2694              		.cfi_def_cfa_offset 8
 2695              		.cfi_offset 7, -8
 2696              		.cfi_offset 14, -4
 2697 10ce 84B0     		sub	sp, sp, #16
 2698              	.LCFI49:
 2699              		.cfi_def_cfa_offset 24
 2700 10d0 00AF     		add	r7, sp, #0
 2701              	.LCFI50:
 2702              		.cfi_def_cfa_register 7
 2703 10d2 7860     		str	r0, [r7, #4]
 924:../SPL/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 2704              		.loc 1 924 0
 2705 10d4 4FF00003 		mov	r3, #0
 2706 10d8 FB73     		strb	r3, [r7, #15]
 925:../SPL/src/stm32f10x_can.c ****   
 926:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 927:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2707              		.loc 1 927 0
 2708 10da 7A68     		ldr	r2, [r7, #4]
 2709 10dc 0B4B     		ldr	r3, .L195
 2710 10de 9A42     		cmp	r2, r3
 2711 10e0 08D0     		beq	.L193
 2712              		.loc 1 927 0 is_stmt 0 discriminator 1
 2713 10e2 7A68     		ldr	r2, [r7, #4]
 2714 10e4 0A4B     		ldr	r3, .L195+4
 2715 10e6 9A42     		cmp	r2, r3
 2716 10e8 04D0     		beq	.L193
 2717              		.loc 1 927 0 discriminator 2
 2718 10ea 0A48     		ldr	r0, .L195+8
 2719 10ec 40F29F31 		movw	r1, #927
 2720 10f0 FFF7FEFF 		bl	assert_failed
 2721              	.L193:
 928:../SPL/src/stm32f10x_can.c ****   
 929:../SPL/src/stm32f10x_can.c ****   /* Get the error code*/
 930:../SPL/src/stm32f10x_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 2722              		.loc 1 930 0 is_stmt 1
 2723 10f4 7B68     		ldr	r3, [r7, #4]
 2724 10f6 9B69     		ldr	r3, [r3, #24]
 2725 10f8 DBB2     		uxtb	r3, r3
 2726 10fa 03F07003 		and	r3, r3, #112
 2727 10fe FB73     		strb	r3, [r7, #15]
 931:../SPL/src/stm32f10x_can.c ****   
 932:../SPL/src/stm32f10x_can.c ****   /* Return the error code*/
 933:../SPL/src/stm32f10x_can.c ****   return errorcode;
 2728              		.loc 1 933 0
 2729 1100 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 934:../SPL/src/stm32f10x_can.c **** }
 2730              		.loc 1 934 0
 2731 1102 1846     		mov	r0, r3
 2732 1104 07F11007 		add	r7, r7, #16
 2733 1108 BD46     		mov	sp, r7
 2734 110a 80BD     		pop	{r7, pc}
 2735              	.L196:
 2736              		.align	2
 2737              	.L195:
 2738 110c 00640040 		.word	1073767424
 2739 1110 00680040 		.word	1073768448
 2740 1114 00000000 		.word	.LC0
 2741              		.cfi_endproc
 2742              	.LFE45:
 2744              		.align	2
 2745              		.global	CAN_GetReceiveErrorCounter
 2746              		.thumb
 2747              		.thumb_func
 2749              	CAN_GetReceiveErrorCounter:
 2750              	.LFB46:
 935:../SPL/src/stm32f10x_can.c **** /**
 936:../SPL/src/stm32f10x_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
 937:../SPL/src/stm32f10x_can.c ****   * @note   In case of an error during reception, this counter is incremented 
 938:../SPL/src/stm32f10x_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
 939:../SPL/src/stm32f10x_can.c ****   *         standard. After every successful reception, the counter is 
 940:../SPL/src/stm32f10x_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
 941:../SPL/src/stm32f10x_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
 942:../SPL/src/stm32f10x_can.c ****   *         error passive state.  
 943:../SPL/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
 944:../SPL/src/stm32f10x_can.c ****   * @retval CAN Receive Error Counter. 
 945:../SPL/src/stm32f10x_can.c ****   */
 946:../SPL/src/stm32f10x_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
 947:../SPL/src/stm32f10x_can.c **** {
 2751              		.loc 1 947 0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 16
 2754              		@ frame_needed = 1, uses_anonymous_args = 0
 2755 1118 80B5     		push	{r7, lr}
 2756              	.LCFI51:
 2757              		.cfi_def_cfa_offset 8
 2758              		.cfi_offset 7, -8
 2759              		.cfi_offset 14, -4
 2760 111a 84B0     		sub	sp, sp, #16
 2761              	.LCFI52:
 2762              		.cfi_def_cfa_offset 24
 2763 111c 00AF     		add	r7, sp, #0
 2764              	.LCFI53:
 2765              		.cfi_def_cfa_register 7
 2766 111e 7860     		str	r0, [r7, #4]
 948:../SPL/src/stm32f10x_can.c ****   uint8_t counter=0;
 2767              		.loc 1 948 0
 2768 1120 4FF00003 		mov	r3, #0
 2769 1124 FB73     		strb	r3, [r7, #15]
 949:../SPL/src/stm32f10x_can.c ****   
 950:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 951:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2770              		.loc 1 951 0
 2771 1126 7A68     		ldr	r2, [r7, #4]
 2772 1128 0B4B     		ldr	r3, .L200
 2773 112a 9A42     		cmp	r2, r3
 2774 112c 08D0     		beq	.L198
 2775              		.loc 1 951 0 is_stmt 0 discriminator 1
 2776 112e 7A68     		ldr	r2, [r7, #4]
 2777 1130 0A4B     		ldr	r3, .L200+4
 2778 1132 9A42     		cmp	r2, r3
 2779 1134 04D0     		beq	.L198
 2780              		.loc 1 951 0 discriminator 2
 2781 1136 0A48     		ldr	r0, .L200+8
 2782 1138 40F2B731 		movw	r1, #951
 2783 113c FFF7FEFF 		bl	assert_failed
 2784              	.L198:
 952:../SPL/src/stm32f10x_can.c ****   
 953:../SPL/src/stm32f10x_can.c ****   /* Get the Receive Error Counter*/
 954:../SPL/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 2785              		.loc 1 954 0 is_stmt 1
 2786 1140 7B68     		ldr	r3, [r7, #4]
 2787 1142 9B69     		ldr	r3, [r3, #24]
 2788 1144 4FEA1363 		lsr	r3, r3, #24
 2789 1148 FB73     		strb	r3, [r7, #15]
 955:../SPL/src/stm32f10x_can.c ****   
 956:../SPL/src/stm32f10x_can.c ****   /* Return the Receive Error Counter*/
 957:../SPL/src/stm32f10x_can.c ****   return counter;
 2790              		.loc 1 957 0
 2791 114a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 958:../SPL/src/stm32f10x_can.c **** }
 2792              		.loc 1 958 0
 2793 114c 1846     		mov	r0, r3
 2794 114e 07F11007 		add	r7, r7, #16
 2795 1152 BD46     		mov	sp, r7
 2796 1154 80BD     		pop	{r7, pc}
 2797              	.L201:
 2798 1156 00BF     		.align	2
 2799              	.L200:
 2800 1158 00640040 		.word	1073767424
 2801 115c 00680040 		.word	1073768448
 2802 1160 00000000 		.word	.LC0
 2803              		.cfi_endproc
 2804              	.LFE46:
 2806              		.align	2
 2807              		.global	CAN_GetLSBTransmitErrorCounter
 2808              		.thumb
 2809              		.thumb_func
 2811              	CAN_GetLSBTransmitErrorCounter:
 2812              	.LFB47:
 959:../SPL/src/stm32f10x_can.c **** 
 960:../SPL/src/stm32f10x_can.c **** 
 961:../SPL/src/stm32f10x_can.c **** /**
 962:../SPL/src/stm32f10x_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
 963:../SPL/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.  
 964:../SPL/src/stm32f10x_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
 965:../SPL/src/stm32f10x_can.c ****   */
 966:../SPL/src/stm32f10x_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
 967:../SPL/src/stm32f10x_can.c **** {
 2813              		.loc 1 967 0
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 16
 2816              		@ frame_needed = 1, uses_anonymous_args = 0
 2817 1164 80B5     		push	{r7, lr}
 2818              	.LCFI54:
 2819              		.cfi_def_cfa_offset 8
 2820              		.cfi_offset 7, -8
 2821              		.cfi_offset 14, -4
 2822 1166 84B0     		sub	sp, sp, #16
 2823              	.LCFI55:
 2824              		.cfi_def_cfa_offset 24
 2825 1168 00AF     		add	r7, sp, #0
 2826              	.LCFI56:
 2827              		.cfi_def_cfa_register 7
 2828 116a 7860     		str	r0, [r7, #4]
 968:../SPL/src/stm32f10x_can.c ****   uint8_t counter=0;
 2829              		.loc 1 968 0
 2830 116c 4FF00003 		mov	r3, #0
 2831 1170 FB73     		strb	r3, [r7, #15]
 969:../SPL/src/stm32f10x_can.c ****   
 970:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
 971:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2832              		.loc 1 971 0
 2833 1172 7A68     		ldr	r2, [r7, #4]
 2834 1174 0C4B     		ldr	r3, .L205
 2835 1176 9A42     		cmp	r2, r3
 2836 1178 08D0     		beq	.L203
 2837              		.loc 1 971 0 is_stmt 0 discriminator 1
 2838 117a 7A68     		ldr	r2, [r7, #4]
 2839 117c 0B4B     		ldr	r3, .L205+4
 2840 117e 9A42     		cmp	r2, r3
 2841 1180 04D0     		beq	.L203
 2842              		.loc 1 971 0 discriminator 2
 2843 1182 0B48     		ldr	r0, .L205+8
 2844 1184 40F2CB31 		movw	r1, #971
 2845 1188 FFF7FEFF 		bl	assert_failed
 2846              	.L203:
 972:../SPL/src/stm32f10x_can.c ****   
 973:../SPL/src/stm32f10x_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 974:../SPL/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 2847              		.loc 1 974 0 is_stmt 1
 2848 118c 7B68     		ldr	r3, [r7, #4]
 2849 118e 9B69     		ldr	r3, [r3, #24]
 2850 1190 03F47F03 		and	r3, r3, #16711680
 2851 1194 4FEA1343 		lsr	r3, r3, #16
 2852 1198 FB73     		strb	r3, [r7, #15]
 975:../SPL/src/stm32f10x_can.c ****   
 976:../SPL/src/stm32f10x_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 977:../SPL/src/stm32f10x_can.c ****   return counter;
 2853              		.loc 1 977 0
 2854 119a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 978:../SPL/src/stm32f10x_can.c **** }
 2855              		.loc 1 978 0
 2856 119c 1846     		mov	r0, r3
 2857 119e 07F11007 		add	r7, r7, #16
 2858 11a2 BD46     		mov	sp, r7
 2859 11a4 80BD     		pop	{r7, pc}
 2860              	.L206:
 2861 11a6 00BF     		.align	2
 2862              	.L205:
 2863 11a8 00640040 		.word	1073767424
 2864 11ac 00680040 		.word	1073768448
 2865 11b0 00000000 		.word	.LC0
 2866              		.cfi_endproc
 2867              	.LFE47:
 2869              		.align	2
 2870              		.global	CAN_ITConfig
 2871              		.thumb
 2872              		.thumb_func
 2874              	CAN_ITConfig:
 2875              	.LFB48:
 979:../SPL/src/stm32f10x_can.c **** 
 980:../SPL/src/stm32f10x_can.c **** 
 981:../SPL/src/stm32f10x_can.c **** /**
 982:../SPL/src/stm32f10x_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
 983:../SPL/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 984:../SPL/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
 985:../SPL/src/stm32f10x_can.c ****   *                 This parameter can be: 
 986:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_TME, 
 987:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP0, 
 988:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_FF0,
 989:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV0, 
 990:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP1, 
 991:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_FF1,
 992:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV1, 
 993:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_EWG, 
 994:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_EPV,
 995:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_LEC, 
 996:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_ERR, 
 997:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_WKU or 
 998:../SPL/src/stm32f10x_can.c ****   *                 - CAN_IT_SLK.
 999:../SPL/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN interrupts.
1000:../SPL/src/stm32f10x_can.c ****   *                   This parameter can be: ENABLE or DISABLE.
1001:../SPL/src/stm32f10x_can.c ****   * @retval None.
1002:../SPL/src/stm32f10x_can.c ****   */
1003:../SPL/src/stm32f10x_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1004:../SPL/src/stm32f10x_can.c **** {
 2876              		.loc 1 1004 0
 2877              		.cfi_startproc
 2878              		@ args = 0, pretend = 0, frame = 16
 2879              		@ frame_needed = 1, uses_anonymous_args = 0
 2880 11b4 80B5     		push	{r7, lr}
 2881              	.LCFI57:
 2882              		.cfi_def_cfa_offset 8
 2883              		.cfi_offset 7, -8
 2884              		.cfi_offset 14, -4
 2885 11b6 84B0     		sub	sp, sp, #16
 2886              	.LCFI58:
 2887              		.cfi_def_cfa_offset 24
 2888 11b8 00AF     		add	r7, sp, #0
 2889              	.LCFI59:
 2890              		.cfi_def_cfa_register 7
 2891 11ba F860     		str	r0, [r7, #12]
 2892 11bc B960     		str	r1, [r7, #8]
 2893 11be 1346     		mov	r3, r2
 2894 11c0 FB71     		strb	r3, [r7, #7]
1005:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
1006:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 2895              		.loc 1 1006 0
 2896 11c2 FA68     		ldr	r2, [r7, #12]
 2897 11c4 314B     		ldr	r3, .L213
 2898 11c6 9A42     		cmp	r2, r3
 2899 11c8 08D0     		beq	.L208
 2900              		.loc 1 1006 0 is_stmt 0 discriminator 1
 2901 11ca FA68     		ldr	r2, [r7, #12]
 2902 11cc 304B     		ldr	r3, .L213+4
 2903 11ce 9A42     		cmp	r2, r3
 2904 11d0 04D0     		beq	.L208
 2905              		.loc 1 1006 0 discriminator 2
 2906 11d2 3048     		ldr	r0, .L213+8
 2907 11d4 40F2EE31 		movw	r1, #1006
 2908 11d8 FFF7FEFF 		bl	assert_failed
 2909              	.L208:
1007:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
 2910              		.loc 1 1007 0 is_stmt 1
 2911 11dc BB68     		ldr	r3, [r7, #8]
 2912 11de 012B     		cmp	r3, #1
 2913 11e0 32D0     		beq	.L209
 2914              		.loc 1 1007 0 is_stmt 0 discriminator 1
 2915 11e2 BB68     		ldr	r3, [r7, #8]
 2916 11e4 022B     		cmp	r3, #2
 2917 11e6 2FD0     		beq	.L209
 2918              		.loc 1 1007 0 discriminator 2
 2919 11e8 BB68     		ldr	r3, [r7, #8]
 2920 11ea 042B     		cmp	r3, #4
 2921 11ec 2CD0     		beq	.L209
 2922              		.loc 1 1007 0 discriminator 3
 2923 11ee BB68     		ldr	r3, [r7, #8]
 2924 11f0 082B     		cmp	r3, #8
 2925 11f2 29D0     		beq	.L209
 2926              		.loc 1 1007 0 discriminator 4
 2927 11f4 BB68     		ldr	r3, [r7, #8]
 2928 11f6 102B     		cmp	r3, #16
 2929 11f8 26D0     		beq	.L209
 2930              		.loc 1 1007 0 discriminator 5
 2931 11fa BB68     		ldr	r3, [r7, #8]
 2932 11fc 202B     		cmp	r3, #32
 2933 11fe 23D0     		beq	.L209
 2934              		.loc 1 1007 0 discriminator 6
 2935 1200 BB68     		ldr	r3, [r7, #8]
 2936 1202 402B     		cmp	r3, #64
 2937 1204 20D0     		beq	.L209
 2938              		.loc 1 1007 0 discriminator 7
 2939 1206 BB68     		ldr	r3, [r7, #8]
 2940 1208 B3F5807F 		cmp	r3, #256
 2941 120c 1CD0     		beq	.L209
 2942              		.loc 1 1007 0 discriminator 8
 2943 120e BB68     		ldr	r3, [r7, #8]
 2944 1210 B3F5007F 		cmp	r3, #512
 2945 1214 18D0     		beq	.L209
 2946              		.loc 1 1007 0 discriminator 9
 2947 1216 BB68     		ldr	r3, [r7, #8]
 2948 1218 B3F5806F 		cmp	r3, #1024
 2949 121c 14D0     		beq	.L209
 2950              		.loc 1 1007 0 discriminator 10
 2951 121e BB68     		ldr	r3, [r7, #8]
 2952 1220 B3F5006F 		cmp	r3, #2048
 2953 1224 10D0     		beq	.L209
 2954              		.loc 1 1007 0 discriminator 11
 2955 1226 BB68     		ldr	r3, [r7, #8]
 2956 1228 B3F5004F 		cmp	r3, #32768
 2957 122c 0CD0     		beq	.L209
 2958              		.loc 1 1007 0 discriminator 12
 2959 122e BB68     		ldr	r3, [r7, #8]
 2960 1230 B3F5803F 		cmp	r3, #65536
 2961 1234 08D0     		beq	.L209
 2962              		.loc 1 1007 0 discriminator 13
 2963 1236 BB68     		ldr	r3, [r7, #8]
 2964 1238 B3F5003F 		cmp	r3, #131072
 2965 123c 04D0     		beq	.L209
 2966              		.loc 1 1007 0 discriminator 14
 2967 123e 1548     		ldr	r0, .L213+8
 2968 1240 40F2EF31 		movw	r1, #1007
 2969 1244 FFF7FEFF 		bl	assert_failed
 2970              	.L209:
1008:../SPL/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2971              		.loc 1 1008 0 is_stmt 1
 2972 1248 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2973 124a 002B     		cmp	r3, #0
 2974 124c 07D0     		beq	.L210
 2975              		.loc 1 1008 0 is_stmt 0 discriminator 1
 2976 124e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2977 1250 012B     		cmp	r3, #1
 2978 1252 04D0     		beq	.L210
 2979              		.loc 1 1008 0 discriminator 2
 2980 1254 0F48     		ldr	r0, .L213+8
 2981 1256 4FF47C71 		mov	r1, #1008
 2982 125a FFF7FEFF 		bl	assert_failed
 2983              	.L210:
1009:../SPL/src/stm32f10x_can.c **** 
1010:../SPL/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 2984              		.loc 1 1010 0 is_stmt 1
 2985 125e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2986 1260 002B     		cmp	r3, #0
 2987 1262 06D0     		beq	.L211
1011:../SPL/src/stm32f10x_can.c ****   {
1012:../SPL/src/stm32f10x_can.c ****     /* Enable the selected CANx interrupt */
1013:../SPL/src/stm32f10x_can.c ****     CANx->IER |= CAN_IT;
 2988              		.loc 1 1013 0
 2989 1264 FB68     		ldr	r3, [r7, #12]
 2990 1266 5A69     		ldr	r2, [r3, #20]
 2991 1268 BB68     		ldr	r3, [r7, #8]
 2992 126a 1A43     		orrs	r2, r2, r3
 2993 126c FB68     		ldr	r3, [r7, #12]
 2994 126e 5A61     		str	r2, [r3, #20]
 2995 1270 07E0     		b	.L207
 2996              	.L211:
1014:../SPL/src/stm32f10x_can.c ****   }
1015:../SPL/src/stm32f10x_can.c ****   else
1016:../SPL/src/stm32f10x_can.c ****   {
1017:../SPL/src/stm32f10x_can.c ****     /* Disable the selected CANx interrupt */
1018:../SPL/src/stm32f10x_can.c ****     CANx->IER &= ~CAN_IT;
 2997              		.loc 1 1018 0
 2998 1272 FB68     		ldr	r3, [r7, #12]
 2999 1274 5A69     		ldr	r2, [r3, #20]
 3000 1276 BB68     		ldr	r3, [r7, #8]
 3001 1278 6FEA0303 		mvn	r3, r3
 3002 127c 1A40     		ands	r2, r2, r3
 3003 127e FB68     		ldr	r3, [r7, #12]
 3004 1280 5A61     		str	r2, [r3, #20]
 3005              	.L207:
1019:../SPL/src/stm32f10x_can.c ****   }
1020:../SPL/src/stm32f10x_can.c **** }
 3006              		.loc 1 1020 0
 3007 1282 07F11007 		add	r7, r7, #16
 3008 1286 BD46     		mov	sp, r7
 3009 1288 80BD     		pop	{r7, pc}
 3010              	.L214:
 3011 128a 00BF     		.align	2
 3012              	.L213:
 3013 128c 00640040 		.word	1073767424
 3014 1290 00680040 		.word	1073768448
 3015 1294 00000000 		.word	.LC0
 3016              		.cfi_endproc
 3017              	.LFE48:
 3019              		.align	2
 3020              		.global	CAN_GetFlagStatus
 3021              		.thumb
 3022              		.thumb_func
 3024              	CAN_GetFlagStatus:
 3025              	.LFB49:
1021:../SPL/src/stm32f10x_can.c **** /**
1022:../SPL/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1023:../SPL/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1024:../SPL/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1025:../SPL/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1026:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EWG
1027:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EPV 
1028:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_BOF
1029:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP0
1030:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP1
1031:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP2
1032:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP1   
1033:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF1       
1034:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV1   
1035:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP0   
1036:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF0       
1037:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV0   
1038:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_WKU 
1039:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_SLAK  
1040:../SPL/src/stm32f10x_can.c ****   *                  - CAN_FLAG_LEC       
1041:../SPL/src/stm32f10x_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1042:../SPL/src/stm32f10x_can.c ****   */
1043:../SPL/src/stm32f10x_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1044:../SPL/src/stm32f10x_can.c **** {
 3026              		.loc 1 1044 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 16
 3029              		@ frame_needed = 1, uses_anonymous_args = 0
 3030 1298 80B5     		push	{r7, lr}
 3031              	.LCFI60:
 3032              		.cfi_def_cfa_offset 8
 3033              		.cfi_offset 7, -8
 3034              		.cfi_offset 14, -4
 3035 129a 84B0     		sub	sp, sp, #16
 3036              	.LCFI61:
 3037              		.cfi_def_cfa_offset 24
 3038 129c 00AF     		add	r7, sp, #0
 3039              	.LCFI62:
 3040              		.cfi_def_cfa_register 7
 3041 129e 7860     		str	r0, [r7, #4]
 3042 12a0 3960     		str	r1, [r7, #0]
1045:../SPL/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
 3043              		.loc 1 1045 0
 3044 12a2 4FF00003 		mov	r3, #0
 3045 12a6 FB73     		strb	r3, [r7, #15]
1046:../SPL/src/stm32f10x_can.c ****   
1047:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
1048:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 3046              		.loc 1 1048 0
 3047 12a8 7A68     		ldr	r2, [r7, #4]
 3048 12aa 604B     		ldr	r3, .L229
 3049 12ac 9A42     		cmp	r2, r3
 3050 12ae 08D0     		beq	.L216
 3051              		.loc 1 1048 0 is_stmt 0 discriminator 1
 3052 12b0 7A68     		ldr	r2, [r7, #4]
 3053 12b2 5F4B     		ldr	r3, .L229+4
 3054 12b4 9A42     		cmp	r2, r3
 3055 12b6 04D0     		beq	.L216
 3056              		.loc 1 1048 0 discriminator 2
 3057 12b8 5E48     		ldr	r0, .L229+8
 3058 12ba 4FF48361 		mov	r1, #1048
 3059 12be FFF7FEFF 		bl	assert_failed
 3060              	.L216:
1049:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
 3061              		.loc 1 1049 0 is_stmt 1
 3062 12c2 3A68     		ldr	r2, [r7, #0]
 3063 12c4 5C4B     		ldr	r3, .L229+12
 3064 12c6 9A42     		cmp	r2, r3
 3065 12c8 3CD0     		beq	.L217
 3066              		.loc 1 1049 0 is_stmt 0 discriminator 1
 3067 12ca 3A68     		ldr	r2, [r7, #0]
 3068 12cc 5B4B     		ldr	r3, .L229+16
 3069 12ce 9A42     		cmp	r2, r3
 3070 12d0 38D0     		beq	.L217
 3071              		.loc 1 1049 0 discriminator 2
 3072 12d2 3A68     		ldr	r2, [r7, #0]
 3073 12d4 5A4B     		ldr	r3, .L229+20
 3074 12d6 9A42     		cmp	r2, r3
 3075 12d8 34D0     		beq	.L217
 3076              		.loc 1 1049 0 discriminator 3
 3077 12da 3A68     		ldr	r2, [r7, #0]
 3078 12dc 594B     		ldr	r3, .L229+24
 3079 12de 9A42     		cmp	r2, r3
 3080 12e0 30D0     		beq	.L217
 3081              		.loc 1 1049 0 discriminator 4
 3082 12e2 3A68     		ldr	r2, [r7, #0]
 3083 12e4 584B     		ldr	r3, .L229+28
 3084 12e6 9A42     		cmp	r2, r3
 3085 12e8 2CD0     		beq	.L217
 3086              		.loc 1 1049 0 discriminator 5
 3087 12ea 3A68     		ldr	r2, [r7, #0]
 3088 12ec 574B     		ldr	r3, .L229+32
 3089 12ee 9A42     		cmp	r2, r3
 3090 12f0 28D0     		beq	.L217
 3091              		.loc 1 1049 0 discriminator 6
 3092 12f2 3A68     		ldr	r2, [r7, #0]
 3093 12f4 564B     		ldr	r3, .L229+36
 3094 12f6 9A42     		cmp	r2, r3
 3095 12f8 24D0     		beq	.L217
 3096              		.loc 1 1049 0 discriminator 7
 3097 12fa 3A68     		ldr	r2, [r7, #0]
 3098 12fc 554B     		ldr	r3, .L229+40
 3099 12fe 9A42     		cmp	r2, r3
 3100 1300 20D0     		beq	.L217
 3101              		.loc 1 1049 0 discriminator 8
 3102 1302 3A68     		ldr	r2, [r7, #0]
 3103 1304 544B     		ldr	r3, .L229+44
 3104 1306 9A42     		cmp	r2, r3
 3105 1308 1CD0     		beq	.L217
 3106              		.loc 1 1049 0 discriminator 9
 3107 130a 3A68     		ldr	r2, [r7, #0]
 3108 130c 534B     		ldr	r3, .L229+48
 3109 130e 9A42     		cmp	r2, r3
 3110 1310 18D0     		beq	.L217
 3111              		.loc 1 1049 0 discriminator 10
 3112 1312 3A68     		ldr	r2, [r7, #0]
 3113 1314 524B     		ldr	r3, .L229+52
 3114 1316 9A42     		cmp	r2, r3
 3115 1318 14D0     		beq	.L217
 3116              		.loc 1 1049 0 discriminator 11
 3117 131a 3A68     		ldr	r2, [r7, #0]
 3118 131c 514B     		ldr	r3, .L229+56
 3119 131e 9A42     		cmp	r2, r3
 3120 1320 10D0     		beq	.L217
 3121              		.loc 1 1049 0 discriminator 12
 3122 1322 3A68     		ldr	r2, [r7, #0]
 3123 1324 504B     		ldr	r3, .L229+60
 3124 1326 9A42     		cmp	r2, r3
 3125 1328 0CD0     		beq	.L217
 3126              		.loc 1 1049 0 discriminator 13
 3127 132a 3A68     		ldr	r2, [r7, #0]
 3128 132c 4F4B     		ldr	r3, .L229+64
 3129 132e 9A42     		cmp	r2, r3
 3130 1330 08D0     		beq	.L217
 3131              		.loc 1 1049 0 discriminator 14
 3132 1332 3A68     		ldr	r2, [r7, #0]
 3133 1334 4E4B     		ldr	r3, .L229+68
 3134 1336 9A42     		cmp	r2, r3
 3135 1338 04D0     		beq	.L217
 3136              		.loc 1 1049 0 discriminator 15
 3137 133a 3E48     		ldr	r0, .L229+8
 3138 133c 40F21941 		movw	r1, #1049
 3139 1340 FFF7FEFF 		bl	assert_failed
 3140              	.L217:
1050:../SPL/src/stm32f10x_can.c ****   
1051:../SPL/src/stm32f10x_can.c **** 
1052:../SPL/src/stm32f10x_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 3141              		.loc 1 1052 0 is_stmt 1
 3142 1344 3B68     		ldr	r3, [r7, #0]
 3143 1346 03F47003 		and	r3, r3, #15728640
 3144 134a 002B     		cmp	r3, #0
 3145 134c 11D0     		beq	.L218
1053:../SPL/src/stm32f10x_can.c ****   { 
1054:../SPL/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1055:../SPL/src/stm32f10x_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 3146              		.loc 1 1055 0
 3147 134e 7B68     		ldr	r3, [r7, #4]
 3148 1350 9A69     		ldr	r2, [r3, #24]
 3149 1352 3B68     		ldr	r3, [r7, #0]
 3150 1354 1340     		ands	r3, r3, r2
 3151 1356 23F07F43 		bic	r3, r3, #-16777216
 3152 135a 23F47003 		bic	r3, r3, #15728640
 3153 135e 002B     		cmp	r3, #0
 3154 1360 03D0     		beq	.L219
1056:../SPL/src/stm32f10x_can.c ****     { 
1057:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1058:../SPL/src/stm32f10x_can.c ****       bitstatus = SET;
 3155              		.loc 1 1058 0
 3156 1362 4FF00103 		mov	r3, #1
 3157 1366 FB73     		strb	r3, [r7, #15]
 3158 1368 59E0     		b	.L220
 3159              	.L219:
1059:../SPL/src/stm32f10x_can.c ****     }
1060:../SPL/src/stm32f10x_can.c ****     else
1061:../SPL/src/stm32f10x_can.c ****     { 
1062:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1063:../SPL/src/stm32f10x_can.c ****       bitstatus = RESET;
 3160              		.loc 1 1063 0
 3161 136a 4FF00003 		mov	r3, #0
 3162 136e FB73     		strb	r3, [r7, #15]
 3163 1370 55E0     		b	.L220
 3164              	.L218:
1064:../SPL/src/stm32f10x_can.c ****     }
1065:../SPL/src/stm32f10x_can.c ****   }
1066:../SPL/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 3165              		.loc 1 1066 0
 3166 1372 3B68     		ldr	r3, [r7, #0]
 3167 1374 03F08073 		and	r3, r3, #16777216
 3168 1378 002B     		cmp	r3, #0
 3169 137a 11D0     		beq	.L221
1067:../SPL/src/stm32f10x_can.c ****   { 
1068:../SPL/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1069:../SPL/src/stm32f10x_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 3170              		.loc 1 1069 0
 3171 137c 7B68     		ldr	r3, [r7, #4]
 3172 137e 5A68     		ldr	r2, [r3, #4]
 3173 1380 3B68     		ldr	r3, [r7, #0]
 3174 1382 1340     		ands	r3, r3, r2
 3175 1384 23F07F43 		bic	r3, r3, #-16777216
 3176 1388 23F47003 		bic	r3, r3, #15728640
 3177 138c 002B     		cmp	r3, #0
 3178 138e 03D0     		beq	.L222
1070:../SPL/src/stm32f10x_can.c ****     { 
1071:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1072:../SPL/src/stm32f10x_can.c ****       bitstatus = SET;
 3179              		.loc 1 1072 0
 3180 1390 4FF00103 		mov	r3, #1
 3181 1394 FB73     		strb	r3, [r7, #15]
 3182 1396 42E0     		b	.L220
 3183              	.L222:
1073:../SPL/src/stm32f10x_can.c ****     }
1074:../SPL/src/stm32f10x_can.c ****     else
1075:../SPL/src/stm32f10x_can.c ****     { 
1076:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1077:../SPL/src/stm32f10x_can.c ****       bitstatus = RESET;
 3184              		.loc 1 1077 0
 3185 1398 4FF00003 		mov	r3, #0
 3186 139c FB73     		strb	r3, [r7, #15]
 3187 139e 3EE0     		b	.L220
 3188              	.L221:
1078:../SPL/src/stm32f10x_can.c ****     }
1079:../SPL/src/stm32f10x_can.c ****   }
1080:../SPL/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 3189              		.loc 1 1080 0
 3190 13a0 3B68     		ldr	r3, [r7, #0]
 3191 13a2 03F00063 		and	r3, r3, #134217728
 3192 13a6 002B     		cmp	r3, #0
 3193 13a8 11D0     		beq	.L223
1081:../SPL/src/stm32f10x_can.c ****   { 
1082:../SPL/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1083:../SPL/src/stm32f10x_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 3194              		.loc 1 1083 0
 3195 13aa 7B68     		ldr	r3, [r7, #4]
 3196 13ac 9A68     		ldr	r2, [r3, #8]
 3197 13ae 3B68     		ldr	r3, [r7, #0]
 3198 13b0 1340     		ands	r3, r3, r2
 3199 13b2 23F07F43 		bic	r3, r3, #-16777216
 3200 13b6 23F47003 		bic	r3, r3, #15728640
 3201 13ba 002B     		cmp	r3, #0
 3202 13bc 03D0     		beq	.L224
1084:../SPL/src/stm32f10x_can.c ****     { 
1085:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1086:../SPL/src/stm32f10x_can.c ****       bitstatus = SET;
 3203              		.loc 1 1086 0
 3204 13be 4FF00103 		mov	r3, #1
 3205 13c2 FB73     		strb	r3, [r7, #15]
 3206 13c4 2BE0     		b	.L220
 3207              	.L224:
1087:../SPL/src/stm32f10x_can.c ****     }
1088:../SPL/src/stm32f10x_can.c ****     else
1089:../SPL/src/stm32f10x_can.c ****     { 
1090:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1091:../SPL/src/stm32f10x_can.c ****       bitstatus = RESET;
 3208              		.loc 1 1091 0
 3209 13c6 4FF00003 		mov	r3, #0
 3210 13ca FB73     		strb	r3, [r7, #15]
 3211 13cc 27E0     		b	.L220
 3212              	.L223:
1092:../SPL/src/stm32f10x_can.c ****     }
1093:../SPL/src/stm32f10x_can.c ****   }
1094:../SPL/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 3213              		.loc 1 1094 0
 3214 13ce 3B68     		ldr	r3, [r7, #0]
 3215 13d0 03F00073 		and	r3, r3, #33554432
 3216 13d4 002B     		cmp	r3, #0
 3217 13d6 11D0     		beq	.L225
1095:../SPL/src/stm32f10x_can.c ****   { 
1096:../SPL/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1097:../SPL/src/stm32f10x_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 3218              		.loc 1 1097 0
 3219 13d8 7B68     		ldr	r3, [r7, #4]
 3220 13da DA68     		ldr	r2, [r3, #12]
 3221 13dc 3B68     		ldr	r3, [r7, #0]
 3222 13de 1340     		ands	r3, r3, r2
 3223 13e0 23F07F43 		bic	r3, r3, #-16777216
 3224 13e4 23F47003 		bic	r3, r3, #15728640
 3225 13e8 002B     		cmp	r3, #0
 3226 13ea 03D0     		beq	.L226
1098:../SPL/src/stm32f10x_can.c ****     { 
1099:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1100:../SPL/src/stm32f10x_can.c ****       bitstatus = SET;
 3227              		.loc 1 1100 0
 3228 13ec 4FF00103 		mov	r3, #1
 3229 13f0 FB73     		strb	r3, [r7, #15]
 3230 13f2 14E0     		b	.L220
 3231              	.L226:
1101:../SPL/src/stm32f10x_can.c ****     }
1102:../SPL/src/stm32f10x_can.c ****     else
1103:../SPL/src/stm32f10x_can.c ****     { 
1104:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1105:../SPL/src/stm32f10x_can.c ****       bitstatus = RESET;
 3232              		.loc 1 1105 0
 3233 13f4 4FF00003 		mov	r3, #0
 3234 13f8 FB73     		strb	r3, [r7, #15]
 3235 13fa 10E0     		b	.L220
 3236              	.L225:
1106:../SPL/src/stm32f10x_can.c ****     }
1107:../SPL/src/stm32f10x_can.c ****   }
1108:../SPL/src/stm32f10x_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1109:../SPL/src/stm32f10x_can.c ****   { 
1110:../SPL/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1111:../SPL/src/stm32f10x_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 3237              		.loc 1 1111 0
 3238 13fc 7B68     		ldr	r3, [r7, #4]
 3239 13fe 1A69     		ldr	r2, [r3, #16]
 3240 1400 3B68     		ldr	r3, [r7, #0]
 3241 1402 1340     		ands	r3, r3, r2
 3242 1404 23F07F43 		bic	r3, r3, #-16777216
 3243 1408 23F47003 		bic	r3, r3, #15728640
 3244 140c 002B     		cmp	r3, #0
 3245 140e 03D0     		beq	.L227
1112:../SPL/src/stm32f10x_can.c ****     { 
1113:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1114:../SPL/src/stm32f10x_can.c ****       bitstatus = SET;
 3246              		.loc 1 1114 0
 3247 1410 4FF00103 		mov	r3, #1
 3248 1414 FB73     		strb	r3, [r7, #15]
 3249 1416 02E0     		b	.L220
 3250              	.L227:
1115:../SPL/src/stm32f10x_can.c ****     }
1116:../SPL/src/stm32f10x_can.c ****     else
1117:../SPL/src/stm32f10x_can.c ****     { 
1118:../SPL/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1119:../SPL/src/stm32f10x_can.c ****       bitstatus = RESET;
 3251              		.loc 1 1119 0
 3252 1418 4FF00003 		mov	r3, #0
 3253 141c FB73     		strb	r3, [r7, #15]
 3254              	.L220:
1120:../SPL/src/stm32f10x_can.c ****     }
1121:../SPL/src/stm32f10x_can.c ****   }
1122:../SPL/src/stm32f10x_can.c ****   /* Return the CAN_FLAG status */
1123:../SPL/src/stm32f10x_can.c ****   return  bitstatus;
 3255              		.loc 1 1123 0
 3256 141e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1124:../SPL/src/stm32f10x_can.c **** }
 3257              		.loc 1 1124 0
 3258 1420 1846     		mov	r0, r3
 3259 1422 07F11007 		add	r7, r7, #16
 3260 1426 BD46     		mov	sp, r7
 3261 1428 80BD     		pop	{r7, pc}
 3262              	.L230:
 3263 142a 00BF     		.align	2
 3264              	.L229:
 3265 142c 00640040 		.word	1073767424
 3266 1430 00680040 		.word	1073768448
 3267 1434 00000000 		.word	.LC0
 3268 1438 7000F030 		.word	821035120
 3269 143c 0400F010 		.word	284164100
 3270 1440 0200F010 		.word	284164098
 3271 1444 0100F010 		.word	284164097
 3272 1448 08000031 		.word	822083592
 3273 144c 10000032 		.word	838860816
 3274 1450 08000032 		.word	838860808
 3275 1454 03000012 		.word	301989891
 3276 1458 10000034 		.word	872415248
 3277 145c 08000034 		.word	872415240
 3278 1460 03000014 		.word	335544323
 3279 1464 00000138 		.word	939589632
 3280 1468 00010038 		.word	939524352
 3281 146c 01000038 		.word	939524097
 3282 1470 12000031 		.word	822083602
 3283              		.cfi_endproc
 3284              	.LFE49:
 3286              		.align	2
 3287              		.global	CAN_ClearFlag
 3288              		.thumb
 3289              		.thumb_func
 3291              	CAN_ClearFlag:
 3292              	.LFB50:
1125:../SPL/src/stm32f10x_can.c **** 
1126:../SPL/src/stm32f10x_can.c **** /**
1127:../SPL/src/stm32f10x_can.c ****   * @brief  Clears the CAN's pending flags.
1128:../SPL/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1129:../SPL/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1130:../SPL/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1131:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP0
1132:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP1
1133:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP2
1134:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF1       
1135:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV1   
1136:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF0       
1137:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV0   
1138:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_WKU   
1139:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_SLAK    
1140:../SPL/src/stm32f10x_can.c ****   *                    - CAN_FLAG_LEC       
1141:../SPL/src/stm32f10x_can.c ****   * @retval None.
1142:../SPL/src/stm32f10x_can.c ****   */
1143:../SPL/src/stm32f10x_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1144:../SPL/src/stm32f10x_can.c **** {
 3293              		.loc 1 1144 0
 3294              		.cfi_startproc
 3295              		@ args = 0, pretend = 0, frame = 16
 3296              		@ frame_needed = 1, uses_anonymous_args = 0
 3297 1474 80B5     		push	{r7, lr}
 3298              	.LCFI63:
 3299              		.cfi_def_cfa_offset 8
 3300              		.cfi_offset 7, -8
 3301              		.cfi_offset 14, -4
 3302 1476 84B0     		sub	sp, sp, #16
 3303              	.LCFI64:
 3304              		.cfi_def_cfa_offset 24
 3305 1478 00AF     		add	r7, sp, #0
 3306              	.LCFI65:
 3307              		.cfi_def_cfa_register 7
 3308 147a 7860     		str	r0, [r7, #4]
 3309 147c 3960     		str	r1, [r7, #0]
1145:../SPL/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
 3310              		.loc 1 1145 0
 3311 147e 4FF00003 		mov	r3, #0
 3312 1482 FB60     		str	r3, [r7, #12]
1146:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
1147:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 3313              		.loc 1 1147 0
 3314 1484 7A68     		ldr	r2, [r7, #4]
 3315 1486 354B     		ldr	r3, .L239
 3316 1488 9A42     		cmp	r2, r3
 3317 148a 08D0     		beq	.L232
 3318              		.loc 1 1147 0 is_stmt 0 discriminator 1
 3319 148c 7A68     		ldr	r2, [r7, #4]
 3320 148e 344B     		ldr	r3, .L239+4
 3321 1490 9A42     		cmp	r2, r3
 3322 1492 04D0     		beq	.L232
 3323              		.loc 1 1147 0 discriminator 2
 3324 1494 3348     		ldr	r0, .L239+8
 3325 1496 40F27B41 		movw	r1, #1147
 3326 149a FFF7FEFF 		bl	assert_failed
 3327              	.L232:
1148:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
 3328              		.loc 1 1148 0 is_stmt 1
 3329 149e 3A68     		ldr	r2, [r7, #0]
 3330 14a0 314B     		ldr	r3, .L239+12
 3331 14a2 9A42     		cmp	r2, r3
 3332 14a4 28D0     		beq	.L233
 3333              		.loc 1 1148 0 is_stmt 0 discriminator 1
 3334 14a6 3A68     		ldr	r2, [r7, #0]
 3335 14a8 304B     		ldr	r3, .L239+16
 3336 14aa 9A42     		cmp	r2, r3
 3337 14ac 24D0     		beq	.L233
 3338              		.loc 1 1148 0 discriminator 2
 3339 14ae 3A68     		ldr	r2, [r7, #0]
 3340 14b0 2F4B     		ldr	r3, .L239+20
 3341 14b2 9A42     		cmp	r2, r3
 3342 14b4 20D0     		beq	.L233
 3343              		.loc 1 1148 0 discriminator 3
 3344 14b6 3A68     		ldr	r2, [r7, #0]
 3345 14b8 2E4B     		ldr	r3, .L239+24
 3346 14ba 9A42     		cmp	r2, r3
 3347 14bc 1CD0     		beq	.L233
 3348              		.loc 1 1148 0 discriminator 4
 3349 14be 3A68     		ldr	r2, [r7, #0]
 3350 14c0 2D4B     		ldr	r3, .L239+28
 3351 14c2 9A42     		cmp	r2, r3
 3352 14c4 18D0     		beq	.L233
 3353              		.loc 1 1148 0 discriminator 5
 3354 14c6 3A68     		ldr	r2, [r7, #0]
 3355 14c8 2C4B     		ldr	r3, .L239+32
 3356 14ca 9A42     		cmp	r2, r3
 3357 14cc 14D0     		beq	.L233
 3358              		.loc 1 1148 0 discriminator 6
 3359 14ce 3A68     		ldr	r2, [r7, #0]
 3360 14d0 2B4B     		ldr	r3, .L239+36
 3361 14d2 9A42     		cmp	r2, r3
 3362 14d4 10D0     		beq	.L233
 3363              		.loc 1 1148 0 discriminator 7
 3364 14d6 3A68     		ldr	r2, [r7, #0]
 3365 14d8 2A4B     		ldr	r3, .L239+40
 3366 14da 9A42     		cmp	r2, r3
 3367 14dc 0CD0     		beq	.L233
 3368              		.loc 1 1148 0 discriminator 8
 3369 14de 3A68     		ldr	r2, [r7, #0]
 3370 14e0 294B     		ldr	r3, .L239+44
 3371 14e2 9A42     		cmp	r2, r3
 3372 14e4 08D0     		beq	.L233
 3373              		.loc 1 1148 0 discriminator 9
 3374 14e6 3A68     		ldr	r2, [r7, #0]
 3375 14e8 284B     		ldr	r3, .L239+48
 3376 14ea 9A42     		cmp	r2, r3
 3377 14ec 04D0     		beq	.L233
 3378              		.loc 1 1148 0 discriminator 10
 3379 14ee 1D48     		ldr	r0, .L239+8
 3380 14f0 40F27C41 		movw	r1, #1148
 3381 14f4 FFF7FEFF 		bl	assert_failed
 3382              	.L233:
1149:../SPL/src/stm32f10x_can.c ****   
1150:../SPL/src/stm32f10x_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 3383              		.loc 1 1150 0 is_stmt 1
 3384 14f8 3A68     		ldr	r2, [r7, #0]
 3385 14fa 1B4B     		ldr	r3, .L239+12
 3386 14fc 9A42     		cmp	r2, r3
 3387 14fe 04D1     		bne	.L234
1151:../SPL/src/stm32f10x_can.c ****   {
1152:../SPL/src/stm32f10x_can.c ****     /* Clear the selected CAN flags */
1153:../SPL/src/stm32f10x_can.c ****     CANx->ESR = (uint32_t)RESET;
 3388              		.loc 1 1153 0
 3389 1500 7B68     		ldr	r3, [r7, #4]
 3390 1502 4FF00002 		mov	r2, #0
 3391 1506 9A61     		str	r2, [r3, #24]
 3392 1508 23E0     		b	.L231
 3393              	.L234:
1154:../SPL/src/stm32f10x_can.c ****   }
1155:../SPL/src/stm32f10x_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1156:../SPL/src/stm32f10x_can.c ****   {
1157:../SPL/src/stm32f10x_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
 3394              		.loc 1 1157 0
 3395 150a 3B68     		ldr	r3, [r7, #0]
 3396 150c 23F07F43 		bic	r3, r3, #-16777216
 3397 1510 23F47003 		bic	r3, r3, #15728640
 3398 1514 FB60     		str	r3, [r7, #12]
1158:../SPL/src/stm32f10x_can.c **** 
1159:../SPL/src/stm32f10x_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 3399              		.loc 1 1159 0
 3400 1516 3B68     		ldr	r3, [r7, #0]
 3401 1518 03F00073 		and	r3, r3, #33554432
 3402 151c 002B     		cmp	r3, #0
 3403 151e 03D0     		beq	.L236
1160:../SPL/src/stm32f10x_can.c ****     {
1161:../SPL/src/stm32f10x_can.c ****       /* Receive Flags */
1162:../SPL/src/stm32f10x_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
 3404              		.loc 1 1162 0
 3405 1520 7B68     		ldr	r3, [r7, #4]
 3406 1522 FA68     		ldr	r2, [r7, #12]
 3407 1524 DA60     		str	r2, [r3, #12]
 3408 1526 14E0     		b	.L231
 3409              	.L236:
1163:../SPL/src/stm32f10x_can.c ****     }
1164:../SPL/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 3410              		.loc 1 1164 0
 3411 1528 3B68     		ldr	r3, [r7, #0]
 3412 152a 03F08063 		and	r3, r3, #67108864
 3413 152e 002B     		cmp	r3, #0
 3414 1530 03D0     		beq	.L237
1165:../SPL/src/stm32f10x_can.c ****     {
1166:../SPL/src/stm32f10x_can.c ****       /* Receive Flags */
1167:../SPL/src/stm32f10x_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
 3415              		.loc 1 1167 0
 3416 1532 7B68     		ldr	r3, [r7, #4]
 3417 1534 FA68     		ldr	r2, [r7, #12]
 3418 1536 1A61     		str	r2, [r3, #16]
 3419 1538 0BE0     		b	.L231
 3420              	.L237:
1168:../SPL/src/stm32f10x_can.c ****     }
1169:../SPL/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 3421              		.loc 1 1169 0
 3422 153a 3B68     		ldr	r3, [r7, #0]
 3423 153c 03F00063 		and	r3, r3, #134217728
 3424 1540 002B     		cmp	r3, #0
 3425 1542 03D0     		beq	.L238
1170:../SPL/src/stm32f10x_can.c ****     {
1171:../SPL/src/stm32f10x_can.c ****       /* Transmit Flags */
1172:../SPL/src/stm32f10x_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
 3426              		.loc 1 1172 0
 3427 1544 7B68     		ldr	r3, [r7, #4]
 3428 1546 FA68     		ldr	r2, [r7, #12]
 3429 1548 9A60     		str	r2, [r3, #8]
 3430 154a 02E0     		b	.L231
 3431              	.L238:
1173:../SPL/src/stm32f10x_can.c ****     }
1174:../SPL/src/stm32f10x_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1175:../SPL/src/stm32f10x_can.c ****     {
1176:../SPL/src/stm32f10x_can.c ****       /* Operating mode Flags */
1177:../SPL/src/stm32f10x_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
 3432              		.loc 1 1177 0
 3433 154c 7B68     		ldr	r3, [r7, #4]
 3434 154e FA68     		ldr	r2, [r7, #12]
 3435 1550 5A60     		str	r2, [r3, #4]
 3436              	.L231:
1178:../SPL/src/stm32f10x_can.c ****     }
1179:../SPL/src/stm32f10x_can.c ****   }
1180:../SPL/src/stm32f10x_can.c **** }
 3437              		.loc 1 1180 0
 3438 1552 07F11007 		add	r7, r7, #16
 3439 1556 BD46     		mov	sp, r7
 3440 1558 80BD     		pop	{r7, pc}
 3441              	.L240:
 3442 155a 00BF     		.align	2
 3443              	.L239:
 3444 155c 00640040 		.word	1073767424
 3445 1560 00680040 		.word	1073768448
 3446 1564 00000000 		.word	.LC0
 3447 1568 7000F030 		.word	821035120
 3448 156c 00000138 		.word	939589632
 3449 1570 00010038 		.word	939524352
 3450 1574 01000038 		.word	939524097
 3451 1578 08000032 		.word	838860808
 3452 157c 10000032 		.word	838860816
 3453 1580 08000034 		.word	872415240
 3454 1584 10000034 		.word	872415248
 3455 1588 08000031 		.word	822083592
 3456 158c 12000031 		.word	822083602
 3457              		.cfi_endproc
 3458              	.LFE50:
 3460              		.align	2
 3461              		.global	CAN_GetITStatus
 3462              		.thumb
 3463              		.thumb_func
 3465              	CAN_GetITStatus:
 3466              	.LFB51:
1181:../SPL/src/stm32f10x_can.c **** 
1182:../SPL/src/stm32f10x_can.c **** /**
1183:../SPL/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1184:../SPL/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1185:../SPL/src/stm32f10x_can.c ****   * @param  CAN_IT:  specifies the CAN interrupt source to check.
1186:../SPL/src/stm32f10x_can.c ****   *                  This parameter can be one of the following flags: 
1187:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_TME               
1188:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP0              
1189:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF0               
1190:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV0              
1191:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP1              
1192:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF1               
1193:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV1              
1194:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_WKU  
1195:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_SLK  
1196:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_EWG    
1197:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_EPV    
1198:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_BOF    
1199:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_LEC    
1200:../SPL/src/stm32f10x_can.c ****   *                 -  CAN_IT_ERR 
1201:../SPL/src/stm32f10x_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1202:../SPL/src/stm32f10x_can.c ****   */
1203:../SPL/src/stm32f10x_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1204:../SPL/src/stm32f10x_can.c **** {
 3467              		.loc 1 1204 0
 3468              		.cfi_startproc
 3469              		@ args = 0, pretend = 0, frame = 16
 3470              		@ frame_needed = 1, uses_anonymous_args = 0
 3471 1590 80B5     		push	{r7, lr}
 3472              	.LCFI66:
 3473              		.cfi_def_cfa_offset 8
 3474              		.cfi_offset 7, -8
 3475              		.cfi_offset 14, -4
 3476 1592 84B0     		sub	sp, sp, #16
 3477              	.LCFI67:
 3478              		.cfi_def_cfa_offset 24
 3479 1594 00AF     		add	r7, sp, #0
 3480              	.LCFI68:
 3481              		.cfi_def_cfa_register 7
 3482 1596 7860     		str	r0, [r7, #4]
 3483 1598 3960     		str	r1, [r7, #0]
1205:../SPL/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
 3484              		.loc 1 1205 0
 3485 159a 4FF00003 		mov	r3, #0
 3486 159e FB73     		strb	r3, [r7, #15]
1206:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
1207:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 3487              		.loc 1 1207 0
 3488 15a0 7A68     		ldr	r2, [r7, #4]
 3489 15a2 894B     		ldr	r3, .L266
 3490 15a4 9A42     		cmp	r2, r3
 3491 15a6 08D0     		beq	.L242
 3492              		.loc 1 1207 0 is_stmt 0 discriminator 1
 3493 15a8 7A68     		ldr	r2, [r7, #4]
 3494 15aa 884B     		ldr	r3, .L266+4
 3495 15ac 9A42     		cmp	r2, r3
 3496 15ae 04D0     		beq	.L242
 3497              		.loc 1 1207 0 discriminator 2
 3498 15b0 8748     		ldr	r0, .L266+8
 3499 15b2 40F2B741 		movw	r1, #1207
 3500 15b6 FFF7FEFF 		bl	assert_failed
 3501              	.L242:
1208:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
 3502              		.loc 1 1208 0 is_stmt 1
 3503 15ba 3B68     		ldr	r3, [r7, #0]
 3504 15bc 012B     		cmp	r3, #1
 3505 15be 32D0     		beq	.L243
 3506              		.loc 1 1208 0 is_stmt 0 discriminator 1
 3507 15c0 3B68     		ldr	r3, [r7, #0]
 3508 15c2 022B     		cmp	r3, #2
 3509 15c4 2FD0     		beq	.L243
 3510              		.loc 1 1208 0 discriminator 2
 3511 15c6 3B68     		ldr	r3, [r7, #0]
 3512 15c8 042B     		cmp	r3, #4
 3513 15ca 2CD0     		beq	.L243
 3514              		.loc 1 1208 0 discriminator 3
 3515 15cc 3B68     		ldr	r3, [r7, #0]
 3516 15ce 082B     		cmp	r3, #8
 3517 15d0 29D0     		beq	.L243
 3518              		.loc 1 1208 0 discriminator 4
 3519 15d2 3B68     		ldr	r3, [r7, #0]
 3520 15d4 102B     		cmp	r3, #16
 3521 15d6 26D0     		beq	.L243
 3522              		.loc 1 1208 0 discriminator 5
 3523 15d8 3B68     		ldr	r3, [r7, #0]
 3524 15da 202B     		cmp	r3, #32
 3525 15dc 23D0     		beq	.L243
 3526              		.loc 1 1208 0 discriminator 6
 3527 15de 3B68     		ldr	r3, [r7, #0]
 3528 15e0 402B     		cmp	r3, #64
 3529 15e2 20D0     		beq	.L243
 3530              		.loc 1 1208 0 discriminator 7
 3531 15e4 3B68     		ldr	r3, [r7, #0]
 3532 15e6 B3F5807F 		cmp	r3, #256
 3533 15ea 1CD0     		beq	.L243
 3534              		.loc 1 1208 0 discriminator 8
 3535 15ec 3B68     		ldr	r3, [r7, #0]
 3536 15ee B3F5007F 		cmp	r3, #512
 3537 15f2 18D0     		beq	.L243
 3538              		.loc 1 1208 0 discriminator 9
 3539 15f4 3B68     		ldr	r3, [r7, #0]
 3540 15f6 B3F5806F 		cmp	r3, #1024
 3541 15fa 14D0     		beq	.L243
 3542              		.loc 1 1208 0 discriminator 10
 3543 15fc 3B68     		ldr	r3, [r7, #0]
 3544 15fe B3F5006F 		cmp	r3, #2048
 3545 1602 10D0     		beq	.L243
 3546              		.loc 1 1208 0 discriminator 11
 3547 1604 3B68     		ldr	r3, [r7, #0]
 3548 1606 B3F5004F 		cmp	r3, #32768
 3549 160a 0CD0     		beq	.L243
 3550              		.loc 1 1208 0 discriminator 12
 3551 160c 3B68     		ldr	r3, [r7, #0]
 3552 160e B3F5803F 		cmp	r3, #65536
 3553 1612 08D0     		beq	.L243
 3554              		.loc 1 1208 0 discriminator 13
 3555 1614 3B68     		ldr	r3, [r7, #0]
 3556 1616 B3F5003F 		cmp	r3, #131072
 3557 161a 04D0     		beq	.L243
 3558              		.loc 1 1208 0 discriminator 14
 3559 161c 6C48     		ldr	r0, .L266+8
 3560 161e 4FF49761 		mov	r1, #1208
 3561 1622 FFF7FEFF 		bl	assert_failed
 3562              	.L243:
1209:../SPL/src/stm32f10x_can.c ****   
1210:../SPL/src/stm32f10x_can.c ****   /* check the enable interrupt bit */
1211:../SPL/src/stm32f10x_can.c ****  if((CANx->IER & CAN_IT) != RESET)
 3563              		.loc 1 1211 0 is_stmt 1
 3564 1626 7B68     		ldr	r3, [r7, #4]
 3565 1628 5A69     		ldr	r2, [r3, #20]
 3566 162a 3B68     		ldr	r3, [r7, #0]
 3567 162c 1340     		ands	r3, r3, r2
 3568 162e 002B     		cmp	r3, #0
 3569 1630 00F0C180 		beq	.L244
1212:../SPL/src/stm32f10x_can.c ****  {
1213:../SPL/src/stm32f10x_can.c ****    /* in case the Interrupt is enabled, .... */
1214:../SPL/src/stm32f10x_can.c ****     switch (CAN_IT)
 3570              		.loc 1 1214 0
 3571 1634 3B68     		ldr	r3, [r7, #0]
 3572 1636 402B     		cmp	r3, #64
 3573 1638 68D0     		beq	.L252
 3574 163a 402B     		cmp	r3, #64
 3575 163c 0FD8     		bhi	.L260
 3576 163e 042B     		cmp	r3, #4
 3577 1640 3CD0     		beq	.L248
 3578 1642 042B     		cmp	r3, #4
 3579 1644 04D8     		bhi	.L261
 3580 1646 012B     		cmp	r3, #1
 3581 1648 25D0     		beq	.L246
 3582 164a 022B     		cmp	r3, #2
 3583 164c 2CD0     		beq	.L247
 3584 164e AEE0     		b	.L245
 3585              	.L261:
 3586 1650 102B     		cmp	r3, #16
 3587 1652 47D0     		beq	.L250
 3588 1654 202B     		cmp	r3, #32
 3589 1656 4FD0     		beq	.L251
 3590 1658 082B     		cmp	r3, #8
 3591 165a 39D0     		beq	.L249
 3592 165c A7E0     		b	.L245
 3593              	.L260:
 3594 165e B3F5006F 		cmp	r3, #2048
 3595 1662 00F08F80 		beq	.L256
 3596 1666 B3F5006F 		cmp	r3, #2048
 3597 166a 09D8     		bhi	.L262
 3598 166c B3F5007F 		cmp	r3, #512
 3599 1670 74D0     		beq	.L254
 3600 1672 B3F5806F 		cmp	r3, #1024
 3601 1676 7BD0     		beq	.L255
 3602 1678 B3F5807F 		cmp	r3, #256
 3603 167c 64D0     		beq	.L253
 3604 167e 96E0     		b	.L245
 3605              	.L262:
 3606 1680 B3F5803F 		cmp	r3, #65536
 3607 1684 4CD0     		beq	.L258
 3608 1686 B3F5003F 		cmp	r3, #131072
 3609 168a 53D0     		beq	.L259
 3610 168c B3F5004F 		cmp	r3, #32768
 3611 1690 00F08280 		beq	.L257
 3612 1694 8BE0     		b	.L245
 3613              	.L246:
1215:../SPL/src/stm32f10x_can.c ****     {
1216:../SPL/src/stm32f10x_can.c ****       case CAN_IT_TME:
1217:../SPL/src/stm32f10x_can.c ****                /* Check CAN_TSR_RQCPx bits */
1218:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 3614              		.loc 1 1218 0
 3615 1696 7B68     		ldr	r3, [r7, #4]
 3616 1698 9B68     		ldr	r3, [r3, #8]
 3617 169a 1846     		mov	r0, r3
 3618 169c 4D49     		ldr	r1, .L266+12
 3619 169e 00F059F9 		bl	CheckITStatus
 3620 16a2 0346     		mov	r3, r0
 3621 16a4 FB73     		strb	r3, [r7, #15]
1219:../SPL/src/stm32f10x_can.c **** 	      break;
 3622              		.loc 1 1219 0
 3623 16a6 89E0     		b	.L264
 3624              	.L247:
1220:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
1221:../SPL/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FMP0 bit */
1222:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 3625              		.loc 1 1222 0
 3626 16a8 7B68     		ldr	r3, [r7, #4]
 3627 16aa DB68     		ldr	r3, [r3, #12]
 3628 16ac 1846     		mov	r0, r3
 3629 16ae 4FF00301 		mov	r1, #3
 3630 16b2 00F04FF9 		bl	CheckITStatus
 3631 16b6 0346     		mov	r3, r0
 3632 16b8 FB73     		strb	r3, [r7, #15]
1223:../SPL/src/stm32f10x_can.c **** 	      break;
 3633              		.loc 1 1223 0
 3634 16ba 7FE0     		b	.L264
 3635              	.L248:
1224:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1225:../SPL/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FULL0 bit */
1226:../SPL/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 3636              		.loc 1 1226 0
 3637 16bc 7B68     		ldr	r3, [r7, #4]
 3638 16be DB68     		ldr	r3, [r3, #12]
 3639 16c0 1846     		mov	r0, r3
 3640 16c2 4FF00801 		mov	r1, #8
 3641 16c6 00F045F9 		bl	CheckITStatus
 3642 16ca 0346     		mov	r3, r0
 3643 16cc FB73     		strb	r3, [r7, #15]
1227:../SPL/src/stm32f10x_can.c **** 	      break;
 3644              		.loc 1 1227 0
 3645 16ce 75E0     		b	.L264
 3646              	.L249:
1228:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1229:../SPL/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FOVR0 bit */
1230:../SPL/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 3647              		.loc 1 1230 0
 3648 16d0 7B68     		ldr	r3, [r7, #4]
 3649 16d2 DB68     		ldr	r3, [r3, #12]
 3650 16d4 1846     		mov	r0, r3
 3651 16d6 4FF01001 		mov	r1, #16
 3652 16da 00F03BF9 		bl	CheckITStatus
 3653 16de 0346     		mov	r3, r0
 3654 16e0 FB73     		strb	r3, [r7, #15]
1231:../SPL/src/stm32f10x_can.c **** 	      break;
 3655              		.loc 1 1231 0
 3656 16e2 6BE0     		b	.L264
 3657              	.L250:
1232:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
1233:../SPL/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FMP1 bit */
1234:../SPL/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 3658              		.loc 1 1234 0
 3659 16e4 7B68     		ldr	r3, [r7, #4]
 3660 16e6 1B69     		ldr	r3, [r3, #16]
 3661 16e8 1846     		mov	r0, r3
 3662 16ea 4FF00301 		mov	r1, #3
 3663 16ee 00F031F9 		bl	CheckITStatus
 3664 16f2 0346     		mov	r3, r0
 3665 16f4 FB73     		strb	r3, [r7, #15]
1235:../SPL/src/stm32f10x_can.c **** 	      break;
 3666              		.loc 1 1235 0
 3667 16f6 61E0     		b	.L264
 3668              	.L251:
1236:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1237:../SPL/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FULL1 bit */
1238:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 3669              		.loc 1 1238 0
 3670 16f8 7B68     		ldr	r3, [r7, #4]
 3671 16fa 1B69     		ldr	r3, [r3, #16]
 3672 16fc 1846     		mov	r0, r3
 3673 16fe 4FF00801 		mov	r1, #8
 3674 1702 00F027F9 		bl	CheckITStatus
 3675 1706 0346     		mov	r3, r0
 3676 1708 FB73     		strb	r3, [r7, #15]
1239:../SPL/src/stm32f10x_can.c **** 	      break;
 3677              		.loc 1 1239 0
 3678 170a 57E0     		b	.L264
 3679              	.L252:
1240:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1241:../SPL/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FOVR1 bit */
1242:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 3680              		.loc 1 1242 0
 3681 170c 7B68     		ldr	r3, [r7, #4]
 3682 170e 1B69     		ldr	r3, [r3, #16]
 3683 1710 1846     		mov	r0, r3
 3684 1712 4FF01001 		mov	r1, #16
 3685 1716 00F01DF9 		bl	CheckITStatus
 3686 171a 0346     		mov	r3, r0
 3687 171c FB73     		strb	r3, [r7, #15]
1243:../SPL/src/stm32f10x_can.c **** 	      break;
 3688              		.loc 1 1243 0
 3689 171e 4DE0     		b	.L264
 3690              	.L258:
1244:../SPL/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1245:../SPL/src/stm32f10x_can.c ****                /* Check CAN_MSR_WKUI bit */
1246:../SPL/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 3691              		.loc 1 1246 0
 3692 1720 7B68     		ldr	r3, [r7, #4]
 3693 1722 5B68     		ldr	r3, [r3, #4]
 3694 1724 1846     		mov	r0, r3
 3695 1726 4FF00801 		mov	r1, #8
 3696 172a 00F013F9 		bl	CheckITStatus
 3697 172e 0346     		mov	r3, r0
 3698 1730 FB73     		strb	r3, [r7, #15]
1247:../SPL/src/stm32f10x_can.c **** 	      break;
 3699              		.loc 1 1247 0
 3700 1732 43E0     		b	.L264
 3701              	.L259:
1248:../SPL/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1249:../SPL/src/stm32f10x_can.c ****                /* Check CAN_MSR_SLAKI bit */
1250:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 3702              		.loc 1 1250 0
 3703 1734 7B68     		ldr	r3, [r7, #4]
 3704 1736 5B68     		ldr	r3, [r3, #4]
 3705 1738 1846     		mov	r0, r3
 3706 173a 4FF01001 		mov	r1, #16
 3707 173e 00F009F9 		bl	CheckITStatus
 3708 1742 0346     		mov	r3, r0
 3709 1744 FB73     		strb	r3, [r7, #15]
1251:../SPL/src/stm32f10x_can.c **** 	      break;
 3710              		.loc 1 1251 0
 3711 1746 39E0     		b	.L264
 3712              	.L253:
1252:../SPL/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1253:../SPL/src/stm32f10x_can.c ****                /* Check CAN_ESR_EWGF bit */
1254:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 3713              		.loc 1 1254 0
 3714 1748 7B68     		ldr	r3, [r7, #4]
 3715 174a 9B69     		ldr	r3, [r3, #24]
 3716 174c 1846     		mov	r0, r3
 3717 174e 4FF00101 		mov	r1, #1
 3718 1752 00F0FFF8 		bl	CheckITStatus
 3719 1756 0346     		mov	r3, r0
 3720 1758 FB73     		strb	r3, [r7, #15]
1255:../SPL/src/stm32f10x_can.c **** 	      break;
 3721              		.loc 1 1255 0
 3722 175a 2FE0     		b	.L264
 3723              	.L254:
1256:../SPL/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1257:../SPL/src/stm32f10x_can.c ****                /* Check CAN_ESR_EPVF bit */
1258:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 3724              		.loc 1 1258 0
 3725 175c 7B68     		ldr	r3, [r7, #4]
 3726 175e 9B69     		ldr	r3, [r3, #24]
 3727 1760 1846     		mov	r0, r3
 3728 1762 4FF00201 		mov	r1, #2
 3729 1766 00F0F5F8 		bl	CheckITStatus
 3730 176a 0346     		mov	r3, r0
 3731 176c FB73     		strb	r3, [r7, #15]
1259:../SPL/src/stm32f10x_can.c **** 	      break;
 3732              		.loc 1 1259 0
 3733 176e 25E0     		b	.L264
 3734              	.L255:
1260:../SPL/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1261:../SPL/src/stm32f10x_can.c ****                /* Check CAN_ESR_BOFF bit */
1262:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 3735              		.loc 1 1262 0
 3736 1770 7B68     		ldr	r3, [r7, #4]
 3737 1772 9B69     		ldr	r3, [r3, #24]
 3738 1774 1846     		mov	r0, r3
 3739 1776 4FF00401 		mov	r1, #4
 3740 177a 00F0EBF8 		bl	CheckITStatus
 3741 177e 0346     		mov	r3, r0
 3742 1780 FB73     		strb	r3, [r7, #15]
1263:../SPL/src/stm32f10x_can.c **** 	      break;
 3743              		.loc 1 1263 0
 3744 1782 1BE0     		b	.L264
 3745              	.L256:
1264:../SPL/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1265:../SPL/src/stm32f10x_can.c ****                /* Check CAN_ESR_LEC bit */
1266:../SPL/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 3746              		.loc 1 1266 0
 3747 1784 7B68     		ldr	r3, [r7, #4]
 3748 1786 9B69     		ldr	r3, [r3, #24]
 3749 1788 1846     		mov	r0, r3
 3750 178a 4FF07001 		mov	r1, #112
 3751 178e 00F0E1F8 		bl	CheckITStatus
 3752 1792 0346     		mov	r3, r0
 3753 1794 FB73     		strb	r3, [r7, #15]
1267:../SPL/src/stm32f10x_can.c **** 	      break;
 3754              		.loc 1 1267 0
 3755 1796 11E0     		b	.L264
 3756              	.L257:
1268:../SPL/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1269:../SPL/src/stm32f10x_can.c ****                /* Check CAN_MSR_ERRI bit */ 
1270:../SPL/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 3757              		.loc 1 1270 0
 3758 1798 7B68     		ldr	r3, [r7, #4]
 3759 179a 5B68     		ldr	r3, [r3, #4]
 3760 179c 1846     		mov	r0, r3
 3761 179e 4FF00401 		mov	r1, #4
 3762 17a2 00F0D7F8 		bl	CheckITStatus
 3763 17a6 0346     		mov	r3, r0
 3764 17a8 FB73     		strb	r3, [r7, #15]
1271:../SPL/src/stm32f10x_can.c **** 	      break;
 3765              		.loc 1 1271 0
 3766 17aa 00BF     		nop
 3767 17ac 06E0     		b	.L264
 3768              	.L245:
1272:../SPL/src/stm32f10x_can.c ****       default :
1273:../SPL/src/stm32f10x_can.c ****                /* in case of error, return RESET */
1274:../SPL/src/stm32f10x_can.c ****               itstatus = RESET;
 3769              		.loc 1 1274 0
 3770 17ae 4FF00003 		mov	r3, #0
 3771 17b2 FB73     		strb	r3, [r7, #15]
1275:../SPL/src/stm32f10x_can.c ****               break;
 3772              		.loc 1 1275 0
 3773 17b4 02E0     		b	.L264
 3774              	.L244:
1276:../SPL/src/stm32f10x_can.c ****     }
1277:../SPL/src/stm32f10x_can.c ****   }
1278:../SPL/src/stm32f10x_can.c ****   else
1279:../SPL/src/stm32f10x_can.c ****   {
1280:../SPL/src/stm32f10x_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1281:../SPL/src/stm32f10x_can.c ****     itstatus  = RESET;
 3775              		.loc 1 1281 0
 3776 17b6 4FF00003 		mov	r3, #0
 3777 17ba FB73     		strb	r3, [r7, #15]
 3778              	.L264:
1282:../SPL/src/stm32f10x_can.c ****   }
1283:../SPL/src/stm32f10x_can.c ****   
1284:../SPL/src/stm32f10x_can.c ****   /* Return the CAN_IT status */
1285:../SPL/src/stm32f10x_can.c ****   return  itstatus;
 3779              		.loc 1 1285 0
 3780 17bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1286:../SPL/src/stm32f10x_can.c **** }
 3781              		.loc 1 1286 0
 3782 17be 1846     		mov	r0, r3
 3783 17c0 07F11007 		add	r7, r7, #16
 3784 17c4 BD46     		mov	sp, r7
 3785 17c6 80BD     		pop	{r7, pc}
 3786              	.L267:
 3787              		.align	2
 3788              	.L266:
 3789 17c8 00640040 		.word	1073767424
 3790 17cc 00680040 		.word	1073768448
 3791 17d0 00000000 		.word	.LC0
 3792 17d4 01010100 		.word	65793
 3793              		.cfi_endproc
 3794              	.LFE51:
 3796              		.align	2
 3797              		.global	CAN_ClearITPendingBit
 3798              		.thumb
 3799              		.thumb_func
 3801              	CAN_ClearITPendingBit:
 3802              	.LFB52:
1287:../SPL/src/stm32f10x_can.c **** 
1288:../SPL/src/stm32f10x_can.c **** /**
1289:../SPL/src/stm32f10x_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1290:../SPL/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1291:../SPL/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1292:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_TME                     
1293:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF0               
1294:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV0                     
1295:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF1               
1296:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV1              
1297:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_WKU  
1298:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_SLK  
1299:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_EWG    
1300:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_EPV    
1301:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_BOF    
1302:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_LEC    
1303:../SPL/src/stm32f10x_can.c ****   *                  -  CAN_IT_ERR 
1304:../SPL/src/stm32f10x_can.c ****   * @retval None.
1305:../SPL/src/stm32f10x_can.c ****   */
1306:../SPL/src/stm32f10x_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1307:../SPL/src/stm32f10x_can.c **** {
 3803              		.loc 1 1307 0
 3804              		.cfi_startproc
 3805              		@ args = 0, pretend = 0, frame = 8
 3806              		@ frame_needed = 1, uses_anonymous_args = 0
 3807 17d8 80B5     		push	{r7, lr}
 3808              	.LCFI69:
 3809              		.cfi_def_cfa_offset 8
 3810              		.cfi_offset 7, -8
 3811              		.cfi_offset 14, -4
 3812 17da 82B0     		sub	sp, sp, #8
 3813              	.LCFI70:
 3814              		.cfi_def_cfa_offset 16
 3815 17dc 00AF     		add	r7, sp, #0
 3816              	.LCFI71:
 3817              		.cfi_def_cfa_register 7
 3818 17de 7860     		str	r0, [r7, #4]
 3819 17e0 3960     		str	r1, [r7, #0]
1308:../SPL/src/stm32f10x_can.c ****   /* Check the parameters */
1309:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 3820              		.loc 1 1309 0
 3821 17e2 7A68     		ldr	r2, [r7, #4]
 3822 17e4 574B     		ldr	r3, .L288
 3823 17e6 9A42     		cmp	r2, r3
 3824 17e8 08D0     		beq	.L269
 3825              		.loc 1 1309 0 is_stmt 0 discriminator 1
 3826 17ea 7A68     		ldr	r2, [r7, #4]
 3827 17ec 564B     		ldr	r3, .L288+4
 3828 17ee 9A42     		cmp	r2, r3
 3829 17f0 04D0     		beq	.L269
 3830              		.loc 1 1309 0 discriminator 2
 3831 17f2 5648     		ldr	r0, .L288+8
 3832 17f4 40F21D51 		movw	r1, #1309
 3833 17f8 FFF7FEFF 		bl	assert_failed
 3834              	.L269:
1310:../SPL/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
 3835              		.loc 1 1310 0 is_stmt 1
 3836 17fc 3B68     		ldr	r3, [r7, #0]
 3837 17fe 012B     		cmp	r3, #1
 3838 1800 2CD0     		beq	.L270
 3839              		.loc 1 1310 0 is_stmt 0 discriminator 1
 3840 1802 3B68     		ldr	r3, [r7, #0]
 3841 1804 042B     		cmp	r3, #4
 3842 1806 29D0     		beq	.L270
 3843              		.loc 1 1310 0 discriminator 2
 3844 1808 3B68     		ldr	r3, [r7, #0]
 3845 180a 082B     		cmp	r3, #8
 3846 180c 26D0     		beq	.L270
 3847              		.loc 1 1310 0 discriminator 3
 3848 180e 3B68     		ldr	r3, [r7, #0]
 3849 1810 202B     		cmp	r3, #32
 3850 1812 23D0     		beq	.L270
 3851              		.loc 1 1310 0 discriminator 4
 3852 1814 3B68     		ldr	r3, [r7, #0]
 3853 1816 402B     		cmp	r3, #64
 3854 1818 20D0     		beq	.L270
 3855              		.loc 1 1310 0 discriminator 5
 3856 181a 3B68     		ldr	r3, [r7, #0]
 3857 181c B3F5807F 		cmp	r3, #256
 3858 1820 1CD0     		beq	.L270
 3859              		.loc 1 1310 0 discriminator 6
 3860 1822 3B68     		ldr	r3, [r7, #0]
 3861 1824 B3F5007F 		cmp	r3, #512
 3862 1828 18D0     		beq	.L270
 3863              		.loc 1 1310 0 discriminator 7
 3864 182a 3B68     		ldr	r3, [r7, #0]
 3865 182c B3F5806F 		cmp	r3, #1024
 3866 1830 14D0     		beq	.L270
 3867              		.loc 1 1310 0 discriminator 8
 3868 1832 3B68     		ldr	r3, [r7, #0]
 3869 1834 B3F5006F 		cmp	r3, #2048
 3870 1838 10D0     		beq	.L270
 3871              		.loc 1 1310 0 discriminator 9
 3872 183a 3B68     		ldr	r3, [r7, #0]
 3873 183c B3F5004F 		cmp	r3, #32768
 3874 1840 0CD0     		beq	.L270
 3875              		.loc 1 1310 0 discriminator 10
 3876 1842 3B68     		ldr	r3, [r7, #0]
 3877 1844 B3F5803F 		cmp	r3, #65536
 3878 1848 08D0     		beq	.L270
 3879              		.loc 1 1310 0 discriminator 11
 3880 184a 3B68     		ldr	r3, [r7, #0]
 3881 184c B3F5003F 		cmp	r3, #131072
 3882 1850 04D0     		beq	.L270
 3883              		.loc 1 1310 0 discriminator 12
 3884 1852 3E48     		ldr	r0, .L288+8
 3885 1854 40F21E51 		movw	r1, #1310
 3886 1858 FFF7FEFF 		bl	assert_failed
 3887              	.L270:
1311:../SPL/src/stm32f10x_can.c **** 
1312:../SPL/src/stm32f10x_can.c ****   switch (CAN_IT)
 3888              		.loc 1 1312 0 is_stmt 1
 3889 185c 3B68     		ldr	r3, [r7, #0]
 3890 185e B3F5807F 		cmp	r3, #256
 3891 1862 49D0     		beq	.L277
 3892 1864 B3F5807F 		cmp	r3, #256
 3893 1868 0DD8     		bhi	.L284
 3894 186a 082B     		cmp	r3, #8
 3895 186c 2BD0     		beq	.L274
 3896 186e 082B     		cmp	r3, #8
 3897 1870 04D8     		bhi	.L285
 3898 1872 012B     		cmp	r3, #1
 3899 1874 1ED0     		beq	.L272
 3900 1876 042B     		cmp	r3, #4
 3901 1878 20D0     		beq	.L273
 3902 187a 5EE0     		b	.L271
 3903              	.L285:
 3904 187c 202B     		cmp	r3, #32
 3905 187e 27D0     		beq	.L275
 3906 1880 402B     		cmp	r3, #64
 3907 1882 2AD0     		beq	.L276
 3908 1884 59E0     		b	.L271
 3909              	.L284:
 3910 1886 B3F5006F 		cmp	r3, #2048
 3911 188a 44D0     		beq	.L280
 3912 188c B3F5006F 		cmp	r3, #2048
 3913 1890 06D8     		bhi	.L286
 3914 1892 B3F5007F 		cmp	r3, #512
 3915 1896 34D0     		beq	.L278
 3916 1898 B3F5806F 		cmp	r3, #1024
 3917 189c 36D0     		beq	.L279
 3918 189e 4CE0     		b	.L271
 3919              	.L286:
 3920 18a0 B3F5803F 		cmp	r3, #65536
 3921 18a4 1ED0     		beq	.L282
 3922 18a6 B3F5003F 		cmp	r3, #131072
 3923 18aa 20D0     		beq	.L283
 3924 18ac B3F5004F 		cmp	r3, #32768
 3925 18b0 3AD0     		beq	.L281
 3926 18b2 42E0     		b	.L271
 3927              	.L272:
1313:../SPL/src/stm32f10x_can.c ****   {
1314:../SPL/src/stm32f10x_can.c ****       case CAN_IT_TME:
1315:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_TSR_RQCPx (rc_w1)*/
1316:../SPL/src/stm32f10x_can.c **** 	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 3928              		.loc 1 1316 0
 3929 18b4 7B68     		ldr	r3, [r7, #4]
 3930 18b6 264A     		ldr	r2, .L288+12
 3931 18b8 9A60     		str	r2, [r3, #8]
1317:../SPL/src/stm32f10x_can.c **** 	      break;
 3932              		.loc 1 1317 0
 3933 18ba 3FE0     		b	.L268
 3934              	.L273:
1318:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1319:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1320:../SPL/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FULL0; 
 3935              		.loc 1 1320 0
 3936 18bc 7B68     		ldr	r3, [r7, #4]
 3937 18be 4FF00802 		mov	r2, #8
 3938 18c2 DA60     		str	r2, [r3, #12]
1321:../SPL/src/stm32f10x_can.c **** 	      break;
 3939              		.loc 1 1321 0
 3940 18c4 3AE0     		b	.L268
 3941              	.L274:
1322:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1323:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1324:../SPL/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FOVR0; 
 3942              		.loc 1 1324 0
 3943 18c6 7B68     		ldr	r3, [r7, #4]
 3944 18c8 4FF01002 		mov	r2, #16
 3945 18cc DA60     		str	r2, [r3, #12]
1325:../SPL/src/stm32f10x_can.c **** 	      break;
 3946              		.loc 1 1325 0
 3947 18ce 35E0     		b	.L268
 3948              	.L275:
1326:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1327:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1328:../SPL/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FULL1;  
 3949              		.loc 1 1328 0
 3950 18d0 7B68     		ldr	r3, [r7, #4]
 3951 18d2 4FF00802 		mov	r2, #8
 3952 18d6 1A61     		str	r2, [r3, #16]
1329:../SPL/src/stm32f10x_can.c **** 	      break;
 3953              		.loc 1 1329 0
 3954 18d8 30E0     		b	.L268
 3955              	.L276:
1330:../SPL/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1331:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1332:../SPL/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FOVR1; 
 3956              		.loc 1 1332 0
 3957 18da 7B68     		ldr	r3, [r7, #4]
 3958 18dc 4FF01002 		mov	r2, #16
 3959 18e0 1A61     		str	r2, [r3, #16]
1333:../SPL/src/stm32f10x_can.c **** 	      break;
 3960              		.loc 1 1333 0
 3961 18e2 2BE0     		b	.L268
 3962              	.L282:
1334:../SPL/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1335:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_WKUI (rc_w1)*/
1336:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_WKUI;  
 3963              		.loc 1 1336 0
 3964 18e4 7B68     		ldr	r3, [r7, #4]
 3965 18e6 4FF00802 		mov	r2, #8
 3966 18ea 5A60     		str	r2, [r3, #4]
1337:../SPL/src/stm32f10x_can.c **** 	      break;
 3967              		.loc 1 1337 0
 3968 18ec 26E0     		b	.L268
 3969              	.L283:
1338:../SPL/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1339:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1340:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_SLAKI;   
 3970              		.loc 1 1340 0
 3971 18ee 7B68     		ldr	r3, [r7, #4]
 3972 18f0 4FF01002 		mov	r2, #16
 3973 18f4 5A60     		str	r2, [r3, #4]
1341:../SPL/src/stm32f10x_can.c **** 	      break;
 3974              		.loc 1 1341 0
 3975 18f6 21E0     		b	.L268
 3976              	.L277:
1342:../SPL/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1343:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1344:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI;
 3977              		.loc 1 1344 0
 3978 18f8 7B68     		ldr	r3, [r7, #4]
 3979 18fa 4FF00402 		mov	r2, #4
 3980 18fe 5A60     		str	r2, [r3, #4]
1345:../SPL/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1346:../SPL/src/stm32f10x_can.c ****                         of the CAN Bus status*/ 
1347:../SPL/src/stm32f10x_can.c **** 	      break;
 3981              		.loc 1 1347 0
 3982 1900 1CE0     		b	.L268
 3983              	.L278:
1348:../SPL/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1349:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1350:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
 3984              		.loc 1 1350 0
 3985 1902 7B68     		ldr	r3, [r7, #4]
 3986 1904 4FF00402 		mov	r2, #4
 3987 1908 5A60     		str	r2, [r3, #4]
1351:../SPL/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1352:../SPL/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1353:../SPL/src/stm32f10x_can.c **** 	      break;
 3988              		.loc 1 1353 0
 3989 190a 17E0     		b	.L268
 3990              	.L279:
1354:../SPL/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1355:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */ 
1356:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
 3991              		.loc 1 1356 0
 3992 190c 7B68     		ldr	r3, [r7, #4]
 3993 190e 4FF00402 		mov	r2, #4
 3994 1912 5A60     		str	r2, [r3, #4]
1357:../SPL/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1358:../SPL/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1359:../SPL/src/stm32f10x_can.c **** 	      break;
 3995              		.loc 1 1359 0
 3996 1914 12E0     		b	.L268
 3997              	.L280:
1360:../SPL/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1361:../SPL/src/stm32f10x_can.c ****               /*  Clear LEC bits */
1362:../SPL/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
 3998              		.loc 1 1362 0
 3999 1916 7B68     		ldr	r3, [r7, #4]
 4000 1918 4FF00002 		mov	r2, #0
 4001 191c 9A61     		str	r2, [r3, #24]
1363:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1364:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
 4002              		.loc 1 1364 0
 4003 191e 7B68     		ldr	r3, [r7, #4]
 4004 1920 4FF00402 		mov	r2, #4
 4005 1924 5A60     		str	r2, [r3, #4]
1365:../SPL/src/stm32f10x_can.c **** 	      break;
 4006              		.loc 1 1365 0
 4007 1926 09E0     		b	.L268
 4008              	.L281:
1366:../SPL/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1367:../SPL/src/stm32f10x_can.c ****               /*Clear LEC bits */
1368:../SPL/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
 4009              		.loc 1 1368 0
 4010 1928 7B68     		ldr	r3, [r7, #4]
 4011 192a 4FF00002 		mov	r2, #0
 4012 192e 9A61     		str	r2, [r3, #24]
1369:../SPL/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1370:../SPL/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
 4013              		.loc 1 1370 0
 4014 1930 7B68     		ldr	r3, [r7, #4]
 4015 1932 4FF00402 		mov	r2, #4
 4016 1936 5A60     		str	r2, [r3, #4]
1371:../SPL/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
1372:../SPL/src/stm32f10x_can.c ****                   of the CAN Bus status*/
1373:../SPL/src/stm32f10x_can.c **** 	      break;
 4017              		.loc 1 1373 0
 4018 1938 00E0     		b	.L268
 4019              	.L271:
1374:../SPL/src/stm32f10x_can.c ****       default :
1375:../SPL/src/stm32f10x_can.c **** 	      break;
 4020              		.loc 1 1375 0
 4021 193a 00BF     		nop
 4022              	.L268:
1376:../SPL/src/stm32f10x_can.c ****    }
1377:../SPL/src/stm32f10x_can.c **** }
 4023              		.loc 1 1377 0
 4024 193c 07F10807 		add	r7, r7, #8
 4025 1940 BD46     		mov	sp, r7
 4026 1942 80BD     		pop	{r7, pc}
 4027              	.L289:
 4028              		.align	2
 4029              	.L288:
 4030 1944 00640040 		.word	1073767424
 4031 1948 00680040 		.word	1073768448
 4032 194c 00000000 		.word	.LC0
 4033 1950 01010100 		.word	65793
 4034              		.cfi_endproc
 4035              	.LFE52:
 4037              		.align	2
 4038              		.thumb
 4039              		.thumb_func
 4041              	CheckITStatus:
 4042              	.LFB53:
1378:../SPL/src/stm32f10x_can.c **** 
1379:../SPL/src/stm32f10x_can.c **** /**
1380:../SPL/src/stm32f10x_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1381:../SPL/src/stm32f10x_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1382:../SPL/src/stm32f10x_can.c ****   * @param  It_Bit:  specifies the interrupt source bit to check.
1383:../SPL/src/stm32f10x_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1384:../SPL/src/stm32f10x_can.c ****   */
1385:../SPL/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1386:../SPL/src/stm32f10x_can.c **** {
 4043              		.loc 1 1386 0
 4044              		.cfi_startproc
 4045              		@ args = 0, pretend = 0, frame = 16
 4046              		@ frame_needed = 1, uses_anonymous_args = 0
 4047              		@ link register save eliminated.
 4048 1954 80B4     		push	{r7}
 4049              	.LCFI72:
 4050              		.cfi_def_cfa_offset 4
 4051              		.cfi_offset 7, -4
 4052 1956 85B0     		sub	sp, sp, #20
 4053              	.LCFI73:
 4054              		.cfi_def_cfa_offset 24
 4055 1958 00AF     		add	r7, sp, #0
 4056              	.LCFI74:
 4057              		.cfi_def_cfa_register 7
 4058 195a 7860     		str	r0, [r7, #4]
 4059 195c 3960     		str	r1, [r7, #0]
1387:../SPL/src/stm32f10x_can.c ****   ITStatus pendingbitstatus = RESET;
 4060              		.loc 1 1387 0
 4061 195e 4FF00003 		mov	r3, #0
 4062 1962 FB73     		strb	r3, [r7, #15]
1388:../SPL/src/stm32f10x_can.c ****   
1389:../SPL/src/stm32f10x_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 4063              		.loc 1 1389 0
 4064 1964 7A68     		ldr	r2, [r7, #4]
 4065 1966 3B68     		ldr	r3, [r7, #0]
 4066 1968 1340     		ands	r3, r3, r2
 4067 196a 002B     		cmp	r3, #0
 4068 196c 03D0     		beq	.L291
1390:../SPL/src/stm32f10x_can.c ****   {
1391:../SPL/src/stm32f10x_can.c ****     /* CAN_IT is set */
1392:../SPL/src/stm32f10x_can.c ****     pendingbitstatus = SET;
 4069              		.loc 1 1392 0
 4070 196e 4FF00103 		mov	r3, #1
 4071 1972 FB73     		strb	r3, [r7, #15]
 4072 1974 02E0     		b	.L292
 4073              	.L291:
1393:../SPL/src/stm32f10x_can.c ****   }
1394:../SPL/src/stm32f10x_can.c ****   else
1395:../SPL/src/stm32f10x_can.c ****   {
1396:../SPL/src/stm32f10x_can.c ****     /* CAN_IT is reset */
1397:../SPL/src/stm32f10x_can.c ****     pendingbitstatus = RESET;
 4074              		.loc 1 1397 0
 4075 1976 4FF00003 		mov	r3, #0
 4076 197a FB73     		strb	r3, [r7, #15]
 4077              	.L292:
1398:../SPL/src/stm32f10x_can.c ****   }
1399:../SPL/src/stm32f10x_can.c ****   return pendingbitstatus;
 4078              		.loc 1 1399 0
 4079 197c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1400:../SPL/src/stm32f10x_can.c **** }
 4080              		.loc 1 1400 0
 4081 197e 1846     		mov	r0, r3
 4082 1980 07F11407 		add	r7, r7, #20
 4083 1984 BD46     		mov	sp, r7
 4084 1986 80BC     		pop	{r7}
 4085 1988 7047     		bx	lr
 4086              		.cfi_endproc
 4087              	.LFE53:
 4089              	.Letext0:
 4090              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 4091              		.file 3 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/stm32f10x.h"
 4092              		.file 4 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\SPL\\inc/stm32f10x_can.h"
 4093              		.file 5 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_can.c
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:19     .rodata:00000000 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:23     .text:00000000 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:28     .text:00000000 CAN_DeInit
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:93     .text:00000064 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:99     .text:00000070 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:104    .text:00000070 CAN_Init
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:478    .text:000002dc $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:483    .text:000002e8 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:579    .text:00000380 CAN_FilterInit
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:861    .text:00000578 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:866    .text:00000580 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:871    .text:00000580 CAN_StructInit
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:946    .text:000005ec CAN_SlaveStartBank
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1013   .text:0000065c $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1018   .text:00000664 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1023   .text:00000664 CAN_DBGFreeze
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1097   .text:000006c8 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1103   .text:000006d4 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1108   .text:000006d4 CAN_TTComModeCmd
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1218   .text:00000798 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1224   .text:000007a4 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1229   .text:000007a4 CAN_Transmit
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1559   .text:00000a0c $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1565   .text:00000a18 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1570   .text:00000a18 CAN_TransmitStatus
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1747   .text:00000b10 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1759   .text:00000b34 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1764   .text:00000b34 CAN_CancelTransmit
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1854   .text:00000bac $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1860   .text:00000bb8 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:1865   .text:00000bb8 CAN_Receive
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2101   .text:00000d90 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2107   .text:00000d9c $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2112   .text:00000d9c CAN_FIFORelease
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2186   .text:00000e00 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2192   .text:00000e0c $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2197   .text:00000e0c CAN_MessagePending
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2286   .text:00000e88 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2292   .text:00000e94 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2297   .text:00000e94 CAN_OperatingModeRequest
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2506   .text:00000fdc $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2512   .text:00000fe8 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2517   .text:00000fe8 CAN_Sleep
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2580   .text:00001040 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2586   .text:0000104c $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2591   .text:0000104c CAN_WakeUp
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2675   .text:000010c0 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2681   .text:000010cc $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2686   .text:000010cc CAN_GetLastErrorCode
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2738   .text:0000110c $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2744   .text:00001118 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2749   .text:00001118 CAN_GetReceiveErrorCounter
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2800   .text:00001158 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2806   .text:00001164 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2811   .text:00001164 CAN_GetLSBTransmitErrorCounter
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2863   .text:000011a8 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2869   .text:000011b4 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:2874   .text:000011b4 CAN_ITConfig
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3013   .text:0000128c $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3019   .text:00001298 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3024   .text:00001298 CAN_GetFlagStatus
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3265   .text:0000142c $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3286   .text:00001474 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3291   .text:00001474 CAN_ClearFlag
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3444   .text:0000155c $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3460   .text:00001590 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3465   .text:00001590 CAN_GetITStatus
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:4041   .text:00001954 CheckITStatus
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3789   .text:000017c8 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3796   .text:000017d8 $t
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:3801   .text:000017d8 CAN_ClearITPendingBit
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:4030   .text:00001944 $d
C:\Users\PC108\AppData\Local\Temp\ccATRxOa.s:4037   .text:00001954 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9001f459856fa07d79ce9793bb17c6cd
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_exti.h.56.8b2f216f9ded9d03a9eb42ed6973fc04
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_can.h.46.1ac0f4006ec37107fef0fba0d03e1073

UNDEFINED SYMBOLS
assert_failed
RCC_APB1PeriphResetCmd

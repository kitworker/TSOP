   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_spi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC0:
  21 0000 2E2E2F53 		.ascii	"../SPL/src/stm32f10x_spi.c\000"
  21      504C2F73 
  21      72632F73 
  21      746D3332 
  21      66313078 
  22 001b 00       		.text
  23              		.align	2
  24              		.global	SPI_I2S_DeInit
  25              		.thumb
  26              		.thumb_func
  28              	SPI_I2S_DeInit:
  29              	.LFB29:
  30              		.file 1 "../SPL/src/stm32f10x_spi.c"
   1:../SPL/src/stm32f10x_spi.c **** /**
   2:../SPL/src/stm32f10x_spi.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_spi.c ****   * @file    stm32f10x_spi.c
   4:../SPL/src/stm32f10x_spi.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_spi.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_spi.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_spi.c ****   * @brief   This file provides all the SPI firmware functions.
   8:../SPL/src/stm32f10x_spi.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_spi.c ****   * @attention
  10:../SPL/src/stm32f10x_spi.c ****   *
  11:../SPL/src/stm32f10x_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_spi.c ****   *
  18:../SPL/src/stm32f10x_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_spi.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_spi.c ****   */
  21:../SPL/src/stm32f10x_spi.c **** 
  22:../SPL/src/stm32f10x_spi.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_spi.c **** #include "stm32f10x_spi.h"
  24:../SPL/src/stm32f10x_spi.c **** #include "stm32f10x_rcc.h"
  25:../SPL/src/stm32f10x_spi.c **** 
  26:../SPL/src/stm32f10x_spi.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../SPL/src/stm32f10x_spi.c ****   * @{
  28:../SPL/src/stm32f10x_spi.c ****   */
  29:../SPL/src/stm32f10x_spi.c **** 
  30:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI 
  31:../SPL/src/stm32f10x_spi.c ****   * @brief SPI driver modules
  32:../SPL/src/stm32f10x_spi.c ****   * @{
  33:../SPL/src/stm32f10x_spi.c ****   */ 
  34:../SPL/src/stm32f10x_spi.c **** 
  35:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_TypesDefinitions
  36:../SPL/src/stm32f10x_spi.c ****   * @{
  37:../SPL/src/stm32f10x_spi.c ****   */
  38:../SPL/src/stm32f10x_spi.c **** 
  39:../SPL/src/stm32f10x_spi.c **** /**
  40:../SPL/src/stm32f10x_spi.c ****   * @}
  41:../SPL/src/stm32f10x_spi.c ****   */ 
  42:../SPL/src/stm32f10x_spi.c **** 
  43:../SPL/src/stm32f10x_spi.c **** 
  44:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Defines
  45:../SPL/src/stm32f10x_spi.c ****   * @{
  46:../SPL/src/stm32f10x_spi.c ****   */
  47:../SPL/src/stm32f10x_spi.c **** 
  48:../SPL/src/stm32f10x_spi.c **** /* SPI SPE mask */
  49:../SPL/src/stm32f10x_spi.c **** #define CR1_SPE_Set          ((uint16_t)0x0040)
  50:../SPL/src/stm32f10x_spi.c **** #define CR1_SPE_Reset        ((uint16_t)0xFFBF)
  51:../SPL/src/stm32f10x_spi.c **** 
  52:../SPL/src/stm32f10x_spi.c **** /* I2S I2SE mask */
  53:../SPL/src/stm32f10x_spi.c **** #define I2SCFGR_I2SE_Set     ((uint16_t)0x0400)
  54:../SPL/src/stm32f10x_spi.c **** #define I2SCFGR_I2SE_Reset   ((uint16_t)0xFBFF)
  55:../SPL/src/stm32f10x_spi.c **** 
  56:../SPL/src/stm32f10x_spi.c **** /* SPI CRCNext mask */
  57:../SPL/src/stm32f10x_spi.c **** #define CR1_CRCNext_Set      ((uint16_t)0x1000)
  58:../SPL/src/stm32f10x_spi.c **** 
  59:../SPL/src/stm32f10x_spi.c **** /* SPI CRCEN mask */
  60:../SPL/src/stm32f10x_spi.c **** #define CR1_CRCEN_Set        ((uint16_t)0x2000)
  61:../SPL/src/stm32f10x_spi.c **** #define CR1_CRCEN_Reset      ((uint16_t)0xDFFF)
  62:../SPL/src/stm32f10x_spi.c **** 
  63:../SPL/src/stm32f10x_spi.c **** /* SPI SSOE mask */
  64:../SPL/src/stm32f10x_spi.c **** #define CR2_SSOE_Set         ((uint16_t)0x0004)
  65:../SPL/src/stm32f10x_spi.c **** #define CR2_SSOE_Reset       ((uint16_t)0xFFFB)
  66:../SPL/src/stm32f10x_spi.c **** 
  67:../SPL/src/stm32f10x_spi.c **** /* SPI registers Masks */
  68:../SPL/src/stm32f10x_spi.c **** #define CR1_CLEAR_Mask       ((uint16_t)0x3040)
  69:../SPL/src/stm32f10x_spi.c **** #define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
  70:../SPL/src/stm32f10x_spi.c **** 
  71:../SPL/src/stm32f10x_spi.c **** /* SPI or I2S mode selection masks */
  72:../SPL/src/stm32f10x_spi.c **** #define SPI_Mode_Select      ((uint16_t)0xF7FF)
  73:../SPL/src/stm32f10x_spi.c **** #define I2S_Mode_Select      ((uint16_t)0x0800) 
  74:../SPL/src/stm32f10x_spi.c **** 
  75:../SPL/src/stm32f10x_spi.c **** /* I2S clock source selection masks */
  76:../SPL/src/stm32f10x_spi.c **** #define I2S2_CLOCK_SRC       ((uint32_t)(0x00020000))
  77:../SPL/src/stm32f10x_spi.c **** #define I2S3_CLOCK_SRC       ((uint32_t)(0x00040000))
  78:../SPL/src/stm32f10x_spi.c **** #define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
  79:../SPL/src/stm32f10x_spi.c **** #define I2S_DIV_MASK         ((uint32_t)(0x000000F0))
  80:../SPL/src/stm32f10x_spi.c **** 
  81:../SPL/src/stm32f10x_spi.c **** /**
  82:../SPL/src/stm32f10x_spi.c ****   * @}
  83:../SPL/src/stm32f10x_spi.c ****   */
  84:../SPL/src/stm32f10x_spi.c **** 
  85:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Macros
  86:../SPL/src/stm32f10x_spi.c ****   * @{
  87:../SPL/src/stm32f10x_spi.c ****   */
  88:../SPL/src/stm32f10x_spi.c **** 
  89:../SPL/src/stm32f10x_spi.c **** /**
  90:../SPL/src/stm32f10x_spi.c ****   * @}
  91:../SPL/src/stm32f10x_spi.c ****   */
  92:../SPL/src/stm32f10x_spi.c **** 
  93:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Variables
  94:../SPL/src/stm32f10x_spi.c ****   * @{
  95:../SPL/src/stm32f10x_spi.c ****   */
  96:../SPL/src/stm32f10x_spi.c **** 
  97:../SPL/src/stm32f10x_spi.c **** /**
  98:../SPL/src/stm32f10x_spi.c ****   * @}
  99:../SPL/src/stm32f10x_spi.c ****   */
 100:../SPL/src/stm32f10x_spi.c **** 
 101:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_FunctionPrototypes
 102:../SPL/src/stm32f10x_spi.c ****   * @{
 103:../SPL/src/stm32f10x_spi.c ****   */
 104:../SPL/src/stm32f10x_spi.c **** 
 105:../SPL/src/stm32f10x_spi.c **** /**
 106:../SPL/src/stm32f10x_spi.c ****   * @}
 107:../SPL/src/stm32f10x_spi.c ****   */
 108:../SPL/src/stm32f10x_spi.c **** 
 109:../SPL/src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Functions
 110:../SPL/src/stm32f10x_spi.c ****   * @{
 111:../SPL/src/stm32f10x_spi.c ****   */
 112:../SPL/src/stm32f10x_spi.c **** 
 113:../SPL/src/stm32f10x_spi.c **** /**
 114:../SPL/src/stm32f10x_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 115:../SPL/src/stm32f10x_spi.c ****   *         reset values (Affects also the I2Ss).
 116:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 117:../SPL/src/stm32f10x_spi.c ****   * @retval None
 118:../SPL/src/stm32f10x_spi.c ****   */
 119:../SPL/src/stm32f10x_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 120:../SPL/src/stm32f10x_spi.c **** {
  31              		.loc 1 120 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 7860     		str	r0, [r7, #4]
 121:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 122:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
  47              		.loc 1 122 0
  48 0008 7A68     		ldr	r2, [r7, #4]
  49 000a 234B     		ldr	r3, .L6
  50 000c 9A42     		cmp	r2, r3
  51 000e 0CD0     		beq	.L2
  52              		.loc 1 122 0 is_stmt 0 discriminator 1
  53 0010 7A68     		ldr	r2, [r7, #4]
  54 0012 224B     		ldr	r3, .L6+4
  55 0014 9A42     		cmp	r2, r3
  56 0016 08D0     		beq	.L2
  57              		.loc 1 122 0 discriminator 2
  58 0018 7A68     		ldr	r2, [r7, #4]
  59 001a 214B     		ldr	r3, .L6+8
  60 001c 9A42     		cmp	r2, r3
  61 001e 04D0     		beq	.L2
  62              		.loc 1 122 0 discriminator 3
  63 0020 2048     		ldr	r0, .L6+12
  64 0022 4FF07A01 		mov	r1, #122
  65 0026 FFF7FEFF 		bl	assert_failed
  66              	.L2:
 123:../SPL/src/stm32f10x_spi.c **** 
 124:../SPL/src/stm32f10x_spi.c ****   if (SPIx == SPI1)
  67              		.loc 1 124 0 is_stmt 1
  68 002a 7A68     		ldr	r2, [r7, #4]
  69 002c 1A4B     		ldr	r3, .L6
  70 002e 9A42     		cmp	r2, r3
  71 0030 0CD1     		bne	.L3
 125:../SPL/src/stm32f10x_spi.c ****   {
 126:../SPL/src/stm32f10x_spi.c ****     /* Enable SPI1 reset state */
 127:../SPL/src/stm32f10x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  72              		.loc 1 127 0
  73 0032 4FF48050 		mov	r0, #4096
  74 0036 4FF00101 		mov	r1, #1
  75 003a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 128:../SPL/src/stm32f10x_spi.c ****     /* Release SPI1 from reset state */
 129:../SPL/src/stm32f10x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  76              		.loc 1 129 0
  77 003e 4FF48050 		mov	r0, #4096
  78 0042 4FF00001 		mov	r1, #0
  79 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  80 004a 20E0     		b	.L1
  81              	.L3:
 130:../SPL/src/stm32f10x_spi.c ****   }
 131:../SPL/src/stm32f10x_spi.c ****   else if (SPIx == SPI2)
  82              		.loc 1 131 0
  83 004c 7A68     		ldr	r2, [r7, #4]
  84 004e 134B     		ldr	r3, .L6+4
  85 0050 9A42     		cmp	r2, r3
  86 0052 0CD1     		bne	.L5
 132:../SPL/src/stm32f10x_spi.c ****   {
 133:../SPL/src/stm32f10x_spi.c ****     /* Enable SPI2 reset state */
 134:../SPL/src/stm32f10x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  87              		.loc 1 134 0
  88 0054 4FF48040 		mov	r0, #16384
  89 0058 4FF00101 		mov	r1, #1
  90 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 135:../SPL/src/stm32f10x_spi.c ****     /* Release SPI2 from reset state */
 136:../SPL/src/stm32f10x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  91              		.loc 1 136 0
  92 0060 4FF48040 		mov	r0, #16384
  93 0064 4FF00001 		mov	r1, #0
  94 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  95 006c 0FE0     		b	.L1
  96              	.L5:
 137:../SPL/src/stm32f10x_spi.c ****   }
 138:../SPL/src/stm32f10x_spi.c ****   else
 139:../SPL/src/stm32f10x_spi.c ****   {
 140:../SPL/src/stm32f10x_spi.c ****     if (SPIx == SPI3)
  97              		.loc 1 140 0
  98 006e 7A68     		ldr	r2, [r7, #4]
  99 0070 0B4B     		ldr	r3, .L6+8
 100 0072 9A42     		cmp	r2, r3
 101 0074 0BD1     		bne	.L1
 141:../SPL/src/stm32f10x_spi.c ****     {
 142:../SPL/src/stm32f10x_spi.c ****       /* Enable SPI3 reset state */
 143:../SPL/src/stm32f10x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 102              		.loc 1 143 0
 103 0076 4FF40040 		mov	r0, #32768
 104 007a 4FF00101 		mov	r1, #1
 105 007e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 144:../SPL/src/stm32f10x_spi.c ****       /* Release SPI3 from reset state */
 145:../SPL/src/stm32f10x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 106              		.loc 1 145 0
 107 0082 4FF40040 		mov	r0, #32768
 108 0086 4FF00001 		mov	r1, #0
 109 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 110              	.L1:
 146:../SPL/src/stm32f10x_spi.c ****     }
 147:../SPL/src/stm32f10x_spi.c ****   }
 148:../SPL/src/stm32f10x_spi.c **** }
 111              		.loc 1 148 0
 112 008e 07F10807 		add	r7, r7, #8
 113 0092 BD46     		mov	sp, r7
 114 0094 80BD     		pop	{r7, pc}
 115              	.L7:
 116 0096 00BF     		.align	2
 117              	.L6:
 118 0098 00300140 		.word	1073819648
 119 009c 00380040 		.word	1073756160
 120 00a0 003C0040 		.word	1073757184
 121 00a4 00000000 		.word	.LC0
 122              		.cfi_endproc
 123              	.LFE29:
 125              		.align	2
 126              		.global	SPI_Init
 127              		.thumb
 128              		.thumb_func
 130              	SPI_Init:
 131              	.LFB30:
 149:../SPL/src/stm32f10x_spi.c **** 
 150:../SPL/src/stm32f10x_spi.c **** /**
 151:../SPL/src/stm32f10x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 152:../SPL/src/stm32f10x_spi.c ****   *         parameters in the SPI_InitStruct.
 153:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 154:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 155:../SPL/src/stm32f10x_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 156:../SPL/src/stm32f10x_spi.c ****   * @retval None
 157:../SPL/src/stm32f10x_spi.c ****   */
 158:../SPL/src/stm32f10x_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 159:../SPL/src/stm32f10x_spi.c **** {
 132              		.loc 1 159 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 16
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 00a8 80B5     		push	{r7, lr}
 137              	.LCFI3:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 00aa 84B0     		sub	sp, sp, #16
 142              	.LCFI4:
 143              		.cfi_def_cfa_offset 24
 144 00ac 00AF     		add	r7, sp, #0
 145              	.LCFI5:
 146              		.cfi_def_cfa_register 7
 147 00ae 7860     		str	r0, [r7, #4]
 148 00b0 3960     		str	r1, [r7, #0]
 160:../SPL/src/stm32f10x_spi.c ****   uint16_t tmpreg = 0;
 149              		.loc 1 160 0
 150 00b2 4FF00003 		mov	r3, #0
 151 00b6 FB81     		strh	r3, [r7, #14]	@ movhi
 161:../SPL/src/stm32f10x_spi.c ****   
 162:../SPL/src/stm32f10x_spi.c ****   /* check the parameters */
 163:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));   
 152              		.loc 1 163 0
 153 00b8 7A68     		ldr	r2, [r7, #4]
 154 00ba 714B     		ldr	r3, .L19
 155 00bc 9A42     		cmp	r2, r3
 156 00be 0CD0     		beq	.L9
 157              		.loc 1 163 0 is_stmt 0 discriminator 1
 158 00c0 7A68     		ldr	r2, [r7, #4]
 159 00c2 704B     		ldr	r3, .L19+4
 160 00c4 9A42     		cmp	r2, r3
 161 00c6 08D0     		beq	.L9
 162              		.loc 1 163 0 discriminator 2
 163 00c8 7A68     		ldr	r2, [r7, #4]
 164 00ca 6F4B     		ldr	r3, .L19+8
 165 00cc 9A42     		cmp	r2, r3
 166 00ce 04D0     		beq	.L9
 167              		.loc 1 163 0 discriminator 3
 168 00d0 6E48     		ldr	r0, .L19+12
 169 00d2 4FF0A301 		mov	r1, #163
 170 00d6 FFF7FEFF 		bl	assert_failed
 171              	.L9:
 164:../SPL/src/stm32f10x_spi.c ****   
 165:../SPL/src/stm32f10x_spi.c ****   /* Check the SPI parameters */
 166:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 172              		.loc 1 166 0 is_stmt 1
 173 00da 3B68     		ldr	r3, [r7, #0]
 174 00dc 1B88     		ldrh	r3, [r3, #0]
 175 00de 002B     		cmp	r3, #0
 176 00e0 13D0     		beq	.L10
 177              		.loc 1 166 0 is_stmt 0 discriminator 1
 178 00e2 3B68     		ldr	r3, [r7, #0]
 179 00e4 1B88     		ldrh	r3, [r3, #0]
 180 00e6 B3F5806F 		cmp	r3, #1024
 181 00ea 0ED0     		beq	.L10
 182              		.loc 1 166 0 discriminator 2
 183 00ec 3B68     		ldr	r3, [r7, #0]
 184 00ee 1B88     		ldrh	r3, [r3, #0]
 185 00f0 B3F5004F 		cmp	r3, #32768
 186 00f4 09D0     		beq	.L10
 187              		.loc 1 166 0 discriminator 3
 188 00f6 3B68     		ldr	r3, [r7, #0]
 189 00f8 1B88     		ldrh	r3, [r3, #0]
 190 00fa B3F5404F 		cmp	r3, #49152
 191 00fe 04D0     		beq	.L10
 192              		.loc 1 166 0 discriminator 4
 193 0100 6248     		ldr	r0, .L19+12
 194 0102 4FF0A601 		mov	r1, #166
 195 0106 FFF7FEFF 		bl	assert_failed
 196              	.L10:
 167:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 197              		.loc 1 167 0 is_stmt 1
 198 010a 3B68     		ldr	r3, [r7, #0]
 199 010c 5B88     		ldrh	r3, [r3, #2]
 200 010e B3F5827F 		cmp	r3, #260
 201 0112 08D0     		beq	.L11
 202              		.loc 1 167 0 is_stmt 0 discriminator 1
 203 0114 3B68     		ldr	r3, [r7, #0]
 204 0116 5B88     		ldrh	r3, [r3, #2]
 205 0118 002B     		cmp	r3, #0
 206 011a 04D0     		beq	.L11
 207              		.loc 1 167 0 discriminator 2
 208 011c 5B48     		ldr	r0, .L19+12
 209 011e 4FF0A701 		mov	r1, #167
 210 0122 FFF7FEFF 		bl	assert_failed
 211              	.L11:
 168:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 212              		.loc 1 168 0 is_stmt 1
 213 0126 3B68     		ldr	r3, [r7, #0]
 214 0128 9B88     		ldrh	r3, [r3, #4]
 215 012a B3F5006F 		cmp	r3, #2048
 216 012e 08D0     		beq	.L12
 217              		.loc 1 168 0 is_stmt 0 discriminator 1
 218 0130 3B68     		ldr	r3, [r7, #0]
 219 0132 9B88     		ldrh	r3, [r3, #4]
 220 0134 002B     		cmp	r3, #0
 221 0136 04D0     		beq	.L12
 222              		.loc 1 168 0 discriminator 2
 223 0138 5448     		ldr	r0, .L19+12
 224 013a 4FF0A801 		mov	r1, #168
 225 013e FFF7FEFF 		bl	assert_failed
 226              	.L12:
 169:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 227              		.loc 1 169 0 is_stmt 1
 228 0142 3B68     		ldr	r3, [r7, #0]
 229 0144 DB88     		ldrh	r3, [r3, #6]
 230 0146 002B     		cmp	r3, #0
 231 0148 08D0     		beq	.L13
 232              		.loc 1 169 0 is_stmt 0 discriminator 1
 233 014a 3B68     		ldr	r3, [r7, #0]
 234 014c DB88     		ldrh	r3, [r3, #6]
 235 014e 022B     		cmp	r3, #2
 236 0150 04D0     		beq	.L13
 237              		.loc 1 169 0 discriminator 2
 238 0152 4E48     		ldr	r0, .L19+12
 239 0154 4FF0A901 		mov	r1, #169
 240 0158 FFF7FEFF 		bl	assert_failed
 241              	.L13:
 170:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 242              		.loc 1 170 0 is_stmt 1
 243 015c 3B68     		ldr	r3, [r7, #0]
 244 015e 1B89     		ldrh	r3, [r3, #8]
 245 0160 002B     		cmp	r3, #0
 246 0162 08D0     		beq	.L14
 247              		.loc 1 170 0 is_stmt 0 discriminator 1
 248 0164 3B68     		ldr	r3, [r7, #0]
 249 0166 1B89     		ldrh	r3, [r3, #8]
 250 0168 012B     		cmp	r3, #1
 251 016a 04D0     		beq	.L14
 252              		.loc 1 170 0 discriminator 2
 253 016c 4748     		ldr	r0, .L19+12
 254 016e 4FF0AA01 		mov	r1, #170
 255 0172 FFF7FEFF 		bl	assert_failed
 256              	.L14:
 171:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 257              		.loc 1 171 0 is_stmt 1
 258 0176 3B68     		ldr	r3, [r7, #0]
 259 0178 5B89     		ldrh	r3, [r3, #10]
 260 017a B3F5007F 		cmp	r3, #512
 261 017e 08D0     		beq	.L15
 262              		.loc 1 171 0 is_stmt 0 discriminator 1
 263 0180 3B68     		ldr	r3, [r7, #0]
 264 0182 5B89     		ldrh	r3, [r3, #10]
 265 0184 002B     		cmp	r3, #0
 266 0186 04D0     		beq	.L15
 267              		.loc 1 171 0 discriminator 2
 268 0188 4048     		ldr	r0, .L19+12
 269 018a 4FF0AB01 		mov	r1, #171
 270 018e FFF7FEFF 		bl	assert_failed
 271              	.L15:
 172:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 272              		.loc 1 172 0 is_stmt 1
 273 0192 3B68     		ldr	r3, [r7, #0]
 274 0194 9B89     		ldrh	r3, [r3, #12]
 275 0196 002B     		cmp	r3, #0
 276 0198 20D0     		beq	.L16
 277              		.loc 1 172 0 is_stmt 0 discriminator 1
 278 019a 3B68     		ldr	r3, [r7, #0]
 279 019c 9B89     		ldrh	r3, [r3, #12]
 280 019e 082B     		cmp	r3, #8
 281 01a0 1CD0     		beq	.L16
 282              		.loc 1 172 0 discriminator 2
 283 01a2 3B68     		ldr	r3, [r7, #0]
 284 01a4 9B89     		ldrh	r3, [r3, #12]
 285 01a6 102B     		cmp	r3, #16
 286 01a8 18D0     		beq	.L16
 287              		.loc 1 172 0 discriminator 3
 288 01aa 3B68     		ldr	r3, [r7, #0]
 289 01ac 9B89     		ldrh	r3, [r3, #12]
 290 01ae 182B     		cmp	r3, #24
 291 01b0 14D0     		beq	.L16
 292              		.loc 1 172 0 discriminator 4
 293 01b2 3B68     		ldr	r3, [r7, #0]
 294 01b4 9B89     		ldrh	r3, [r3, #12]
 295 01b6 202B     		cmp	r3, #32
 296 01b8 10D0     		beq	.L16
 297              		.loc 1 172 0 discriminator 5
 298 01ba 3B68     		ldr	r3, [r7, #0]
 299 01bc 9B89     		ldrh	r3, [r3, #12]
 300 01be 282B     		cmp	r3, #40
 301 01c0 0CD0     		beq	.L16
 302              		.loc 1 172 0 discriminator 6
 303 01c2 3B68     		ldr	r3, [r7, #0]
 304 01c4 9B89     		ldrh	r3, [r3, #12]
 305 01c6 302B     		cmp	r3, #48
 306 01c8 08D0     		beq	.L16
 307              		.loc 1 172 0 discriminator 7
 308 01ca 3B68     		ldr	r3, [r7, #0]
 309 01cc 9B89     		ldrh	r3, [r3, #12]
 310 01ce 382B     		cmp	r3, #56
 311 01d0 04D0     		beq	.L16
 312              		.loc 1 172 0 discriminator 8
 313 01d2 2E48     		ldr	r0, .L19+12
 314 01d4 4FF0AC01 		mov	r1, #172
 315 01d8 FFF7FEFF 		bl	assert_failed
 316              	.L16:
 173:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 317              		.loc 1 173 0 is_stmt 1
 318 01dc 3B68     		ldr	r3, [r7, #0]
 319 01de DB89     		ldrh	r3, [r3, #14]
 320 01e0 002B     		cmp	r3, #0
 321 01e2 08D0     		beq	.L17
 322              		.loc 1 173 0 is_stmt 0 discriminator 1
 323 01e4 3B68     		ldr	r3, [r7, #0]
 324 01e6 DB89     		ldrh	r3, [r3, #14]
 325 01e8 802B     		cmp	r3, #128
 326 01ea 04D0     		beq	.L17
 327              		.loc 1 173 0 discriminator 2
 328 01ec 2748     		ldr	r0, .L19+12
 329 01ee 4FF0AD01 		mov	r1, #173
 330 01f2 FFF7FEFF 		bl	assert_failed
 331              	.L17:
 174:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 332              		.loc 1 174 0 is_stmt 1
 333 01f6 3B68     		ldr	r3, [r7, #0]
 334 01f8 1B8A     		ldrh	r3, [r3, #16]
 335 01fa 002B     		cmp	r3, #0
 336 01fc 04D1     		bne	.L18
 337              		.loc 1 174 0 is_stmt 0 discriminator 1
 338 01fe 2348     		ldr	r0, .L19+12
 339 0200 4FF0AE01 		mov	r1, #174
 340 0204 FFF7FEFF 		bl	assert_failed
 341              	.L18:
 175:../SPL/src/stm32f10x_spi.c **** 
 176:../SPL/src/stm32f10x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 177:../SPL/src/stm32f10x_spi.c ****   /* Get the SPIx CR1 value */
 178:../SPL/src/stm32f10x_spi.c ****   tmpreg = SPIx->CR1;
 342              		.loc 1 178 0 is_stmt 1
 343 0208 7B68     		ldr	r3, [r7, #4]
 344 020a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 345 020c FB81     		strh	r3, [r7, #14]	@ movhi
 179:../SPL/src/stm32f10x_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 180:../SPL/src/stm32f10x_spi.c ****   tmpreg &= CR1_CLEAR_Mask;
 346              		.loc 1 180 0
 347 020e FB89     		ldrh	r3, [r7, #14]	@ movhi
 348 0210 03F44153 		and	r3, r3, #12352
 349 0214 FB81     		strh	r3, [r7, #14]	@ movhi
 181:../SPL/src/stm32f10x_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 182:../SPL/src/stm32f10x_spi.c ****      master/salve mode, CPOL and CPHA */
 183:../SPL/src/stm32f10x_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 184:../SPL/src/stm32f10x_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 185:../SPL/src/stm32f10x_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 186:../SPL/src/stm32f10x_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 187:../SPL/src/stm32f10x_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 188:../SPL/src/stm32f10x_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 350              		.loc 1 189 0
 351 0216 3B68     		ldr	r3, [r7, #0]
 352 0218 1A88     		ldrh	r2, [r3, #0]
 353 021a 3B68     		ldr	r3, [r7, #0]
 354 021c 5B88     		ldrh	r3, [r3, #2]
 355 021e 1343     		orrs	r3, r3, r2
 356 0220 9AB2     		uxth	r2, r3
 190:../SPL/src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 357              		.loc 1 190 0
 358 0222 3B68     		ldr	r3, [r7, #0]
 359 0224 9B88     		ldrh	r3, [r3, #4]
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 360              		.loc 1 189 0
 361 0226 1343     		orrs	r3, r3, r2
 362 0228 9AB2     		uxth	r2, r3
 363              		.loc 1 190 0
 364 022a 3B68     		ldr	r3, [r7, #0]
 365 022c DB88     		ldrh	r3, [r3, #6]
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 366              		.loc 1 189 0
 367 022e 1343     		orrs	r3, r3, r2
 368 0230 9AB2     		uxth	r2, r3
 191:../SPL/src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 369              		.loc 1 191 0
 370 0232 3B68     		ldr	r3, [r7, #0]
 371 0234 1B89     		ldrh	r3, [r3, #8]
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 372              		.loc 1 189 0
 373 0236 1343     		orrs	r3, r3, r2
 374 0238 9AB2     		uxth	r2, r3
 375              		.loc 1 191 0
 376 023a 3B68     		ldr	r3, [r7, #0]
 377 023c 5B89     		ldrh	r3, [r3, #10]
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 378              		.loc 1 189 0
 379 023e 1343     		orrs	r3, r3, r2
 380 0240 9AB2     		uxth	r2, r3
 192:../SPL/src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 381              		.loc 1 192 0
 382 0242 3B68     		ldr	r3, [r7, #0]
 383 0244 9B89     		ldrh	r3, [r3, #12]
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 384              		.loc 1 189 0
 385 0246 1343     		orrs	r3, r3, r2
 386 0248 9AB2     		uxth	r2, r3
 387              		.loc 1 192 0
 388 024a 3B68     		ldr	r3, [r7, #0]
 389 024c DB89     		ldrh	r3, [r3, #14]
 189:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 390              		.loc 1 189 0
 391 024e 1343     		orrs	r3, r3, r2
 392 0250 9AB2     		uxth	r2, r3
 393 0252 FB89     		ldrh	r3, [r7, #14]	@ movhi
 394 0254 1343     		orrs	r3, r3, r2
 395 0256 FB81     		strh	r3, [r7, #14]	@ movhi
 193:../SPL/src/stm32f10x_spi.c ****   /* Write to SPIx CR1 */
 194:../SPL/src/stm32f10x_spi.c ****   SPIx->CR1 = tmpreg;
 396              		.loc 1 194 0
 397 0258 7B68     		ldr	r3, [r7, #4]
 398 025a FA89     		ldrh	r2, [r7, #14]	@ movhi
 399 025c 1A80     		strh	r2, [r3, #0]	@ movhi
 195:../SPL/src/stm32f10x_spi.c ****   
 196:../SPL/src/stm32f10x_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 197:../SPL/src/stm32f10x_spi.c ****   SPIx->I2SCFGR &= SPI_Mode_Select;		
 400              		.loc 1 197 0
 401 025e 7B68     		ldr	r3, [r7, #4]
 402 0260 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 403 0262 9BB2     		uxth	r3, r3
 404 0264 23F40063 		bic	r3, r3, #2048
 405 0268 9AB2     		uxth	r2, r3
 406 026a 7B68     		ldr	r3, [r7, #4]
 407 026c 9A83     		strh	r2, [r3, #28]	@ movhi
 198:../SPL/src/stm32f10x_spi.c **** 
 199:../SPL/src/stm32f10x_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 200:../SPL/src/stm32f10x_spi.c ****   /* Write to SPIx CRCPOLY */
 201:../SPL/src/stm32f10x_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 408              		.loc 1 201 0
 409 026e 3B68     		ldr	r3, [r7, #0]
 410 0270 1A8A     		ldrh	r2, [r3, #16]
 411 0272 7B68     		ldr	r3, [r7, #4]
 412 0274 1A82     		strh	r2, [r3, #16]	@ movhi
 202:../SPL/src/stm32f10x_spi.c **** }
 413              		.loc 1 202 0
 414 0276 07F11007 		add	r7, r7, #16
 415 027a BD46     		mov	sp, r7
 416 027c 80BD     		pop	{r7, pc}
 417              	.L20:
 418 027e 00BF     		.align	2
 419              	.L19:
 420 0280 00300140 		.word	1073819648
 421 0284 00380040 		.word	1073756160
 422 0288 003C0040 		.word	1073757184
 423 028c 00000000 		.word	.LC0
 424              		.cfi_endproc
 425              	.LFE30:
 427              		.align	2
 428              		.global	I2S_Init
 429              		.thumb
 430              		.thumb_func
 432              	I2S_Init:
 433              	.LFB31:
 203:../SPL/src/stm32f10x_spi.c **** 
 204:../SPL/src/stm32f10x_spi.c **** /**
 205:../SPL/src/stm32f10x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 206:../SPL/src/stm32f10x_spi.c ****   *         parameters in the I2S_InitStruct.
 207:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral
 208:../SPL/src/stm32f10x_spi.c ****   *         (configured in I2S mode).
 209:../SPL/src/stm32f10x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 210:../SPL/src/stm32f10x_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 211:../SPL/src/stm32f10x_spi.c ****   *         configured in I2S mode.
 212:../SPL/src/stm32f10x_spi.c ****   * @note
 213:../SPL/src/stm32f10x_spi.c ****   *  The function calculates the optimal prescaler needed to obtain the most 
 214:../SPL/src/stm32f10x_spi.c ****   *  accurate audio frequency (depending on the I2S clock source, the PLL values 
 215:../SPL/src/stm32f10x_spi.c ****   *  and the product configuration). But in case the prescaler value is greater 
 216:../SPL/src/stm32f10x_spi.c ****   *  than 511, the default value (0x02) will be configured instead.  *   
 217:../SPL/src/stm32f10x_spi.c ****   * @retval None
 218:../SPL/src/stm32f10x_spi.c ****   */
 219:../SPL/src/stm32f10x_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 220:../SPL/src/stm32f10x_spi.c **** {
 434              		.loc 1 220 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 48
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438 0290 80B5     		push	{r7, lr}
 439              	.LCFI6:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
 443 0292 8CB0     		sub	sp, sp, #48
 444              	.LCFI7:
 445              		.cfi_def_cfa_offset 56
 446 0294 00AF     		add	r7, sp, #0
 447              	.LCFI8:
 448              		.cfi_def_cfa_register 7
 449 0296 7860     		str	r0, [r7, #4]
 450 0298 3960     		str	r1, [r7, #0]
 221:../SPL/src/stm32f10x_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 451              		.loc 1 221 0
 452 029a 4FF00003 		mov	r3, #0
 453 029e 7B84     		strh	r3, [r7, #34]	@ movhi
 454 02a0 4FF00203 		mov	r3, #2
 455 02a4 FB85     		strh	r3, [r7, #46]	@ movhi
 456 02a6 4FF00003 		mov	r3, #0
 457 02aa BB85     		strh	r3, [r7, #44]	@ movhi
 458 02ac 4FF00103 		mov	r3, #1
 459 02b0 7B85     		strh	r3, [r7, #42]	@ movhi
 222:../SPL/src/stm32f10x_spi.c ****   uint32_t tmp = 0;
 460              		.loc 1 222 0
 461 02b2 4FF00003 		mov	r3, #0
 462 02b6 7B62     		str	r3, [r7, #36]
 223:../SPL/src/stm32f10x_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 224:../SPL/src/stm32f10x_spi.c ****   uint32_t sourceclock = 0;
 463              		.loc 1 224 0
 464 02b8 4FF00003 		mov	r3, #0
 465 02bc FB61     		str	r3, [r7, #28]
 225:../SPL/src/stm32f10x_spi.c ****   
 226:../SPL/src/stm32f10x_spi.c ****   /* Check the I2S parameters */
 227:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 466              		.loc 1 227 0
 467 02be 7A68     		ldr	r2, [r7, #4]
 468 02c0 974B     		ldr	r3, .L40
 469 02c2 9A42     		cmp	r2, r3
 470 02c4 08D0     		beq	.L22
 471              		.loc 1 227 0 is_stmt 0 discriminator 1
 472 02c6 7A68     		ldr	r2, [r7, #4]
 473 02c8 964B     		ldr	r3, .L40+4
 474 02ca 9A42     		cmp	r2, r3
 475 02cc 04D0     		beq	.L22
 476              		.loc 1 227 0 discriminator 2
 477 02ce 9648     		ldr	r0, .L40+8
 478 02d0 4FF0E301 		mov	r1, #227
 479 02d4 FFF7FEFF 		bl	assert_failed
 480              	.L22:
 228:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 481              		.loc 1 228 0 is_stmt 1
 482 02d8 3B68     		ldr	r3, [r7, #0]
 483 02da 1B88     		ldrh	r3, [r3, #0]
 484 02dc 002B     		cmp	r3, #0
 485 02de 13D0     		beq	.L23
 486              		.loc 1 228 0 is_stmt 0 discriminator 1
 487 02e0 3B68     		ldr	r3, [r7, #0]
 488 02e2 1B88     		ldrh	r3, [r3, #0]
 489 02e4 B3F5807F 		cmp	r3, #256
 490 02e8 0ED0     		beq	.L23
 491              		.loc 1 228 0 discriminator 2
 492 02ea 3B68     		ldr	r3, [r7, #0]
 493 02ec 1B88     		ldrh	r3, [r3, #0]
 494 02ee B3F5007F 		cmp	r3, #512
 495 02f2 09D0     		beq	.L23
 496              		.loc 1 228 0 discriminator 3
 497 02f4 3B68     		ldr	r3, [r7, #0]
 498 02f6 1B88     		ldrh	r3, [r3, #0]
 499 02f8 B3F5407F 		cmp	r3, #768
 500 02fc 04D0     		beq	.L23
 501              		.loc 1 228 0 discriminator 4
 502 02fe 8A48     		ldr	r0, .L40+8
 503 0300 4FF0E401 		mov	r1, #228
 504 0304 FFF7FEFF 		bl	assert_failed
 505              	.L23:
 229:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 506              		.loc 1 229 0 is_stmt 1
 507 0308 3B68     		ldr	r3, [r7, #0]
 508 030a 5B88     		ldrh	r3, [r3, #2]
 509 030c 002B     		cmp	r3, #0
 510 030e 14D0     		beq	.L24
 511              		.loc 1 229 0 is_stmt 0 discriminator 1
 512 0310 3B68     		ldr	r3, [r7, #0]
 513 0312 5B88     		ldrh	r3, [r3, #2]
 514 0314 102B     		cmp	r3, #16
 515 0316 10D0     		beq	.L24
 516              		.loc 1 229 0 discriminator 2
 517 0318 3B68     		ldr	r3, [r7, #0]
 518 031a 5B88     		ldrh	r3, [r3, #2]
 519 031c 202B     		cmp	r3, #32
 520 031e 0CD0     		beq	.L24
 521              		.loc 1 229 0 discriminator 3
 522 0320 3B68     		ldr	r3, [r7, #0]
 523 0322 5B88     		ldrh	r3, [r3, #2]
 524 0324 302B     		cmp	r3, #48
 525 0326 08D0     		beq	.L24
 526              		.loc 1 229 0 discriminator 4
 527 0328 3B68     		ldr	r3, [r7, #0]
 528 032a 5B88     		ldrh	r3, [r3, #2]
 529 032c B02B     		cmp	r3, #176
 530 032e 04D0     		beq	.L24
 531              		.loc 1 229 0 discriminator 5
 532 0330 7D48     		ldr	r0, .L40+8
 533 0332 4FF0E501 		mov	r1, #229
 534 0336 FFF7FEFF 		bl	assert_failed
 535              	.L24:
 230:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 536              		.loc 1 230 0 is_stmt 1
 537 033a 3B68     		ldr	r3, [r7, #0]
 538 033c 9B88     		ldrh	r3, [r3, #4]
 539 033e 002B     		cmp	r3, #0
 540 0340 10D0     		beq	.L25
 541              		.loc 1 230 0 is_stmt 0 discriminator 1
 542 0342 3B68     		ldr	r3, [r7, #0]
 543 0344 9B88     		ldrh	r3, [r3, #4]
 544 0346 012B     		cmp	r3, #1
 545 0348 0CD0     		beq	.L25
 546              		.loc 1 230 0 discriminator 2
 547 034a 3B68     		ldr	r3, [r7, #0]
 548 034c 9B88     		ldrh	r3, [r3, #4]
 549 034e 032B     		cmp	r3, #3
 550 0350 08D0     		beq	.L25
 551              		.loc 1 230 0 discriminator 3
 552 0352 3B68     		ldr	r3, [r7, #0]
 553 0354 9B88     		ldrh	r3, [r3, #4]
 554 0356 052B     		cmp	r3, #5
 555 0358 04D0     		beq	.L25
 556              		.loc 1 230 0 discriminator 4
 557 035a 7348     		ldr	r0, .L40+8
 558 035c 4FF0E601 		mov	r1, #230
 559 0360 FFF7FEFF 		bl	assert_failed
 560              	.L25:
 231:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 561              		.loc 1 231 0 is_stmt 1
 562 0364 3B68     		ldr	r3, [r7, #0]
 563 0366 DB88     		ldrh	r3, [r3, #6]
 564 0368 B3F5007F 		cmp	r3, #512
 565 036c 08D0     		beq	.L26
 566              		.loc 1 231 0 is_stmt 0 discriminator 1
 567 036e 3B68     		ldr	r3, [r7, #0]
 568 0370 DB88     		ldrh	r3, [r3, #6]
 569 0372 002B     		cmp	r3, #0
 570 0374 04D0     		beq	.L26
 571              		.loc 1 231 0 discriminator 2
 572 0376 6C48     		ldr	r0, .L40+8
 573 0378 4FF0E701 		mov	r1, #231
 574 037c FFF7FEFF 		bl	assert_failed
 575              	.L26:
 232:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 576              		.loc 1 232 0 is_stmt 1
 577 0380 3B68     		ldr	r3, [r7, #0]
 578 0382 9A68     		ldr	r2, [r3, #8]
 579 0384 41F63F73 		movw	r3, #7999
 580 0388 9A42     		cmp	r2, r3
 581 038a 04D9     		bls	.L27
 582              		.loc 1 232 0 is_stmt 0 discriminator 2
 583 038c 3B68     		ldr	r3, [r7, #0]
 584 038e 9A68     		ldr	r2, [r3, #8]
 585 0390 664B     		ldr	r3, .L40+12
 586 0392 9A42     		cmp	r2, r3
 587 0394 08D9     		bls	.L28
 588              	.L27:
 589              		.loc 1 232 0 discriminator 1
 590 0396 3B68     		ldr	r3, [r7, #0]
 591 0398 9B68     		ldr	r3, [r3, #8]
 592 039a 022B     		cmp	r3, #2
 593 039c 04D0     		beq	.L28
 594              		.loc 1 232 0 discriminator 3
 595 039e 6248     		ldr	r0, .L40+8
 596 03a0 4FF0E801 		mov	r1, #232
 597 03a4 FFF7FEFF 		bl	assert_failed
 598              	.L28:
 233:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 599              		.loc 1 233 0 is_stmt 1
 600 03a8 3B68     		ldr	r3, [r7, #0]
 601 03aa 9B89     		ldrh	r3, [r3, #12]
 602 03ac 002B     		cmp	r3, #0
 603 03ae 08D0     		beq	.L29
 604              		.loc 1 233 0 is_stmt 0 discriminator 1
 605 03b0 3B68     		ldr	r3, [r7, #0]
 606 03b2 9B89     		ldrh	r3, [r3, #12]
 607 03b4 082B     		cmp	r3, #8
 608 03b6 04D0     		beq	.L29
 609              		.loc 1 233 0 discriminator 2
 610 03b8 5B48     		ldr	r0, .L40+8
 611 03ba 4FF0E901 		mov	r1, #233
 612 03be FFF7FEFF 		bl	assert_failed
 613              	.L29:
 234:../SPL/src/stm32f10x_spi.c **** 
 235:../SPL/src/stm32f10x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 236:../SPL/src/stm32f10x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 237:../SPL/src/stm32f10x_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 614              		.loc 1 237 0 is_stmt 1
 615 03c2 7B68     		ldr	r3, [r7, #4]
 616 03c4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 617 03c6 9BB2     		uxth	r3, r3
 618 03c8 23F47B63 		bic	r3, r3, #4016
 619 03cc 23F00F03 		bic	r3, r3, #15
 620 03d0 9AB2     		uxth	r2, r3
 621 03d2 7B68     		ldr	r3, [r7, #4]
 622 03d4 9A83     		strh	r2, [r3, #28]	@ movhi
 238:../SPL/src/stm32f10x_spi.c ****   SPIx->I2SPR = 0x0002;
 623              		.loc 1 238 0
 624 03d6 7B68     		ldr	r3, [r7, #4]
 625 03d8 4FF00202 		mov	r2, #2
 626 03dc 1A84     		strh	r2, [r3, #32]	@ movhi
 239:../SPL/src/stm32f10x_spi.c ****   
 240:../SPL/src/stm32f10x_spi.c ****   /* Get the I2SCFGR register value */
 241:../SPL/src/stm32f10x_spi.c ****   tmpreg = SPIx->I2SCFGR;
 627              		.loc 1 241 0
 628 03de 7B68     		ldr	r3, [r7, #4]
 629 03e0 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 630 03e2 7B84     		strh	r3, [r7, #34]	@ movhi
 242:../SPL/src/stm32f10x_spi.c ****   
 243:../SPL/src/stm32f10x_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 244:../SPL/src/stm32f10x_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 631              		.loc 1 244 0
 632 03e4 3B68     		ldr	r3, [r7, #0]
 633 03e6 9B68     		ldr	r3, [r3, #8]
 634 03e8 022B     		cmp	r3, #2
 635 03ea 06D1     		bne	.L30
 245:../SPL/src/stm32f10x_spi.c ****   {
 246:../SPL/src/stm32f10x_spi.c ****     i2sodd = (uint16_t)0;
 636              		.loc 1 246 0
 637 03ec 4FF00003 		mov	r3, #0
 638 03f0 BB85     		strh	r3, [r7, #44]	@ movhi
 247:../SPL/src/stm32f10x_spi.c ****     i2sdiv = (uint16_t)2;   
 639              		.loc 1 247 0
 640 03f2 4FF00203 		mov	r3, #2
 641 03f6 FB85     		strh	r3, [r7, #46]	@ movhi
 642 03f8 61E0     		b	.L31
 643              	.L30:
 248:../SPL/src/stm32f10x_spi.c ****   }
 249:../SPL/src/stm32f10x_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 250:../SPL/src/stm32f10x_spi.c ****   else
 251:../SPL/src/stm32f10x_spi.c ****   {
 252:../SPL/src/stm32f10x_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 253:../SPL/src/stm32f10x_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 644              		.loc 1 253 0
 645 03fa 3B68     		ldr	r3, [r7, #0]
 646 03fc 9B88     		ldrh	r3, [r3, #4]
 647 03fe 002B     		cmp	r3, #0
 648 0400 03D1     		bne	.L32
 254:../SPL/src/stm32f10x_spi.c ****     {
 255:../SPL/src/stm32f10x_spi.c ****       /* Packet length is 16 bits */
 256:../SPL/src/stm32f10x_spi.c ****       packetlength = 1;
 649              		.loc 1 256 0
 650 0402 4FF00103 		mov	r3, #1
 651 0406 7B85     		strh	r3, [r7, #42]	@ movhi
 652 0408 02E0     		b	.L33
 653              	.L32:
 257:../SPL/src/stm32f10x_spi.c ****     }
 258:../SPL/src/stm32f10x_spi.c ****     else
 259:../SPL/src/stm32f10x_spi.c ****     {
 260:../SPL/src/stm32f10x_spi.c ****       /* Packet length is 32 bits */
 261:../SPL/src/stm32f10x_spi.c ****       packetlength = 2;
 654              		.loc 1 261 0
 655 040a 4FF00203 		mov	r3, #2
 656 040e 7B85     		strh	r3, [r7, #42]	@ movhi
 657              	.L33:
 262:../SPL/src/stm32f10x_spi.c ****     }
 263:../SPL/src/stm32f10x_spi.c **** 
 264:../SPL/src/stm32f10x_spi.c ****     /* Get the I2S clock source mask depending on the peripheral number */
 265:../SPL/src/stm32f10x_spi.c ****     if(((uint32_t)SPIx) == SPI2_BASE)
 658              		.loc 1 265 0
 659 0410 7A68     		ldr	r2, [r7, #4]
 660 0412 434B     		ldr	r3, .L40
 661 0414 9A42     		cmp	r2, r3
 662 0416 03D1     		bne	.L34
 266:../SPL/src/stm32f10x_spi.c ****     {
 267:../SPL/src/stm32f10x_spi.c ****       /* The mask is relative to I2S2 */
 268:../SPL/src/stm32f10x_spi.c ****       tmp = I2S2_CLOCK_SRC;
 663              		.loc 1 268 0
 664 0418 4FF40033 		mov	r3, #131072
 665 041c 7B62     		str	r3, [r7, #36]
 666 041e 02E0     		b	.L35
 667              	.L34:
 269:../SPL/src/stm32f10x_spi.c ****     }
 270:../SPL/src/stm32f10x_spi.c ****     else 
 271:../SPL/src/stm32f10x_spi.c ****     {
 272:../SPL/src/stm32f10x_spi.c ****       /* The mask is relative to I2S3 */      
 273:../SPL/src/stm32f10x_spi.c ****       tmp = I2S3_CLOCK_SRC;
 668              		.loc 1 273 0
 669 0420 4FF48023 		mov	r3, #262144
 670 0424 7B62     		str	r3, [r7, #36]
 671              	.L35:
 274:../SPL/src/stm32f10x_spi.c ****     }
 275:../SPL/src/stm32f10x_spi.c **** 
 276:../SPL/src/stm32f10x_spi.c ****     /* Check the I2S clock source configuration depending on the Device:
 277:../SPL/src/stm32f10x_spi.c ****        Only Connectivity line devices have the PLL3 VCO clock */
 278:../SPL/src/stm32f10x_spi.c **** #ifdef STM32F10X_CL
 279:../SPL/src/stm32f10x_spi.c ****     if((RCC->CFGR2 & tmp) != 0)
 280:../SPL/src/stm32f10x_spi.c ****     {
 281:../SPL/src/stm32f10x_spi.c ****       /* Get the configuration bits of RCC PLL3 multiplier */
 282:../SPL/src/stm32f10x_spi.c ****       tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
 283:../SPL/src/stm32f10x_spi.c **** 
 284:../SPL/src/stm32f10x_spi.c ****       /* Get the value of the PLL3 multiplier */      
 285:../SPL/src/stm32f10x_spi.c ****       if((tmp > 5) && (tmp < 15))
 286:../SPL/src/stm32f10x_spi.c ****       {
 287:../SPL/src/stm32f10x_spi.c ****         /* Multiplier is between 8 and 14 (value 15 is forbidden) */
 288:../SPL/src/stm32f10x_spi.c ****         tmp += 2;
 289:../SPL/src/stm32f10x_spi.c ****       }
 290:../SPL/src/stm32f10x_spi.c ****       else
 291:../SPL/src/stm32f10x_spi.c ****       {
 292:../SPL/src/stm32f10x_spi.c ****         if (tmp == 15)
 293:../SPL/src/stm32f10x_spi.c ****         {
 294:../SPL/src/stm32f10x_spi.c ****           /* Multiplier is 20 */
 295:../SPL/src/stm32f10x_spi.c ****           tmp = 20;
 296:../SPL/src/stm32f10x_spi.c ****         }
 297:../SPL/src/stm32f10x_spi.c ****       }      
 298:../SPL/src/stm32f10x_spi.c ****       /* Get the PREDIV2 value */
 299:../SPL/src/stm32f10x_spi.c ****       sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
 300:../SPL/src/stm32f10x_spi.c ****       
 301:../SPL/src/stm32f10x_spi.c ****       /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
 302:../SPL/src/stm32f10x_spi.c ****       sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
 303:../SPL/src/stm32f10x_spi.c ****     }
 304:../SPL/src/stm32f10x_spi.c ****     else
 305:../SPL/src/stm32f10x_spi.c ****     {
 306:../SPL/src/stm32f10x_spi.c ****       /* I2S Clock source is System clock: Get System Clock frequency */
 307:../SPL/src/stm32f10x_spi.c ****       RCC_GetClocksFreq(&RCC_Clocks);      
 308:../SPL/src/stm32f10x_spi.c ****       
 309:../SPL/src/stm32f10x_spi.c ****       /* Get the source clock value: based on System Clock value */
 310:../SPL/src/stm32f10x_spi.c ****       sourceclock = RCC_Clocks.SYSCLK_Frequency;
 311:../SPL/src/stm32f10x_spi.c ****     }        
 312:../SPL/src/stm32f10x_spi.c **** #else /* STM32F10X_HD */
 313:../SPL/src/stm32f10x_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 314:../SPL/src/stm32f10x_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 672              		.loc 1 314 0
 673 0426 07F10803 		add	r3, r7, #8
 674 042a 1846     		mov	r0, r3
 675 042c FFF7FEFF 		bl	RCC_GetClocksFreq
 315:../SPL/src/stm32f10x_spi.c ****       
 316:../SPL/src/stm32f10x_spi.c ****     /* Get the source clock value: based on System Clock value */
 317:../SPL/src/stm32f10x_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 676              		.loc 1 317 0
 677 0430 BB68     		ldr	r3, [r7, #8]
 678 0432 FB61     		str	r3, [r7, #28]
 318:../SPL/src/stm32f10x_spi.c **** #endif /* STM32F10X_CL */    
 319:../SPL/src/stm32f10x_spi.c **** 
 320:../SPL/src/stm32f10x_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a floating point */
 321:../SPL/src/stm32f10x_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 679              		.loc 1 321 0
 680 0434 3B68     		ldr	r3, [r7, #0]
 681 0436 DB88     		ldrh	r3, [r3, #6]
 682 0438 B3F5007F 		cmp	r3, #512
 683 043c 13D1     		bne	.L36
 322:../SPL/src/stm32f10x_spi.c ****     {
 323:../SPL/src/stm32f10x_spi.c ****       /* MCLK output is enabled */
 324:../SPL/src/stm32f10x_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 684              		.loc 1 324 0
 685 043e FB69     		ldr	r3, [r7, #28]
 686 0440 4FEA1322 		lsr	r2, r3, #8
 687 0444 1346     		mov	r3, r2
 688 0446 4FEA8303 		lsl	r3, r3, #2
 689 044a 9B18     		adds	r3, r3, r2
 690 044c 4FEA4303 		lsl	r3, r3, #1
 691 0450 1A46     		mov	r2, r3
 692 0452 3B68     		ldr	r3, [r7, #0]
 693 0454 9B68     		ldr	r3, [r3, #8]
 694 0456 B2FBF3F3 		udiv	r3, r2, r3
 695 045a 9BB2     		uxth	r3, r3
 696 045c 03F10503 		add	r3, r3, #5
 697 0460 9BB2     		uxth	r3, r3
 698 0462 7B62     		str	r3, [r7, #36]
 699 0464 15E0     		b	.L37
 700              	.L36:
 325:../SPL/src/stm32f10x_spi.c ****     }
 326:../SPL/src/stm32f10x_spi.c ****     else
 327:../SPL/src/stm32f10x_spi.c ****     {
 328:../SPL/src/stm32f10x_spi.c ****       /* MCLK output is disabled */
 329:../SPL/src/stm32f10x_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 701              		.loc 1 329 0
 702 0466 7B8D     		ldrh	r3, [r7, #42]
 703 0468 4FEA4313 		lsl	r3, r3, #5
 704 046c FA69     		ldr	r2, [r7, #28]
 705 046e B2FBF3F2 		udiv	r2, r2, r3
 706 0472 1346     		mov	r3, r2
 707 0474 4FEA8303 		lsl	r3, r3, #2
 708 0478 9B18     		adds	r3, r3, r2
 709 047a 4FEA4303 		lsl	r3, r3, #1
 710 047e 1A46     		mov	r2, r3
 711 0480 3B68     		ldr	r3, [r7, #0]
 712 0482 9B68     		ldr	r3, [r3, #8]
 713 0484 B2FBF3F3 		udiv	r3, r2, r3
 714 0488 9BB2     		uxth	r3, r3
 715 048a 03F10503 		add	r3, r3, #5
 716 048e 9BB2     		uxth	r3, r3
 717 0490 7B62     		str	r3, [r7, #36]
 718              	.L37:
 330:../SPL/src/stm32f10x_spi.c ****     }
 331:../SPL/src/stm32f10x_spi.c ****     
 332:../SPL/src/stm32f10x_spi.c ****     /* Remove the floating point */
 333:../SPL/src/stm32f10x_spi.c ****     tmp = tmp / 10;  
 719              		.loc 1 333 0
 720 0492 7A6A     		ldr	r2, [r7, #36]
 721 0494 264B     		ldr	r3, .L40+16
 722 0496 A3FB0213 		umull	r1, r3, r3, r2
 723 049a 4FEAD303 		lsr	r3, r3, #3
 724 049e 7B62     		str	r3, [r7, #36]
 334:../SPL/src/stm32f10x_spi.c ****       
 335:../SPL/src/stm32f10x_spi.c ****     /* Check the parity of the divider */
 336:../SPL/src/stm32f10x_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 725              		.loc 1 336 0
 726 04a0 7B6A     		ldr	r3, [r7, #36]
 727 04a2 9BB2     		uxth	r3, r3
 728 04a4 03F00103 		and	r3, r3, #1
 729 04a8 BB85     		strh	r3, [r7, #44]	@ movhi
 337:../SPL/src/stm32f10x_spi.c ****    
 338:../SPL/src/stm32f10x_spi.c ****     /* Compute the i2sdiv prescaler */
 339:../SPL/src/stm32f10x_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 730              		.loc 1 339 0
 731 04aa BB8D     		ldrh	r3, [r7, #44]
 732 04ac 7A6A     		ldr	r2, [r7, #36]
 733 04ae D31A     		subs	r3, r2, r3
 734 04b0 4FEA5303 		lsr	r3, r3, #1
 735 04b4 FB85     		strh	r3, [r7, #46]	@ movhi
 340:../SPL/src/stm32f10x_spi.c ****    
 341:../SPL/src/stm32f10x_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 342:../SPL/src/stm32f10x_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 736              		.loc 1 342 0
 737 04b6 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 738 04b8 4FEA0323 		lsl	r3, r3, #8
 739 04bc BB85     		strh	r3, [r7, #44]	@ movhi
 740              	.L31:
 343:../SPL/src/stm32f10x_spi.c ****   }
 344:../SPL/src/stm32f10x_spi.c ****   
 345:../SPL/src/stm32f10x_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 346:../SPL/src/stm32f10x_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 741              		.loc 1 346 0
 742 04be FB8D     		ldrh	r3, [r7, #46]
 743 04c0 012B     		cmp	r3, #1
 744 04c2 02D9     		bls	.L38
 745              		.loc 1 346 0 is_stmt 0 discriminator 1
 746 04c4 FB8D     		ldrh	r3, [r7, #46]
 747 04c6 FF2B     		cmp	r3, #255
 748 04c8 05D9     		bls	.L39
 749              	.L38:
 347:../SPL/src/stm32f10x_spi.c ****   {
 348:../SPL/src/stm32f10x_spi.c ****     /* Set the default values */
 349:../SPL/src/stm32f10x_spi.c ****     i2sdiv = 2;
 750              		.loc 1 349 0 is_stmt 1
 751 04ca 4FF00203 		mov	r3, #2
 752 04ce FB85     		strh	r3, [r7, #46]	@ movhi
 350:../SPL/src/stm32f10x_spi.c ****     i2sodd = 0;
 753              		.loc 1 350 0
 754 04d0 4FF00003 		mov	r3, #0
 755 04d4 BB85     		strh	r3, [r7, #44]	@ movhi
 756              	.L39:
 351:../SPL/src/stm32f10x_spi.c ****   }
 352:../SPL/src/stm32f10x_spi.c **** 
 353:../SPL/src/stm32f10x_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 354:../SPL/src/stm32f10x_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 757              		.loc 1 354 0
 758 04d6 3B68     		ldr	r3, [r7, #0]
 759 04d8 DA88     		ldrh	r2, [r3, #6]
 760 04da BB8D     		ldrh	r3, [r7, #44]	@ movhi
 761 04dc 1343     		orrs	r3, r3, r2
 762 04de 9AB2     		uxth	r2, r3
 763 04e0 FB8D     		ldrh	r3, [r7, #46]	@ movhi
 764 04e2 1343     		orrs	r3, r3, r2
 765 04e4 9AB2     		uxth	r2, r3
 766 04e6 7B68     		ldr	r3, [r7, #4]
 767 04e8 1A84     		strh	r2, [r3, #32]	@ movhi
 355:../SPL/src/stm32f10x_spi.c ****  
 356:../SPL/src/stm32f10x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 357:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 768              		.loc 1 357 0
 769 04ea 3B68     		ldr	r3, [r7, #0]
 770 04ec 1A88     		ldrh	r2, [r3, #0]
 358:../SPL/src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 771              		.loc 1 358 0
 772 04ee 3B68     		ldr	r3, [r7, #0]
 773 04f0 5988     		ldrh	r1, [r3, #2]
 774 04f2 3B68     		ldr	r3, [r7, #0]
 775 04f4 9888     		ldrh	r0, [r3, #4]
 359:../SPL/src/stm32f10x_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 776              		.loc 1 359 0
 777 04f6 3B68     		ldr	r3, [r7, #0]
 778 04f8 9B89     		ldrh	r3, [r3, #12]
 358:../SPL/src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 779              		.loc 1 358 0
 780 04fa 0343     		orrs	r3, r3, r0
 781 04fc 9BB2     		uxth	r3, r3
 782 04fe 0B43     		orrs	r3, r3, r1
 783 0500 9BB2     		uxth	r3, r3
 357:../SPL/src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 784              		.loc 1 357 0
 785 0502 1343     		orrs	r3, r3, r2
 786 0504 9AB2     		uxth	r2, r3
 787 0506 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 788 0508 1343     		orrs	r3, r3, r2
 789 050a 9BB2     		uxth	r3, r3
 790 050c 43F40063 		orr	r3, r3, #2048
 791 0510 7B84     		strh	r3, [r7, #34]	@ movhi
 360:../SPL/src/stm32f10x_spi.c ****  
 361:../SPL/src/stm32f10x_spi.c ****   /* Write to SPIx I2SCFGR */  
 362:../SPL/src/stm32f10x_spi.c ****   SPIx->I2SCFGR = tmpreg;   
 792              		.loc 1 362 0
 793 0512 7B68     		ldr	r3, [r7, #4]
 794 0514 7A8C     		ldrh	r2, [r7, #34]	@ movhi
 795 0516 9A83     		strh	r2, [r3, #28]	@ movhi
 363:../SPL/src/stm32f10x_spi.c **** }
 796              		.loc 1 363 0
 797 0518 07F13007 		add	r7, r7, #48
 798 051c BD46     		mov	sp, r7
 799 051e 80BD     		pop	{r7, pc}
 800              	.L41:
 801              		.align	2
 802              	.L40:
 803 0520 00380040 		.word	1073756160
 804 0524 003C0040 		.word	1073757184
 805 0528 00000000 		.word	.LC0
 806 052c 00EE0200 		.word	192000
 807 0530 CDCCCCCC 		.word	-858993459
 808              		.cfi_endproc
 809              	.LFE31:
 811              		.align	2
 812              		.global	SPI_StructInit
 813              		.thumb
 814              		.thumb_func
 816              	SPI_StructInit:
 817              	.LFB32:
 364:../SPL/src/stm32f10x_spi.c **** 
 365:../SPL/src/stm32f10x_spi.c **** /**
 366:../SPL/src/stm32f10x_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 367:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
 368:../SPL/src/stm32f10x_spi.c ****   * @retval None
 369:../SPL/src/stm32f10x_spi.c ****   */
 370:../SPL/src/stm32f10x_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 371:../SPL/src/stm32f10x_spi.c **** {
 818              		.loc 1 371 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 8
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 0534 80B4     		push	{r7}
 824              	.LCFI9:
 825              		.cfi_def_cfa_offset 4
 826              		.cfi_offset 7, -4
 827 0536 83B0     		sub	sp, sp, #12
 828              	.LCFI10:
 829              		.cfi_def_cfa_offset 16
 830 0538 00AF     		add	r7, sp, #0
 831              	.LCFI11:
 832              		.cfi_def_cfa_register 7
 833 053a 7860     		str	r0, [r7, #4]
 372:../SPL/src/stm32f10x_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 373:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_Direction member */
 374:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 834              		.loc 1 374 0
 835 053c 7B68     		ldr	r3, [r7, #4]
 836 053e 4FF00002 		mov	r2, #0
 837 0542 1A80     		strh	r2, [r3, #0]	@ movhi
 375:../SPL/src/stm32f10x_spi.c ****   /* initialize the SPI_Mode member */
 376:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 838              		.loc 1 376 0
 839 0544 7B68     		ldr	r3, [r7, #4]
 840 0546 4FF00002 		mov	r2, #0
 841 054a 5A80     		strh	r2, [r3, #2]	@ movhi
 377:../SPL/src/stm32f10x_spi.c ****   /* initialize the SPI_DataSize member */
 378:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 842              		.loc 1 378 0
 843 054c 7B68     		ldr	r3, [r7, #4]
 844 054e 4FF00002 		mov	r2, #0
 845 0552 9A80     		strh	r2, [r3, #4]	@ movhi
 379:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_CPOL member */
 380:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 846              		.loc 1 380 0
 847 0554 7B68     		ldr	r3, [r7, #4]
 848 0556 4FF00002 		mov	r2, #0
 849 055a DA80     		strh	r2, [r3, #6]	@ movhi
 381:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_CPHA member */
 382:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 850              		.loc 1 382 0
 851 055c 7B68     		ldr	r3, [r7, #4]
 852 055e 4FF00002 		mov	r2, #0
 853 0562 1A81     		strh	r2, [r3, #8]	@ movhi
 383:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_NSS member */
 384:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 854              		.loc 1 384 0
 855 0564 7B68     		ldr	r3, [r7, #4]
 856 0566 4FF00002 		mov	r2, #0
 857 056a 5A81     		strh	r2, [r3, #10]	@ movhi
 385:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 386:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 858              		.loc 1 386 0
 859 056c 7B68     		ldr	r3, [r7, #4]
 860 056e 4FF00002 		mov	r2, #0
 861 0572 9A81     		strh	r2, [r3, #12]	@ movhi
 387:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_FirstBit member */
 388:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 862              		.loc 1 388 0
 863 0574 7B68     		ldr	r3, [r7, #4]
 864 0576 4FF00002 		mov	r2, #0
 865 057a DA81     		strh	r2, [r3, #14]	@ movhi
 389:../SPL/src/stm32f10x_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 390:../SPL/src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 866              		.loc 1 390 0
 867 057c 7B68     		ldr	r3, [r7, #4]
 868 057e 4FF00702 		mov	r2, #7
 869 0582 1A82     		strh	r2, [r3, #16]	@ movhi
 391:../SPL/src/stm32f10x_spi.c **** }
 870              		.loc 1 391 0
 871 0584 07F10C07 		add	r7, r7, #12
 872 0588 BD46     		mov	sp, r7
 873 058a 80BC     		pop	{r7}
 874 058c 7047     		bx	lr
 875              		.cfi_endproc
 876              	.LFE32:
 878 058e 00BF     		.align	2
 879              		.global	I2S_StructInit
 880              		.thumb
 881              		.thumb_func
 883              	I2S_StructInit:
 884              	.LFB33:
 392:../SPL/src/stm32f10x_spi.c **** 
 393:../SPL/src/stm32f10x_spi.c **** /**
 394:../SPL/src/stm32f10x_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 395:../SPL/src/stm32f10x_spi.c ****   * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
 396:../SPL/src/stm32f10x_spi.c ****   * @retval None
 397:../SPL/src/stm32f10x_spi.c ****   */
 398:../SPL/src/stm32f10x_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 399:../SPL/src/stm32f10x_spi.c **** {
 885              		.loc 1 399 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 8
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889              		@ link register save eliminated.
 890 0590 80B4     		push	{r7}
 891              	.LCFI12:
 892              		.cfi_def_cfa_offset 4
 893              		.cfi_offset 7, -4
 894 0592 83B0     		sub	sp, sp, #12
 895              	.LCFI13:
 896              		.cfi_def_cfa_offset 16
 897 0594 00AF     		add	r7, sp, #0
 898              	.LCFI14:
 899              		.cfi_def_cfa_register 7
 900 0596 7860     		str	r0, [r7, #4]
 400:../SPL/src/stm32f10x_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 401:../SPL/src/stm32f10x_spi.c ****   /* Initialize the I2S_Mode member */
 402:../SPL/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 901              		.loc 1 402 0
 902 0598 7B68     		ldr	r3, [r7, #4]
 903 059a 4FF00002 		mov	r2, #0
 904 059e 1A80     		strh	r2, [r3, #0]	@ movhi
 403:../SPL/src/stm32f10x_spi.c ****   
 404:../SPL/src/stm32f10x_spi.c ****   /* Initialize the I2S_Standard member */
 405:../SPL/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 905              		.loc 1 405 0
 906 05a0 7B68     		ldr	r3, [r7, #4]
 907 05a2 4FF00002 		mov	r2, #0
 908 05a6 5A80     		strh	r2, [r3, #2]	@ movhi
 406:../SPL/src/stm32f10x_spi.c ****   
 407:../SPL/src/stm32f10x_spi.c ****   /* Initialize the I2S_DataFormat member */
 408:../SPL/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 909              		.loc 1 408 0
 910 05a8 7B68     		ldr	r3, [r7, #4]
 911 05aa 4FF00002 		mov	r2, #0
 912 05ae 9A80     		strh	r2, [r3, #4]	@ movhi
 409:../SPL/src/stm32f10x_spi.c ****   
 410:../SPL/src/stm32f10x_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 411:../SPL/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 913              		.loc 1 411 0
 914 05b0 7B68     		ldr	r3, [r7, #4]
 915 05b2 4FF00002 		mov	r2, #0
 916 05b6 DA80     		strh	r2, [r3, #6]	@ movhi
 412:../SPL/src/stm32f10x_spi.c ****   
 413:../SPL/src/stm32f10x_spi.c ****   /* Initialize the I2S_AudioFreq member */
 414:../SPL/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 917              		.loc 1 414 0
 918 05b8 7B68     		ldr	r3, [r7, #4]
 919 05ba 4FF00202 		mov	r2, #2
 920 05be 9A60     		str	r2, [r3, #8]
 415:../SPL/src/stm32f10x_spi.c ****   
 416:../SPL/src/stm32f10x_spi.c ****   /* Initialize the I2S_CPOL member */
 417:../SPL/src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 921              		.loc 1 417 0
 922 05c0 7B68     		ldr	r3, [r7, #4]
 923 05c2 4FF00002 		mov	r2, #0
 924 05c6 9A81     		strh	r2, [r3, #12]	@ movhi
 418:../SPL/src/stm32f10x_spi.c **** }
 925              		.loc 1 418 0
 926 05c8 07F10C07 		add	r7, r7, #12
 927 05cc BD46     		mov	sp, r7
 928 05ce 80BC     		pop	{r7}
 929 05d0 7047     		bx	lr
 930              		.cfi_endproc
 931              	.LFE33:
 933 05d2 00BF     		.align	2
 934              		.global	SPI_Cmd
 935              		.thumb
 936              		.thumb_func
 938              	SPI_Cmd:
 939              	.LFB34:
 419:../SPL/src/stm32f10x_spi.c **** 
 420:../SPL/src/stm32f10x_spi.c **** /**
 421:../SPL/src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 422:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 423:../SPL/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 424:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 425:../SPL/src/stm32f10x_spi.c ****   * @retval None
 426:../SPL/src/stm32f10x_spi.c ****   */
 427:../SPL/src/stm32f10x_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 428:../SPL/src/stm32f10x_spi.c **** {
 940              		.loc 1 428 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 8
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944 05d4 80B5     		push	{r7, lr}
 945              	.LCFI15:
 946              		.cfi_def_cfa_offset 8
 947              		.cfi_offset 7, -8
 948              		.cfi_offset 14, -4
 949 05d6 82B0     		sub	sp, sp, #8
 950              	.LCFI16:
 951              		.cfi_def_cfa_offset 16
 952 05d8 00AF     		add	r7, sp, #0
 953              	.LCFI17:
 954              		.cfi_def_cfa_register 7
 955 05da 7860     		str	r0, [r7, #4]
 956 05dc 0B46     		mov	r3, r1
 957 05de FB70     		strb	r3, [r7, #3]
 429:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 430:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 958              		.loc 1 430 0
 959 05e0 7A68     		ldr	r2, [r7, #4]
 960 05e2 194B     		ldr	r3, .L49
 961 05e4 9A42     		cmp	r2, r3
 962 05e6 0CD0     		beq	.L45
 963              		.loc 1 430 0 is_stmt 0 discriminator 1
 964 05e8 7A68     		ldr	r2, [r7, #4]
 965 05ea 184B     		ldr	r3, .L49+4
 966 05ec 9A42     		cmp	r2, r3
 967 05ee 08D0     		beq	.L45
 968              		.loc 1 430 0 discriminator 2
 969 05f0 7A68     		ldr	r2, [r7, #4]
 970 05f2 174B     		ldr	r3, .L49+8
 971 05f4 9A42     		cmp	r2, r3
 972 05f6 04D0     		beq	.L45
 973              		.loc 1 430 0 discriminator 3
 974 05f8 1648     		ldr	r0, .L49+12
 975 05fa 4FF4D771 		mov	r1, #430
 976 05fe FFF7FEFF 		bl	assert_failed
 977              	.L45:
 431:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 978              		.loc 1 431 0 is_stmt 1
 979 0602 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 980 0604 002B     		cmp	r3, #0
 981 0606 07D0     		beq	.L46
 982              		.loc 1 431 0 is_stmt 0 discriminator 1
 983 0608 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 984 060a 012B     		cmp	r3, #1
 985 060c 04D0     		beq	.L46
 986              		.loc 1 431 0 discriminator 2
 987 060e 1148     		ldr	r0, .L49+12
 988 0610 40F2AF11 		movw	r1, #431
 989 0614 FFF7FEFF 		bl	assert_failed
 990              	.L46:
 432:../SPL/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 991              		.loc 1 432 0 is_stmt 1
 992 0618 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 993 061a 002B     		cmp	r3, #0
 994 061c 08D0     		beq	.L47
 433:../SPL/src/stm32f10x_spi.c ****   {
 434:../SPL/src/stm32f10x_spi.c ****     /* Enable the selected SPI peripheral */
 435:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 |= CR1_SPE_Set;
 995              		.loc 1 435 0
 996 061e 7B68     		ldr	r3, [r7, #4]
 997 0620 1B88     		ldrh	r3, [r3, #0]	@ movhi
 998 0622 9BB2     		uxth	r3, r3
 999 0624 43F04003 		orr	r3, r3, #64
 1000 0628 9AB2     		uxth	r2, r3
 1001 062a 7B68     		ldr	r3, [r7, #4]
 1002 062c 1A80     		strh	r2, [r3, #0]	@ movhi
 1003 062e 07E0     		b	.L44
 1004              	.L47:
 436:../SPL/src/stm32f10x_spi.c ****   }
 437:../SPL/src/stm32f10x_spi.c ****   else
 438:../SPL/src/stm32f10x_spi.c ****   {
 439:../SPL/src/stm32f10x_spi.c ****     /* Disable the selected SPI peripheral */
 440:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 &= CR1_SPE_Reset;
 1005              		.loc 1 440 0
 1006 0630 7B68     		ldr	r3, [r7, #4]
 1007 0632 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1008 0634 9BB2     		uxth	r3, r3
 1009 0636 23F04003 		bic	r3, r3, #64
 1010 063a 9AB2     		uxth	r2, r3
 1011 063c 7B68     		ldr	r3, [r7, #4]
 1012 063e 1A80     		strh	r2, [r3, #0]	@ movhi
 1013              	.L44:
 441:../SPL/src/stm32f10x_spi.c ****   }
 442:../SPL/src/stm32f10x_spi.c **** }
 1014              		.loc 1 442 0
 1015 0640 07F10807 		add	r7, r7, #8
 1016 0644 BD46     		mov	sp, r7
 1017 0646 80BD     		pop	{r7, pc}
 1018              	.L50:
 1019              		.align	2
 1020              	.L49:
 1021 0648 00300140 		.word	1073819648
 1022 064c 00380040 		.word	1073756160
 1023 0650 003C0040 		.word	1073757184
 1024 0654 00000000 		.word	.LC0
 1025              		.cfi_endproc
 1026              	.LFE34:
 1028              		.align	2
 1029              		.global	I2S_Cmd
 1030              		.thumb
 1031              		.thumb_func
 1033              	I2S_Cmd:
 1034              	.LFB35:
 443:../SPL/src/stm32f10x_spi.c **** 
 444:../SPL/src/stm32f10x_spi.c **** /**
 445:../SPL/src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 446:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral.
 447:../SPL/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 448:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 449:../SPL/src/stm32f10x_spi.c ****   * @retval None
 450:../SPL/src/stm32f10x_spi.c ****   */
 451:../SPL/src/stm32f10x_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 452:../SPL/src/stm32f10x_spi.c **** {
 1035              		.loc 1 452 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039 0658 80B5     		push	{r7, lr}
 1040              	.LCFI18:
 1041              		.cfi_def_cfa_offset 8
 1042              		.cfi_offset 7, -8
 1043              		.cfi_offset 14, -4
 1044 065a 82B0     		sub	sp, sp, #8
 1045              	.LCFI19:
 1046              		.cfi_def_cfa_offset 16
 1047 065c 00AF     		add	r7, sp, #0
 1048              	.LCFI20:
 1049              		.cfi_def_cfa_register 7
 1050 065e 7860     		str	r0, [r7, #4]
 1051 0660 0B46     		mov	r3, r1
 1052 0662 FB70     		strb	r3, [r7, #3]
 453:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 454:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 1053              		.loc 1 454 0
 1054 0664 7A68     		ldr	r2, [r7, #4]
 1055 0666 174B     		ldr	r3, .L56
 1056 0668 9A42     		cmp	r2, r3
 1057 066a 08D0     		beq	.L52
 1058              		.loc 1 454 0 is_stmt 0 discriminator 1
 1059 066c 7A68     		ldr	r2, [r7, #4]
 1060 066e 164B     		ldr	r3, .L56+4
 1061 0670 9A42     		cmp	r2, r3
 1062 0672 04D0     		beq	.L52
 1063              		.loc 1 454 0 discriminator 2
 1064 0674 1548     		ldr	r0, .L56+8
 1065 0676 4FF4E371 		mov	r1, #454
 1066 067a FFF7FEFF 		bl	assert_failed
 1067              	.L52:
 455:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1068              		.loc 1 455 0 is_stmt 1
 1069 067e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1070 0680 002B     		cmp	r3, #0
 1071 0682 07D0     		beq	.L53
 1072              		.loc 1 455 0 is_stmt 0 discriminator 1
 1073 0684 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1074 0686 012B     		cmp	r3, #1
 1075 0688 04D0     		beq	.L53
 1076              		.loc 1 455 0 discriminator 2
 1077 068a 1048     		ldr	r0, .L56+8
 1078 068c 40F2C711 		movw	r1, #455
 1079 0690 FFF7FEFF 		bl	assert_failed
 1080              	.L53:
 456:../SPL/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1081              		.loc 1 456 0 is_stmt 1
 1082 0694 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1083 0696 002B     		cmp	r3, #0
 1084 0698 08D0     		beq	.L54
 457:../SPL/src/stm32f10x_spi.c ****   {
 458:../SPL/src/stm32f10x_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 459:../SPL/src/stm32f10x_spi.c ****     SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 1085              		.loc 1 459 0
 1086 069a 7B68     		ldr	r3, [r7, #4]
 1087 069c 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1088 069e 9BB2     		uxth	r3, r3
 1089 06a0 43F48063 		orr	r3, r3, #1024
 1090 06a4 9AB2     		uxth	r2, r3
 1091 06a6 7B68     		ldr	r3, [r7, #4]
 1092 06a8 9A83     		strh	r2, [r3, #28]	@ movhi
 1093 06aa 07E0     		b	.L51
 1094              	.L54:
 460:../SPL/src/stm32f10x_spi.c ****   }
 461:../SPL/src/stm32f10x_spi.c ****   else
 462:../SPL/src/stm32f10x_spi.c ****   {
 463:../SPL/src/stm32f10x_spi.c ****     /* Disable the selected SPI peripheral (in I2S mode) */
 464:../SPL/src/stm32f10x_spi.c ****     SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 1095              		.loc 1 464 0
 1096 06ac 7B68     		ldr	r3, [r7, #4]
 1097 06ae 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1098 06b0 9BB2     		uxth	r3, r3
 1099 06b2 23F48063 		bic	r3, r3, #1024
 1100 06b6 9AB2     		uxth	r2, r3
 1101 06b8 7B68     		ldr	r3, [r7, #4]
 1102 06ba 9A83     		strh	r2, [r3, #28]	@ movhi
 1103              	.L51:
 465:../SPL/src/stm32f10x_spi.c ****   }
 466:../SPL/src/stm32f10x_spi.c **** }
 1104              		.loc 1 466 0
 1105 06bc 07F10807 		add	r7, r7, #8
 1106 06c0 BD46     		mov	sp, r7
 1107 06c2 80BD     		pop	{r7, pc}
 1108              	.L57:
 1109              		.align	2
 1110              	.L56:
 1111 06c4 00380040 		.word	1073756160
 1112 06c8 003C0040 		.word	1073757184
 1113 06cc 00000000 		.word	.LC0
 1114              		.cfi_endproc
 1115              	.LFE35:
 1117              		.align	2
 1118              		.global	SPI_I2S_ITConfig
 1119              		.thumb
 1120              		.thumb_func
 1122              	SPI_I2S_ITConfig:
 1123              	.LFB36:
 467:../SPL/src/stm32f10x_spi.c **** 
 468:../SPL/src/stm32f10x_spi.c **** /**
 469:../SPL/src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
 470:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 471:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 472:../SPL/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 473:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to be enabled or disabled. 
 474:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 475:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
 476:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
 477:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_ERR: Error interrupt mask
 478:../SPL/src/stm32f10x_spi.c ****   * @param  NewState: new state of the specified SPI/I2S interrupt.
 479:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 480:../SPL/src/stm32f10x_spi.c ****   * @retval None
 481:../SPL/src/stm32f10x_spi.c ****   */
 482:../SPL/src/stm32f10x_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
 483:../SPL/src/stm32f10x_spi.c **** {
 1124              		.loc 1 483 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 16
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128 06d0 80B5     		push	{r7, lr}
 1129              	.LCFI21:
 1130              		.cfi_def_cfa_offset 8
 1131              		.cfi_offset 7, -8
 1132              		.cfi_offset 14, -4
 1133 06d2 84B0     		sub	sp, sp, #16
 1134              	.LCFI22:
 1135              		.cfi_def_cfa_offset 24
 1136 06d4 00AF     		add	r7, sp, #0
 1137              	.LCFI23:
 1138              		.cfi_def_cfa_register 7
 1139 06d6 7860     		str	r0, [r7, #4]
 1140 06d8 1346     		mov	r3, r2
 1141 06da 0A46     		mov	r2, r1
 1142 06dc FA70     		strb	r2, [r7, #3]
 1143 06de BB70     		strb	r3, [r7, #2]
 484:../SPL/src/stm32f10x_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1144              		.loc 1 484 0
 1145 06e0 4FF00003 		mov	r3, #0
 1146 06e4 FB81     		strh	r3, [r7, #14]	@ movhi
 1147 06e6 4FF00003 		mov	r3, #0
 1148 06ea BB81     		strh	r3, [r7, #12]	@ movhi
 485:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 486:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1149              		.loc 1 486 0
 1150 06ec 7A68     		ldr	r2, [r7, #4]
 1151 06ee 274B     		ldr	r3, .L64
 1152 06f0 9A42     		cmp	r2, r3
 1153 06f2 0CD0     		beq	.L59
 1154              		.loc 1 486 0 is_stmt 0 discriminator 1
 1155 06f4 7A68     		ldr	r2, [r7, #4]
 1156 06f6 264B     		ldr	r3, .L64+4
 1157 06f8 9A42     		cmp	r2, r3
 1158 06fa 08D0     		beq	.L59
 1159              		.loc 1 486 0 discriminator 2
 1160 06fc 7A68     		ldr	r2, [r7, #4]
 1161 06fe 254B     		ldr	r3, .L64+8
 1162 0700 9A42     		cmp	r2, r3
 1163 0702 04D0     		beq	.L59
 1164              		.loc 1 486 0 discriminator 3
 1165 0704 2448     		ldr	r0, .L64+12
 1166 0706 4FF4F371 		mov	r1, #486
 1167 070a FFF7FEFF 		bl	assert_failed
 1168              	.L59:
 487:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1169              		.loc 1 487 0 is_stmt 1
 1170 070e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1171 0710 002B     		cmp	r3, #0
 1172 0712 07D0     		beq	.L60
 1173              		.loc 1 487 0 is_stmt 0 discriminator 1
 1174 0714 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1175 0716 012B     		cmp	r3, #1
 1176 0718 04D0     		beq	.L60
 1177              		.loc 1 487 0 discriminator 2
 1178 071a 1F48     		ldr	r0, .L64+12
 1179 071c 40F2E711 		movw	r1, #487
 1180 0720 FFF7FEFF 		bl	assert_failed
 1181              	.L60:
 488:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
 1182              		.loc 1 488 0 is_stmt 1
 1183 0724 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1184 0726 712B     		cmp	r3, #113
 1185 0728 0AD0     		beq	.L61
 1186              		.loc 1 488 0 is_stmt 0 discriminator 1
 1187 072a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1188 072c 602B     		cmp	r3, #96
 1189 072e 07D0     		beq	.L61
 1190              		.loc 1 488 0 discriminator 2
 1191 0730 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1192 0732 502B     		cmp	r3, #80
 1193 0734 04D0     		beq	.L61
 1194              		.loc 1 488 0 discriminator 3
 1195 0736 1848     		ldr	r0, .L64+12
 1196 0738 4FF4F471 		mov	r1, #488
 1197 073c FFF7FEFF 		bl	assert_failed
 1198              	.L61:
 489:../SPL/src/stm32f10x_spi.c **** 
 490:../SPL/src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT index */
 491:../SPL/src/stm32f10x_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1199              		.loc 1 491 0 is_stmt 1
 1200 0740 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1201 0742 4FEA1313 		lsr	r3, r3, #4
 1202 0746 DBB2     		uxtb	r3, r3
 1203 0748 FB81     		strh	r3, [r7, #14]	@ movhi
 492:../SPL/src/stm32f10x_spi.c **** 
 493:../SPL/src/stm32f10x_spi.c ****   /* Set the IT mask */
 494:../SPL/src/stm32f10x_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1204              		.loc 1 494 0
 1205 074a FB89     		ldrh	r3, [r7, #14]
 1206 074c 4FF00102 		mov	r2, #1
 1207 0750 02FA03F3 		lsl	r3, r2, r3
 1208 0754 BB81     		strh	r3, [r7, #12]	@ movhi
 495:../SPL/src/stm32f10x_spi.c **** 
 496:../SPL/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1209              		.loc 1 496 0
 1210 0756 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1211 0758 002B     		cmp	r3, #0
 1212 075a 08D0     		beq	.L62
 497:../SPL/src/stm32f10x_spi.c ****   {
 498:../SPL/src/stm32f10x_spi.c ****     /* Enable the selected SPI/I2S interrupt */
 499:../SPL/src/stm32f10x_spi.c ****     SPIx->CR2 |= itmask;
 1213              		.loc 1 499 0
 1214 075c 7B68     		ldr	r3, [r7, #4]
 1215 075e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1216 0760 9AB2     		uxth	r2, r3
 1217 0762 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1218 0764 1343     		orrs	r3, r3, r2
 1219 0766 9AB2     		uxth	r2, r3
 1220 0768 7B68     		ldr	r3, [r7, #4]
 1221 076a 9A80     		strh	r2, [r3, #4]	@ movhi
 1222 076c 0AE0     		b	.L58
 1223              	.L62:
 500:../SPL/src/stm32f10x_spi.c ****   }
 501:../SPL/src/stm32f10x_spi.c ****   else
 502:../SPL/src/stm32f10x_spi.c ****   {
 503:../SPL/src/stm32f10x_spi.c ****     /* Disable the selected SPI/I2S interrupt */
 504:../SPL/src/stm32f10x_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1224              		.loc 1 504 0
 1225 076e 7B68     		ldr	r3, [r7, #4]
 1226 0770 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1227 0772 9AB2     		uxth	r2, r3
 1228 0774 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1229 0776 6FEA0303 		mvn	r3, r3
 1230 077a 9BB2     		uxth	r3, r3
 1231 077c 1340     		ands	r3, r3, r2
 1232 077e 9AB2     		uxth	r2, r3
 1233 0780 7B68     		ldr	r3, [r7, #4]
 1234 0782 9A80     		strh	r2, [r3, #4]	@ movhi
 1235              	.L58:
 505:../SPL/src/stm32f10x_spi.c ****   }
 506:../SPL/src/stm32f10x_spi.c **** }
 1236              		.loc 1 506 0
 1237 0784 07F11007 		add	r7, r7, #16
 1238 0788 BD46     		mov	sp, r7
 1239 078a 80BD     		pop	{r7, pc}
 1240              	.L65:
 1241              		.align	2
 1242              	.L64:
 1243 078c 00300140 		.word	1073819648
 1244 0790 00380040 		.word	1073756160
 1245 0794 003C0040 		.word	1073757184
 1246 0798 00000000 		.word	.LC0
 1247              		.cfi_endproc
 1248              	.LFE36:
 1250              		.align	2
 1251              		.global	SPI_I2S_DMACmd
 1252              		.thumb
 1253              		.thumb_func
 1255              	SPI_I2S_DMACmd:
 1256              	.LFB37:
 507:../SPL/src/stm32f10x_spi.c **** 
 508:../SPL/src/stm32f10x_spi.c **** /**
 509:../SPL/src/stm32f10x_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 510:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 511:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 512:../SPL/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 513:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI/I2S DMA transfer request to be enabled or disabled. 
 514:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be any combination of the following values:
 515:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 516:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 517:../SPL/src/stm32f10x_spi.c ****   * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
 518:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 519:../SPL/src/stm32f10x_spi.c ****   * @retval None
 520:../SPL/src/stm32f10x_spi.c ****   */
 521:../SPL/src/stm32f10x_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 522:../SPL/src/stm32f10x_spi.c **** {
 1257              		.loc 1 522 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 8
 1260              		@ frame_needed = 1, uses_anonymous_args = 0
 1261 079c 80B5     		push	{r7, lr}
 1262              	.LCFI24:
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266 079e 82B0     		sub	sp, sp, #8
 1267              	.LCFI25:
 1268              		.cfi_def_cfa_offset 16
 1269 07a0 00AF     		add	r7, sp, #0
 1270              	.LCFI26:
 1271              		.cfi_def_cfa_register 7
 1272 07a2 7860     		str	r0, [r7, #4]
 1273 07a4 1346     		mov	r3, r2
 1274 07a6 0A46     		mov	r2, r1	@ movhi
 1275 07a8 7A80     		strh	r2, [r7, #2]	@ movhi
 1276 07aa 7B70     		strb	r3, [r7, #1]
 523:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 524:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1277              		.loc 1 524 0
 1278 07ac 7A68     		ldr	r2, [r7, #4]
 1279 07ae 224B     		ldr	r3, .L73
 1280 07b0 9A42     		cmp	r2, r3
 1281 07b2 0CD0     		beq	.L67
 1282              		.loc 1 524 0 is_stmt 0 discriminator 1
 1283 07b4 7A68     		ldr	r2, [r7, #4]
 1284 07b6 214B     		ldr	r3, .L73+4
 1285 07b8 9A42     		cmp	r2, r3
 1286 07ba 08D0     		beq	.L67
 1287              		.loc 1 524 0 discriminator 2
 1288 07bc 7A68     		ldr	r2, [r7, #4]
 1289 07be 204B     		ldr	r3, .L73+8
 1290 07c0 9A42     		cmp	r2, r3
 1291 07c2 04D0     		beq	.L67
 1292              		.loc 1 524 0 discriminator 3
 1293 07c4 1F48     		ldr	r0, .L73+12
 1294 07c6 4FF40371 		mov	r1, #524
 1295 07ca FFF7FEFF 		bl	assert_failed
 1296              	.L67:
 525:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1297              		.loc 1 525 0 is_stmt 1
 1298 07ce 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1299 07d0 002B     		cmp	r3, #0
 1300 07d2 07D0     		beq	.L68
 1301              		.loc 1 525 0 is_stmt 0 discriminator 1
 1302 07d4 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1303 07d6 012B     		cmp	r3, #1
 1304 07d8 04D0     		beq	.L68
 1305              		.loc 1 525 0 discriminator 2
 1306 07da 1A48     		ldr	r0, .L73+12
 1307 07dc 40F20D21 		movw	r1, #525
 1308 07e0 FFF7FEFF 		bl	assert_failed
 1309              	.L68:
 526:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 1310              		.loc 1 526 0 is_stmt 1
 1311 07e4 7A88     		ldrh	r2, [r7, #2]
 1312 07e6 4FF6FC73 		movw	r3, #65532
 1313 07ea 1340     		ands	r3, r3, r2
 1314 07ec 002B     		cmp	r3, #0
 1315 07ee 02D1     		bne	.L69
 1316              		.loc 1 526 0 is_stmt 0 discriminator 2
 1317 07f0 7B88     		ldrh	r3, [r7, #2]
 1318 07f2 002B     		cmp	r3, #0
 1319 07f4 04D1     		bne	.L70
 1320              	.L69:
 1321              		.loc 1 526 0 discriminator 1
 1322 07f6 1348     		ldr	r0, .L73+12
 1323 07f8 40F20E21 		movw	r1, #526
 1324 07fc FFF7FEFF 		bl	assert_failed
 1325              	.L70:
 527:../SPL/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1326              		.loc 1 527 0 is_stmt 1
 1327 0800 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1328 0802 002B     		cmp	r3, #0
 1329 0804 08D0     		beq	.L71
 528:../SPL/src/stm32f10x_spi.c ****   {
 529:../SPL/src/stm32f10x_spi.c ****     /* Enable the selected SPI/I2S DMA requests */
 530:../SPL/src/stm32f10x_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1330              		.loc 1 530 0
 1331 0806 7B68     		ldr	r3, [r7, #4]
 1332 0808 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1333 080a 9AB2     		uxth	r2, r3
 1334 080c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1335 080e 1343     		orrs	r3, r3, r2
 1336 0810 9AB2     		uxth	r2, r3
 1337 0812 7B68     		ldr	r3, [r7, #4]
 1338 0814 9A80     		strh	r2, [r3, #4]	@ movhi
 1339 0816 0AE0     		b	.L66
 1340              	.L71:
 531:../SPL/src/stm32f10x_spi.c ****   }
 532:../SPL/src/stm32f10x_spi.c ****   else
 533:../SPL/src/stm32f10x_spi.c ****   {
 534:../SPL/src/stm32f10x_spi.c ****     /* Disable the selected SPI/I2S DMA requests */
 535:../SPL/src/stm32f10x_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1341              		.loc 1 535 0
 1342 0818 7B68     		ldr	r3, [r7, #4]
 1343 081a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1344 081c 9AB2     		uxth	r2, r3
 1345 081e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1346 0820 6FEA0303 		mvn	r3, r3
 1347 0824 9BB2     		uxth	r3, r3
 1348 0826 1340     		ands	r3, r3, r2
 1349 0828 9AB2     		uxth	r2, r3
 1350 082a 7B68     		ldr	r3, [r7, #4]
 1351 082c 9A80     		strh	r2, [r3, #4]	@ movhi
 1352              	.L66:
 536:../SPL/src/stm32f10x_spi.c ****   }
 537:../SPL/src/stm32f10x_spi.c **** }
 1353              		.loc 1 537 0
 1354 082e 07F10807 		add	r7, r7, #8
 1355 0832 BD46     		mov	sp, r7
 1356 0834 80BD     		pop	{r7, pc}
 1357              	.L74:
 1358 0836 00BF     		.align	2
 1359              	.L73:
 1360 0838 00300140 		.word	1073819648
 1361 083c 00380040 		.word	1073756160
 1362 0840 003C0040 		.word	1073757184
 1363 0844 00000000 		.word	.LC0
 1364              		.cfi_endproc
 1365              	.LFE37:
 1367              		.align	2
 1368              		.global	SPI_I2S_SendData
 1369              		.thumb
 1370              		.thumb_func
 1372              	SPI_I2S_SendData:
 1373              	.LFB38:
 538:../SPL/src/stm32f10x_spi.c **** 
 539:../SPL/src/stm32f10x_spi.c **** /**
 540:../SPL/src/stm32f10x_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 541:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 542:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 543:../SPL/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 544:../SPL/src/stm32f10x_spi.c ****   * @param  Data : Data to be transmitted.
 545:../SPL/src/stm32f10x_spi.c ****   * @retval None
 546:../SPL/src/stm32f10x_spi.c ****   */
 547:../SPL/src/stm32f10x_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 548:../SPL/src/stm32f10x_spi.c **** {
 1374              		.loc 1 548 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 8
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378 0848 80B5     		push	{r7, lr}
 1379              	.LCFI27:
 1380              		.cfi_def_cfa_offset 8
 1381              		.cfi_offset 7, -8
 1382              		.cfi_offset 14, -4
 1383 084a 82B0     		sub	sp, sp, #8
 1384              	.LCFI28:
 1385              		.cfi_def_cfa_offset 16
 1386 084c 00AF     		add	r7, sp, #0
 1387              	.LCFI29:
 1388              		.cfi_def_cfa_register 7
 1389 084e 7860     		str	r0, [r7, #4]
 1390 0850 0B46     		mov	r3, r1
 1391 0852 7B80     		strh	r3, [r7, #2]	@ movhi
 549:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 550:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1392              		.loc 1 550 0
 1393 0854 7A68     		ldr	r2, [r7, #4]
 1394 0856 0B4B     		ldr	r3, .L77
 1395 0858 9A42     		cmp	r2, r3
 1396 085a 0CD0     		beq	.L76
 1397              		.loc 1 550 0 is_stmt 0 discriminator 1
 1398 085c 7A68     		ldr	r2, [r7, #4]
 1399 085e 0A4B     		ldr	r3, .L77+4
 1400 0860 9A42     		cmp	r2, r3
 1401 0862 08D0     		beq	.L76
 1402              		.loc 1 550 0 discriminator 2
 1403 0864 7A68     		ldr	r2, [r7, #4]
 1404 0866 094B     		ldr	r3, .L77+8
 1405 0868 9A42     		cmp	r2, r3
 1406 086a 04D0     		beq	.L76
 1407              		.loc 1 550 0 discriminator 3
 1408 086c 0848     		ldr	r0, .L77+12
 1409 086e 40F22621 		movw	r1, #550
 1410 0872 FFF7FEFF 		bl	assert_failed
 1411              	.L76:
 551:../SPL/src/stm32f10x_spi.c ****   
 552:../SPL/src/stm32f10x_spi.c ****   /* Write in the DR register the data to be sent */
 553:../SPL/src/stm32f10x_spi.c ****   SPIx->DR = Data;
 1412              		.loc 1 553 0 is_stmt 1
 1413 0876 7B68     		ldr	r3, [r7, #4]
 1414 0878 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1415 087a 9A81     		strh	r2, [r3, #12]	@ movhi
 554:../SPL/src/stm32f10x_spi.c **** }
 1416              		.loc 1 554 0
 1417 087c 07F10807 		add	r7, r7, #8
 1418 0880 BD46     		mov	sp, r7
 1419 0882 80BD     		pop	{r7, pc}
 1420              	.L78:
 1421              		.align	2
 1422              	.L77:
 1423 0884 00300140 		.word	1073819648
 1424 0888 00380040 		.word	1073756160
 1425 088c 003C0040 		.word	1073757184
 1426 0890 00000000 		.word	.LC0
 1427              		.cfi_endproc
 1428              	.LFE38:
 1430              		.align	2
 1431              		.global	SPI_I2S_ReceiveData
 1432              		.thumb
 1433              		.thumb_func
 1435              	SPI_I2S_ReceiveData:
 1436              	.LFB39:
 555:../SPL/src/stm32f10x_spi.c **** 
 556:../SPL/src/stm32f10x_spi.c **** /**
 557:../SPL/src/stm32f10x_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 558:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 559:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 560:../SPL/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 561:../SPL/src/stm32f10x_spi.c ****   * @retval The value of the received data.
 562:../SPL/src/stm32f10x_spi.c ****   */
 563:../SPL/src/stm32f10x_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 564:../SPL/src/stm32f10x_spi.c **** {
 1437              		.loc 1 564 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 8
 1440              		@ frame_needed = 1, uses_anonymous_args = 0
 1441 0894 80B5     		push	{r7, lr}
 1442              	.LCFI30:
 1443              		.cfi_def_cfa_offset 8
 1444              		.cfi_offset 7, -8
 1445              		.cfi_offset 14, -4
 1446 0896 82B0     		sub	sp, sp, #8
 1447              	.LCFI31:
 1448              		.cfi_def_cfa_offset 16
 1449 0898 00AF     		add	r7, sp, #0
 1450              	.LCFI32:
 1451              		.cfi_def_cfa_register 7
 1452 089a 7860     		str	r0, [r7, #4]
 565:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 566:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1453              		.loc 1 566 0
 1454 089c 7A68     		ldr	r2, [r7, #4]
 1455 089e 0C4B     		ldr	r3, .L82
 1456 08a0 9A42     		cmp	r2, r3
 1457 08a2 0CD0     		beq	.L80
 1458              		.loc 1 566 0 is_stmt 0 discriminator 1
 1459 08a4 7A68     		ldr	r2, [r7, #4]
 1460 08a6 0B4B     		ldr	r3, .L82+4
 1461 08a8 9A42     		cmp	r2, r3
 1462 08aa 08D0     		beq	.L80
 1463              		.loc 1 566 0 discriminator 2
 1464 08ac 7A68     		ldr	r2, [r7, #4]
 1465 08ae 0A4B     		ldr	r3, .L82+8
 1466 08b0 9A42     		cmp	r2, r3
 1467 08b2 04D0     		beq	.L80
 1468              		.loc 1 566 0 discriminator 3
 1469 08b4 0948     		ldr	r0, .L82+12
 1470 08b6 40F23621 		movw	r1, #566
 1471 08ba FFF7FEFF 		bl	assert_failed
 1472              	.L80:
 567:../SPL/src/stm32f10x_spi.c ****   
 568:../SPL/src/stm32f10x_spi.c ****   /* Return the data in the DR register */
 569:../SPL/src/stm32f10x_spi.c ****   return SPIx->DR;
 1473              		.loc 1 569 0 is_stmt 1
 1474 08be 7B68     		ldr	r3, [r7, #4]
 1475 08c0 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1476 08c2 9BB2     		uxth	r3, r3
 570:../SPL/src/stm32f10x_spi.c **** }
 1477              		.loc 1 570 0
 1478 08c4 1846     		mov	r0, r3
 1479 08c6 07F10807 		add	r7, r7, #8
 1480 08ca BD46     		mov	sp, r7
 1481 08cc 80BD     		pop	{r7, pc}
 1482              	.L83:
 1483 08ce 00BF     		.align	2
 1484              	.L82:
 1485 08d0 00300140 		.word	1073819648
 1486 08d4 00380040 		.word	1073756160
 1487 08d8 003C0040 		.word	1073757184
 1488 08dc 00000000 		.word	.LC0
 1489              		.cfi_endproc
 1490              	.LFE39:
 1492              		.align	2
 1493              		.global	SPI_NSSInternalSoftwareConfig
 1494              		.thumb
 1495              		.thumb_func
 1497              	SPI_NSSInternalSoftwareConfig:
 1498              	.LFB40:
 571:../SPL/src/stm32f10x_spi.c **** 
 572:../SPL/src/stm32f10x_spi.c **** /**
 573:../SPL/src/stm32f10x_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 574:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 575:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 576:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 577:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 578:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 579:../SPL/src/stm32f10x_spi.c ****   * @retval None
 580:../SPL/src/stm32f10x_spi.c ****   */
 581:../SPL/src/stm32f10x_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 582:../SPL/src/stm32f10x_spi.c **** {
 1499              		.loc 1 582 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 8
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503 08e0 80B5     		push	{r7, lr}
 1504              	.LCFI33:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 08e2 82B0     		sub	sp, sp, #8
 1509              	.LCFI34:
 1510              		.cfi_def_cfa_offset 16
 1511 08e4 00AF     		add	r7, sp, #0
 1512              	.LCFI35:
 1513              		.cfi_def_cfa_register 7
 1514 08e6 7860     		str	r0, [r7, #4]
 1515 08e8 0B46     		mov	r3, r1
 1516 08ea 7B80     		strh	r3, [r7, #2]	@ movhi
 583:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 584:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1517              		.loc 1 584 0
 1518 08ec 7A68     		ldr	r2, [r7, #4]
 1519 08ee 1C4B     		ldr	r3, .L89
 1520 08f0 9A42     		cmp	r2, r3
 1521 08f2 0CD0     		beq	.L85
 1522              		.loc 1 584 0 is_stmt 0 discriminator 1
 1523 08f4 7A68     		ldr	r2, [r7, #4]
 1524 08f6 1B4B     		ldr	r3, .L89+4
 1525 08f8 9A42     		cmp	r2, r3
 1526 08fa 08D0     		beq	.L85
 1527              		.loc 1 584 0 discriminator 2
 1528 08fc 7A68     		ldr	r2, [r7, #4]
 1529 08fe 1A4B     		ldr	r3, .L89+8
 1530 0900 9A42     		cmp	r2, r3
 1531 0902 04D0     		beq	.L85
 1532              		.loc 1 584 0 discriminator 3
 1533 0904 1948     		ldr	r0, .L89+12
 1534 0906 4FF41271 		mov	r1, #584
 1535 090a FFF7FEFF 		bl	assert_failed
 1536              	.L85:
 585:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 1537              		.loc 1 585 0 is_stmt 1
 1538 090e 7B88     		ldrh	r3, [r7, #2]
 1539 0910 B3F5807F 		cmp	r3, #256
 1540 0914 09D0     		beq	.L86
 1541              		.loc 1 585 0 is_stmt 0 discriminator 1
 1542 0916 7A88     		ldrh	r2, [r7, #2]
 1543 0918 4FF6FF63 		movw	r3, #65279
 1544 091c 9A42     		cmp	r2, r3
 1545 091e 04D0     		beq	.L86
 1546              		.loc 1 585 0 discriminator 2
 1547 0920 1248     		ldr	r0, .L89+12
 1548 0922 40F24921 		movw	r1, #585
 1549 0926 FFF7FEFF 		bl	assert_failed
 1550              	.L86:
 586:../SPL/src/stm32f10x_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 1551              		.loc 1 586 0 is_stmt 1
 1552 092a 7A88     		ldrh	r2, [r7, #2]
 1553 092c 4FF6FF63 		movw	r3, #65279
 1554 0930 9A42     		cmp	r2, r3
 1555 0932 08D0     		beq	.L87
 587:../SPL/src/stm32f10x_spi.c ****   {
 588:../SPL/src/stm32f10x_spi.c ****     /* Set NSS pin internally by software */
 589:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 1556              		.loc 1 589 0
 1557 0934 7B68     		ldr	r3, [r7, #4]
 1558 0936 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1559 0938 9BB2     		uxth	r3, r3
 1560 093a 43F48073 		orr	r3, r3, #256
 1561 093e 9AB2     		uxth	r2, r3
 1562 0940 7B68     		ldr	r3, [r7, #4]
 1563 0942 1A80     		strh	r2, [r3, #0]	@ movhi
 1564 0944 07E0     		b	.L84
 1565              	.L87:
 590:../SPL/src/stm32f10x_spi.c ****   }
 591:../SPL/src/stm32f10x_spi.c ****   else
 592:../SPL/src/stm32f10x_spi.c ****   {
 593:../SPL/src/stm32f10x_spi.c ****     /* Reset NSS pin internally by software */
 594:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 1566              		.loc 1 594 0
 1567 0946 7B68     		ldr	r3, [r7, #4]
 1568 0948 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1569 094a 9BB2     		uxth	r3, r3
 1570 094c 23F48073 		bic	r3, r3, #256
 1571 0950 9AB2     		uxth	r2, r3
 1572 0952 7B68     		ldr	r3, [r7, #4]
 1573 0954 1A80     		strh	r2, [r3, #0]	@ movhi
 1574              	.L84:
 595:../SPL/src/stm32f10x_spi.c ****   }
 596:../SPL/src/stm32f10x_spi.c **** }
 1575              		.loc 1 596 0
 1576 0956 07F10807 		add	r7, r7, #8
 1577 095a BD46     		mov	sp, r7
 1578 095c 80BD     		pop	{r7, pc}
 1579              	.L90:
 1580 095e 00BF     		.align	2
 1581              	.L89:
 1582 0960 00300140 		.word	1073819648
 1583 0964 00380040 		.word	1073756160
 1584 0968 003C0040 		.word	1073757184
 1585 096c 00000000 		.word	.LC0
 1586              		.cfi_endproc
 1587              	.LFE40:
 1589              		.align	2
 1590              		.global	SPI_SSOutputCmd
 1591              		.thumb
 1592              		.thumb_func
 1594              	SPI_SSOutputCmd:
 1595              	.LFB41:
 597:../SPL/src/stm32f10x_spi.c **** 
 598:../SPL/src/stm32f10x_spi.c **** /**
 599:../SPL/src/stm32f10x_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 600:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 601:../SPL/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 602:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 603:../SPL/src/stm32f10x_spi.c ****   * @retval None
 604:../SPL/src/stm32f10x_spi.c ****   */
 605:../SPL/src/stm32f10x_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 606:../SPL/src/stm32f10x_spi.c **** {
 1596              		.loc 1 606 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 8
 1599              		@ frame_needed = 1, uses_anonymous_args = 0
 1600 0970 80B5     		push	{r7, lr}
 1601              	.LCFI36:
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 7, -8
 1604              		.cfi_offset 14, -4
 1605 0972 82B0     		sub	sp, sp, #8
 1606              	.LCFI37:
 1607              		.cfi_def_cfa_offset 16
 1608 0974 00AF     		add	r7, sp, #0
 1609              	.LCFI38:
 1610              		.cfi_def_cfa_register 7
 1611 0976 7860     		str	r0, [r7, #4]
 1612 0978 0B46     		mov	r3, r1
 1613 097a FB70     		strb	r3, [r7, #3]
 607:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 608:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1614              		.loc 1 608 0
 1615 097c 7A68     		ldr	r2, [r7, #4]
 1616 097e 194B     		ldr	r3, .L96
 1617 0980 9A42     		cmp	r2, r3
 1618 0982 0CD0     		beq	.L92
 1619              		.loc 1 608 0 is_stmt 0 discriminator 1
 1620 0984 7A68     		ldr	r2, [r7, #4]
 1621 0986 184B     		ldr	r3, .L96+4
 1622 0988 9A42     		cmp	r2, r3
 1623 098a 08D0     		beq	.L92
 1624              		.loc 1 608 0 discriminator 2
 1625 098c 7A68     		ldr	r2, [r7, #4]
 1626 098e 174B     		ldr	r3, .L96+8
 1627 0990 9A42     		cmp	r2, r3
 1628 0992 04D0     		beq	.L92
 1629              		.loc 1 608 0 discriminator 3
 1630 0994 1648     		ldr	r0, .L96+12
 1631 0996 4FF41871 		mov	r1, #608
 1632 099a FFF7FEFF 		bl	assert_failed
 1633              	.L92:
 609:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1634              		.loc 1 609 0 is_stmt 1
 1635 099e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1636 09a0 002B     		cmp	r3, #0
 1637 09a2 07D0     		beq	.L93
 1638              		.loc 1 609 0 is_stmt 0 discriminator 1
 1639 09a4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1640 09a6 012B     		cmp	r3, #1
 1641 09a8 04D0     		beq	.L93
 1642              		.loc 1 609 0 discriminator 2
 1643 09aa 1148     		ldr	r0, .L96+12
 1644 09ac 40F26121 		movw	r1, #609
 1645 09b0 FFF7FEFF 		bl	assert_failed
 1646              	.L93:
 610:../SPL/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1647              		.loc 1 610 0 is_stmt 1
 1648 09b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1649 09b6 002B     		cmp	r3, #0
 1650 09b8 08D0     		beq	.L94
 611:../SPL/src/stm32f10x_spi.c ****   {
 612:../SPL/src/stm32f10x_spi.c ****     /* Enable the selected SPI SS output */
 613:../SPL/src/stm32f10x_spi.c ****     SPIx->CR2 |= CR2_SSOE_Set;
 1651              		.loc 1 613 0
 1652 09ba 7B68     		ldr	r3, [r7, #4]
 1653 09bc 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1654 09be 9BB2     		uxth	r3, r3
 1655 09c0 43F00403 		orr	r3, r3, #4
 1656 09c4 9AB2     		uxth	r2, r3
 1657 09c6 7B68     		ldr	r3, [r7, #4]
 1658 09c8 9A80     		strh	r2, [r3, #4]	@ movhi
 1659 09ca 07E0     		b	.L91
 1660              	.L94:
 614:../SPL/src/stm32f10x_spi.c ****   }
 615:../SPL/src/stm32f10x_spi.c ****   else
 616:../SPL/src/stm32f10x_spi.c ****   {
 617:../SPL/src/stm32f10x_spi.c ****     /* Disable the selected SPI SS output */
 618:../SPL/src/stm32f10x_spi.c ****     SPIx->CR2 &= CR2_SSOE_Reset;
 1661              		.loc 1 618 0
 1662 09cc 7B68     		ldr	r3, [r7, #4]
 1663 09ce 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1664 09d0 9BB2     		uxth	r3, r3
 1665 09d2 23F00403 		bic	r3, r3, #4
 1666 09d6 9AB2     		uxth	r2, r3
 1667 09d8 7B68     		ldr	r3, [r7, #4]
 1668 09da 9A80     		strh	r2, [r3, #4]	@ movhi
 1669              	.L91:
 619:../SPL/src/stm32f10x_spi.c ****   }
 620:../SPL/src/stm32f10x_spi.c **** }
 1670              		.loc 1 620 0
 1671 09dc 07F10807 		add	r7, r7, #8
 1672 09e0 BD46     		mov	sp, r7
 1673 09e2 80BD     		pop	{r7, pc}
 1674              	.L97:
 1675              		.align	2
 1676              	.L96:
 1677 09e4 00300140 		.word	1073819648
 1678 09e8 00380040 		.word	1073756160
 1679 09ec 003C0040 		.word	1073757184
 1680 09f0 00000000 		.word	.LC0
 1681              		.cfi_endproc
 1682              	.LFE41:
 1684              		.align	2
 1685              		.global	SPI_DataSizeConfig
 1686              		.thumb
 1687              		.thumb_func
 1689              	SPI_DataSizeConfig:
 1690              	.LFB42:
 621:../SPL/src/stm32f10x_spi.c **** 
 622:../SPL/src/stm32f10x_spi.c **** /**
 623:../SPL/src/stm32f10x_spi.c ****   * @brief  Configures the data size for the selected SPI.
 624:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 625:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 626:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 627:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_DataSize_16b: Set data frame format to 16bit
 628:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_DataSize_8b: Set data frame format to 8bit
 629:../SPL/src/stm32f10x_spi.c ****   * @retval None
 630:../SPL/src/stm32f10x_spi.c ****   */
 631:../SPL/src/stm32f10x_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 632:../SPL/src/stm32f10x_spi.c **** {
 1691              		.loc 1 632 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 8
 1694              		@ frame_needed = 1, uses_anonymous_args = 0
 1695 09f4 80B5     		push	{r7, lr}
 1696              	.LCFI39:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 7, -8
 1699              		.cfi_offset 14, -4
 1700 09f6 82B0     		sub	sp, sp, #8
 1701              	.LCFI40:
 1702              		.cfi_def_cfa_offset 16
 1703 09f8 00AF     		add	r7, sp, #0
 1704              	.LCFI41:
 1705              		.cfi_def_cfa_register 7
 1706 09fa 7860     		str	r0, [r7, #4]
 1707 09fc 0B46     		mov	r3, r1
 1708 09fe 7B80     		strh	r3, [r7, #2]	@ movhi
 633:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 634:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1709              		.loc 1 634 0
 1710 0a00 7A68     		ldr	r2, [r7, #4]
 1711 0a02 184B     		ldr	r3, .L101
 1712 0a04 9A42     		cmp	r2, r3
 1713 0a06 0CD0     		beq	.L99
 1714              		.loc 1 634 0 is_stmt 0 discriminator 1
 1715 0a08 7A68     		ldr	r2, [r7, #4]
 1716 0a0a 174B     		ldr	r3, .L101+4
 1717 0a0c 9A42     		cmp	r2, r3
 1718 0a0e 08D0     		beq	.L99
 1719              		.loc 1 634 0 discriminator 2
 1720 0a10 7A68     		ldr	r2, [r7, #4]
 1721 0a12 164B     		ldr	r3, .L101+8
 1722 0a14 9A42     		cmp	r2, r3
 1723 0a16 04D0     		beq	.L99
 1724              		.loc 1 634 0 discriminator 3
 1725 0a18 1548     		ldr	r0, .L101+12
 1726 0a1a 40F27A21 		movw	r1, #634
 1727 0a1e FFF7FEFF 		bl	assert_failed
 1728              	.L99:
 635:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 1729              		.loc 1 635 0 is_stmt 1
 1730 0a22 7B88     		ldrh	r3, [r7, #2]
 1731 0a24 B3F5006F 		cmp	r3, #2048
 1732 0a28 07D0     		beq	.L100
 1733              		.loc 1 635 0 is_stmt 0 discriminator 1
 1734 0a2a 7B88     		ldrh	r3, [r7, #2]
 1735 0a2c 002B     		cmp	r3, #0
 1736 0a2e 04D0     		beq	.L100
 1737              		.loc 1 635 0 discriminator 2
 1738 0a30 0F48     		ldr	r0, .L101+12
 1739 0a32 40F27B21 		movw	r1, #635
 1740 0a36 FFF7FEFF 		bl	assert_failed
 1741              	.L100:
 636:../SPL/src/stm32f10x_spi.c ****   /* Clear DFF bit */
 637:../SPL/src/stm32f10x_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 1742              		.loc 1 637 0 is_stmt 1
 1743 0a3a 7B68     		ldr	r3, [r7, #4]
 1744 0a3c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1745 0a3e 9BB2     		uxth	r3, r3
 1746 0a40 23F40063 		bic	r3, r3, #2048
 1747 0a44 9AB2     		uxth	r2, r3
 1748 0a46 7B68     		ldr	r3, [r7, #4]
 1749 0a48 1A80     		strh	r2, [r3, #0]	@ movhi
 638:../SPL/src/stm32f10x_spi.c ****   /* Set new DFF bit value */
 639:../SPL/src/stm32f10x_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 1750              		.loc 1 639 0
 1751 0a4a 7B68     		ldr	r3, [r7, #4]
 1752 0a4c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1753 0a4e 9AB2     		uxth	r2, r3
 1754 0a50 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1755 0a52 1343     		orrs	r3, r3, r2
 1756 0a54 9AB2     		uxth	r2, r3
 1757 0a56 7B68     		ldr	r3, [r7, #4]
 1758 0a58 1A80     		strh	r2, [r3, #0]	@ movhi
 640:../SPL/src/stm32f10x_spi.c **** }
 1759              		.loc 1 640 0
 1760 0a5a 07F10807 		add	r7, r7, #8
 1761 0a5e BD46     		mov	sp, r7
 1762 0a60 80BD     		pop	{r7, pc}
 1763              	.L102:
 1764 0a62 00BF     		.align	2
 1765              	.L101:
 1766 0a64 00300140 		.word	1073819648
 1767 0a68 00380040 		.word	1073756160
 1768 0a6c 003C0040 		.word	1073757184
 1769 0a70 00000000 		.word	.LC0
 1770              		.cfi_endproc
 1771              	.LFE42:
 1773              		.align	2
 1774              		.global	SPI_TransmitCRC
 1775              		.thumb
 1776              		.thumb_func
 1778              	SPI_TransmitCRC:
 1779              	.LFB43:
 641:../SPL/src/stm32f10x_spi.c **** 
 642:../SPL/src/stm32f10x_spi.c **** /**
 643:../SPL/src/stm32f10x_spi.c ****   * @brief  Transmit the SPIx CRC value.
 644:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 645:../SPL/src/stm32f10x_spi.c ****   * @retval None
 646:../SPL/src/stm32f10x_spi.c ****   */
 647:../SPL/src/stm32f10x_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 648:../SPL/src/stm32f10x_spi.c **** {
 1780              		.loc 1 648 0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 8
 1783              		@ frame_needed = 1, uses_anonymous_args = 0
 1784 0a74 80B5     		push	{r7, lr}
 1785              	.LCFI42:
 1786              		.cfi_def_cfa_offset 8
 1787              		.cfi_offset 7, -8
 1788              		.cfi_offset 14, -4
 1789 0a76 82B0     		sub	sp, sp, #8
 1790              	.LCFI43:
 1791              		.cfi_def_cfa_offset 16
 1792 0a78 00AF     		add	r7, sp, #0
 1793              	.LCFI44:
 1794              		.cfi_def_cfa_register 7
 1795 0a7a 7860     		str	r0, [r7, #4]
 649:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 650:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1796              		.loc 1 650 0
 1797 0a7c 7A68     		ldr	r2, [r7, #4]
 1798 0a7e 0E4B     		ldr	r3, .L105
 1799 0a80 9A42     		cmp	r2, r3
 1800 0a82 0CD0     		beq	.L104
 1801              		.loc 1 650 0 is_stmt 0 discriminator 1
 1802 0a84 7A68     		ldr	r2, [r7, #4]
 1803 0a86 0D4B     		ldr	r3, .L105+4
 1804 0a88 9A42     		cmp	r2, r3
 1805 0a8a 08D0     		beq	.L104
 1806              		.loc 1 650 0 discriminator 2
 1807 0a8c 7A68     		ldr	r2, [r7, #4]
 1808 0a8e 0C4B     		ldr	r3, .L105+8
 1809 0a90 9A42     		cmp	r2, r3
 1810 0a92 04D0     		beq	.L104
 1811              		.loc 1 650 0 discriminator 3
 1812 0a94 0B48     		ldr	r0, .L105+12
 1813 0a96 40F28A21 		movw	r1, #650
 1814 0a9a FFF7FEFF 		bl	assert_failed
 1815              	.L104:
 651:../SPL/src/stm32f10x_spi.c ****   
 652:../SPL/src/stm32f10x_spi.c ****   /* Enable the selected SPI CRC transmission */
 653:../SPL/src/stm32f10x_spi.c ****   SPIx->CR1 |= CR1_CRCNext_Set;
 1816              		.loc 1 653 0 is_stmt 1
 1817 0a9e 7B68     		ldr	r3, [r7, #4]
 1818 0aa0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1819 0aa2 9BB2     		uxth	r3, r3
 1820 0aa4 43F48053 		orr	r3, r3, #4096
 1821 0aa8 9AB2     		uxth	r2, r3
 1822 0aaa 7B68     		ldr	r3, [r7, #4]
 1823 0aac 1A80     		strh	r2, [r3, #0]	@ movhi
 654:../SPL/src/stm32f10x_spi.c **** }
 1824              		.loc 1 654 0
 1825 0aae 07F10807 		add	r7, r7, #8
 1826 0ab2 BD46     		mov	sp, r7
 1827 0ab4 80BD     		pop	{r7, pc}
 1828              	.L106:
 1829 0ab6 00BF     		.align	2
 1830              	.L105:
 1831 0ab8 00300140 		.word	1073819648
 1832 0abc 00380040 		.word	1073756160
 1833 0ac0 003C0040 		.word	1073757184
 1834 0ac4 00000000 		.word	.LC0
 1835              		.cfi_endproc
 1836              	.LFE43:
 1838              		.align	2
 1839              		.global	SPI_CalculateCRC
 1840              		.thumb
 1841              		.thumb_func
 1843              	SPI_CalculateCRC:
 1844              	.LFB44:
 655:../SPL/src/stm32f10x_spi.c **** 
 656:../SPL/src/stm32f10x_spi.c **** /**
 657:../SPL/src/stm32f10x_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 658:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 659:../SPL/src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 660:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 661:../SPL/src/stm32f10x_spi.c ****   * @retval None
 662:../SPL/src/stm32f10x_spi.c ****   */
 663:../SPL/src/stm32f10x_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 664:../SPL/src/stm32f10x_spi.c **** {
 1845              		.loc 1 664 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 8
 1848              		@ frame_needed = 1, uses_anonymous_args = 0
 1849 0ac8 80B5     		push	{r7, lr}
 1850              	.LCFI45:
 1851              		.cfi_def_cfa_offset 8
 1852              		.cfi_offset 7, -8
 1853              		.cfi_offset 14, -4
 1854 0aca 82B0     		sub	sp, sp, #8
 1855              	.LCFI46:
 1856              		.cfi_def_cfa_offset 16
 1857 0acc 00AF     		add	r7, sp, #0
 1858              	.LCFI47:
 1859              		.cfi_def_cfa_register 7
 1860 0ace 7860     		str	r0, [r7, #4]
 1861 0ad0 0B46     		mov	r3, r1
 1862 0ad2 FB70     		strb	r3, [r7, #3]
 665:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 666:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1863              		.loc 1 666 0
 1864 0ad4 7A68     		ldr	r2, [r7, #4]
 1865 0ad6 194B     		ldr	r3, .L112
 1866 0ad8 9A42     		cmp	r2, r3
 1867 0ada 0CD0     		beq	.L108
 1868              		.loc 1 666 0 is_stmt 0 discriminator 1
 1869 0adc 7A68     		ldr	r2, [r7, #4]
 1870 0ade 184B     		ldr	r3, .L112+4
 1871 0ae0 9A42     		cmp	r2, r3
 1872 0ae2 08D0     		beq	.L108
 1873              		.loc 1 666 0 discriminator 2
 1874 0ae4 7A68     		ldr	r2, [r7, #4]
 1875 0ae6 174B     		ldr	r3, .L112+8
 1876 0ae8 9A42     		cmp	r2, r3
 1877 0aea 04D0     		beq	.L108
 1878              		.loc 1 666 0 discriminator 3
 1879 0aec 1648     		ldr	r0, .L112+12
 1880 0aee 40F29A21 		movw	r1, #666
 1881 0af2 FFF7FEFF 		bl	assert_failed
 1882              	.L108:
 667:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1883              		.loc 1 667 0 is_stmt 1
 1884 0af6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1885 0af8 002B     		cmp	r3, #0
 1886 0afa 07D0     		beq	.L109
 1887              		.loc 1 667 0 is_stmt 0 discriminator 1
 1888 0afc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1889 0afe 012B     		cmp	r3, #1
 1890 0b00 04D0     		beq	.L109
 1891              		.loc 1 667 0 discriminator 2
 1892 0b02 1148     		ldr	r0, .L112+12
 1893 0b04 40F29B21 		movw	r1, #667
 1894 0b08 FFF7FEFF 		bl	assert_failed
 1895              	.L109:
 668:../SPL/src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1896              		.loc 1 668 0 is_stmt 1
 1897 0b0c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1898 0b0e 002B     		cmp	r3, #0
 1899 0b10 08D0     		beq	.L110
 669:../SPL/src/stm32f10x_spi.c ****   {
 670:../SPL/src/stm32f10x_spi.c ****     /* Enable the selected SPI CRC calculation */
 671:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 |= CR1_CRCEN_Set;
 1900              		.loc 1 671 0
 1901 0b12 7B68     		ldr	r3, [r7, #4]
 1902 0b14 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1903 0b16 9BB2     		uxth	r3, r3
 1904 0b18 43F40053 		orr	r3, r3, #8192
 1905 0b1c 9AB2     		uxth	r2, r3
 1906 0b1e 7B68     		ldr	r3, [r7, #4]
 1907 0b20 1A80     		strh	r2, [r3, #0]	@ movhi
 1908 0b22 07E0     		b	.L107
 1909              	.L110:
 672:../SPL/src/stm32f10x_spi.c ****   }
 673:../SPL/src/stm32f10x_spi.c ****   else
 674:../SPL/src/stm32f10x_spi.c ****   {
 675:../SPL/src/stm32f10x_spi.c ****     /* Disable the selected SPI CRC calculation */
 676:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 &= CR1_CRCEN_Reset;
 1910              		.loc 1 676 0
 1911 0b24 7B68     		ldr	r3, [r7, #4]
 1912 0b26 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1913 0b28 9BB2     		uxth	r3, r3
 1914 0b2a 23F40053 		bic	r3, r3, #8192
 1915 0b2e 9AB2     		uxth	r2, r3
 1916 0b30 7B68     		ldr	r3, [r7, #4]
 1917 0b32 1A80     		strh	r2, [r3, #0]	@ movhi
 1918              	.L107:
 677:../SPL/src/stm32f10x_spi.c ****   }
 678:../SPL/src/stm32f10x_spi.c **** }
 1919              		.loc 1 678 0
 1920 0b34 07F10807 		add	r7, r7, #8
 1921 0b38 BD46     		mov	sp, r7
 1922 0b3a 80BD     		pop	{r7, pc}
 1923              	.L113:
 1924              		.align	2
 1925              	.L112:
 1926 0b3c 00300140 		.word	1073819648
 1927 0b40 00380040 		.word	1073756160
 1928 0b44 003C0040 		.word	1073757184
 1929 0b48 00000000 		.word	.LC0
 1930              		.cfi_endproc
 1931              	.LFE44:
 1933              		.align	2
 1934              		.global	SPI_GetCRC
 1935              		.thumb
 1936              		.thumb_func
 1938              	SPI_GetCRC:
 1939              	.LFB45:
 679:../SPL/src/stm32f10x_spi.c **** 
 680:../SPL/src/stm32f10x_spi.c **** /**
 681:../SPL/src/stm32f10x_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 682:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 683:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 684:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 685:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_CRC_Tx: Selects Tx CRC register
 686:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_CRC_Rx: Selects Rx CRC register
 687:../SPL/src/stm32f10x_spi.c ****   * @retval The selected CRC register value..
 688:../SPL/src/stm32f10x_spi.c ****   */
 689:../SPL/src/stm32f10x_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 690:../SPL/src/stm32f10x_spi.c **** {
 1940              		.loc 1 690 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 16
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0b4c 80B5     		push	{r7, lr}
 1945              	.LCFI48:
 1946              		.cfi_def_cfa_offset 8
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0b4e 84B0     		sub	sp, sp, #16
 1950              	.LCFI49:
 1951              		.cfi_def_cfa_offset 24
 1952 0b50 00AF     		add	r7, sp, #0
 1953              	.LCFI50:
 1954              		.cfi_def_cfa_register 7
 1955 0b52 7860     		str	r0, [r7, #4]
 1956 0b54 0B46     		mov	r3, r1
 1957 0b56 FB70     		strb	r3, [r7, #3]
 691:../SPL/src/stm32f10x_spi.c ****   uint16_t crcreg = 0;
 1958              		.loc 1 691 0
 1959 0b58 4FF00003 		mov	r3, #0
 1960 0b5c FB81     		strh	r3, [r7, #14]	@ movhi
 692:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 693:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 1961              		.loc 1 693 0
 1962 0b5e 7A68     		ldr	r2, [r7, #4]
 1963 0b60 154B     		ldr	r3, .L120
 1964 0b62 9A42     		cmp	r2, r3
 1965 0b64 0CD0     		beq	.L115
 1966              		.loc 1 693 0 is_stmt 0 discriminator 1
 1967 0b66 7A68     		ldr	r2, [r7, #4]
 1968 0b68 144B     		ldr	r3, .L120+4
 1969 0b6a 9A42     		cmp	r2, r3
 1970 0b6c 08D0     		beq	.L115
 1971              		.loc 1 693 0 discriminator 2
 1972 0b6e 7A68     		ldr	r2, [r7, #4]
 1973 0b70 134B     		ldr	r3, .L120+8
 1974 0b72 9A42     		cmp	r2, r3
 1975 0b74 04D0     		beq	.L115
 1976              		.loc 1 693 0 discriminator 3
 1977 0b76 1348     		ldr	r0, .L120+12
 1978 0b78 40F2B521 		movw	r1, #693
 1979 0b7c FFF7FEFF 		bl	assert_failed
 1980              	.L115:
 694:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 1981              		.loc 1 694 0 is_stmt 1
 1982 0b80 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1983 0b82 002B     		cmp	r3, #0
 1984 0b84 07D0     		beq	.L116
 1985              		.loc 1 694 0 is_stmt 0 discriminator 1
 1986 0b86 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1987 0b88 012B     		cmp	r3, #1
 1988 0b8a 04D0     		beq	.L116
 1989              		.loc 1 694 0 discriminator 2
 1990 0b8c 0D48     		ldr	r0, .L120+12
 1991 0b8e 40F2B621 		movw	r1, #694
 1992 0b92 FFF7FEFF 		bl	assert_failed
 1993              	.L116:
 695:../SPL/src/stm32f10x_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1994              		.loc 1 695 0 is_stmt 1
 1995 0b96 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1996 0b98 012B     		cmp	r3, #1
 1997 0b9a 03D0     		beq	.L117
 696:../SPL/src/stm32f10x_spi.c ****   {
 697:../SPL/src/stm32f10x_spi.c ****     /* Get the Tx CRC register */
 698:../SPL/src/stm32f10x_spi.c ****     crcreg = SPIx->TXCRCR;
 1998              		.loc 1 698 0
 1999 0b9c 7B68     		ldr	r3, [r7, #4]
 2000 0b9e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2001 0ba0 FB81     		strh	r3, [r7, #14]	@ movhi
 2002 0ba2 02E0     		b	.L118
 2003              	.L117:
 699:../SPL/src/stm32f10x_spi.c ****   }
 700:../SPL/src/stm32f10x_spi.c ****   else
 701:../SPL/src/stm32f10x_spi.c ****   {
 702:../SPL/src/stm32f10x_spi.c ****     /* Get the Rx CRC register */
 703:../SPL/src/stm32f10x_spi.c ****     crcreg = SPIx->RXCRCR;
 2004              		.loc 1 703 0
 2005 0ba4 7B68     		ldr	r3, [r7, #4]
 2006 0ba6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2007 0ba8 FB81     		strh	r3, [r7, #14]	@ movhi
 2008              	.L118:
 704:../SPL/src/stm32f10x_spi.c ****   }
 705:../SPL/src/stm32f10x_spi.c ****   /* Return the selected CRC register */
 706:../SPL/src/stm32f10x_spi.c ****   return crcreg;
 2009              		.loc 1 706 0
 2010 0baa FB89     		ldrh	r3, [r7, #14]
 707:../SPL/src/stm32f10x_spi.c **** }
 2011              		.loc 1 707 0
 2012 0bac 1846     		mov	r0, r3
 2013 0bae 07F11007 		add	r7, r7, #16
 2014 0bb2 BD46     		mov	sp, r7
 2015 0bb4 80BD     		pop	{r7, pc}
 2016              	.L121:
 2017 0bb6 00BF     		.align	2
 2018              	.L120:
 2019 0bb8 00300140 		.word	1073819648
 2020 0bbc 00380040 		.word	1073756160
 2021 0bc0 003C0040 		.word	1073757184
 2022 0bc4 00000000 		.word	.LC0
 2023              		.cfi_endproc
 2024              	.LFE45:
 2026              		.align	2
 2027              		.global	SPI_GetCRCPolynomial
 2028              		.thumb
 2029              		.thumb_func
 2031              	SPI_GetCRCPolynomial:
 2032              	.LFB46:
 708:../SPL/src/stm32f10x_spi.c **** 
 709:../SPL/src/stm32f10x_spi.c **** /**
 710:../SPL/src/stm32f10x_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 711:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 712:../SPL/src/stm32f10x_spi.c ****   * @retval The CRC Polynomial register value.
 713:../SPL/src/stm32f10x_spi.c ****   */
 714:../SPL/src/stm32f10x_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 715:../SPL/src/stm32f10x_spi.c **** {
 2033              		.loc 1 715 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 8
 2036              		@ frame_needed = 1, uses_anonymous_args = 0
 2037 0bc8 80B5     		push	{r7, lr}
 2038              	.LCFI51:
 2039              		.cfi_def_cfa_offset 8
 2040              		.cfi_offset 7, -8
 2041              		.cfi_offset 14, -4
 2042 0bca 82B0     		sub	sp, sp, #8
 2043              	.LCFI52:
 2044              		.cfi_def_cfa_offset 16
 2045 0bcc 00AF     		add	r7, sp, #0
 2046              	.LCFI53:
 2047              		.cfi_def_cfa_register 7
 2048 0bce 7860     		str	r0, [r7, #4]
 716:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 717:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 2049              		.loc 1 717 0
 2050 0bd0 7A68     		ldr	r2, [r7, #4]
 2051 0bd2 0C4B     		ldr	r3, .L125
 2052 0bd4 9A42     		cmp	r2, r3
 2053 0bd6 0CD0     		beq	.L123
 2054              		.loc 1 717 0 is_stmt 0 discriminator 1
 2055 0bd8 7A68     		ldr	r2, [r7, #4]
 2056 0bda 0B4B     		ldr	r3, .L125+4
 2057 0bdc 9A42     		cmp	r2, r3
 2058 0bde 08D0     		beq	.L123
 2059              		.loc 1 717 0 discriminator 2
 2060 0be0 7A68     		ldr	r2, [r7, #4]
 2061 0be2 0A4B     		ldr	r3, .L125+8
 2062 0be4 9A42     		cmp	r2, r3
 2063 0be6 04D0     		beq	.L123
 2064              		.loc 1 717 0 discriminator 3
 2065 0be8 0948     		ldr	r0, .L125+12
 2066 0bea 40F2CD21 		movw	r1, #717
 2067 0bee FFF7FEFF 		bl	assert_failed
 2068              	.L123:
 718:../SPL/src/stm32f10x_spi.c ****   
 719:../SPL/src/stm32f10x_spi.c ****   /* Return the CRC polynomial register */
 720:../SPL/src/stm32f10x_spi.c ****   return SPIx->CRCPR;
 2069              		.loc 1 720 0 is_stmt 1
 2070 0bf2 7B68     		ldr	r3, [r7, #4]
 2071 0bf4 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 2072 0bf6 9BB2     		uxth	r3, r3
 721:../SPL/src/stm32f10x_spi.c **** }
 2073              		.loc 1 721 0
 2074 0bf8 1846     		mov	r0, r3
 2075 0bfa 07F10807 		add	r7, r7, #8
 2076 0bfe BD46     		mov	sp, r7
 2077 0c00 80BD     		pop	{r7, pc}
 2078              	.L126:
 2079 0c02 00BF     		.align	2
 2080              	.L125:
 2081 0c04 00300140 		.word	1073819648
 2082 0c08 00380040 		.word	1073756160
 2083 0c0c 003C0040 		.word	1073757184
 2084 0c10 00000000 		.word	.LC0
 2085              		.cfi_endproc
 2086              	.LFE46:
 2088              		.align	2
 2089              		.global	SPI_BiDirectionalLineConfig
 2090              		.thumb
 2091              		.thumb_func
 2093              	SPI_BiDirectionalLineConfig:
 2094              	.LFB47:
 722:../SPL/src/stm32f10x_spi.c **** 
 723:../SPL/src/stm32f10x_spi.c **** /**
 724:../SPL/src/stm32f10x_spi.c ****   * @brief  Selects the data transfer direction in bi-directional mode for the specified SPI.
 725:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 726:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bi-directional mode. 
 727:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 728:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_Direction_Tx: Selects Tx transmission direction
 729:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_Direction_Rx: Selects Rx receive direction
 730:../SPL/src/stm32f10x_spi.c ****   * @retval None
 731:../SPL/src/stm32f10x_spi.c ****   */
 732:../SPL/src/stm32f10x_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 733:../SPL/src/stm32f10x_spi.c **** {
 2095              		.loc 1 733 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 8
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
 2099 0c14 80B5     		push	{r7, lr}
 2100              	.LCFI54:
 2101              		.cfi_def_cfa_offset 8
 2102              		.cfi_offset 7, -8
 2103              		.cfi_offset 14, -4
 2104 0c16 82B0     		sub	sp, sp, #8
 2105              	.LCFI55:
 2106              		.cfi_def_cfa_offset 16
 2107 0c18 00AF     		add	r7, sp, #0
 2108              	.LCFI56:
 2109              		.cfi_def_cfa_register 7
 2110 0c1a 7860     		str	r0, [r7, #4]
 2111 0c1c 0B46     		mov	r3, r1
 2112 0c1e 7B80     		strh	r3, [r7, #2]	@ movhi
 734:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 735:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 2113              		.loc 1 735 0
 2114 0c20 7A68     		ldr	r2, [r7, #4]
 2115 0c22 1B4B     		ldr	r3, .L132
 2116 0c24 9A42     		cmp	r2, r3
 2117 0c26 0CD0     		beq	.L128
 2118              		.loc 1 735 0 is_stmt 0 discriminator 1
 2119 0c28 7A68     		ldr	r2, [r7, #4]
 2120 0c2a 1A4B     		ldr	r3, .L132+4
 2121 0c2c 9A42     		cmp	r2, r3
 2122 0c2e 08D0     		beq	.L128
 2123              		.loc 1 735 0 discriminator 2
 2124 0c30 7A68     		ldr	r2, [r7, #4]
 2125 0c32 194B     		ldr	r3, .L132+8
 2126 0c34 9A42     		cmp	r2, r3
 2127 0c36 04D0     		beq	.L128
 2128              		.loc 1 735 0 discriminator 3
 2129 0c38 1848     		ldr	r0, .L132+12
 2130 0c3a 40F2DF21 		movw	r1, #735
 2131 0c3e FFF7FEFF 		bl	assert_failed
 2132              	.L128:
 736:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 2133              		.loc 1 736 0 is_stmt 1
 2134 0c42 7A88     		ldrh	r2, [r7, #2]
 2135 0c44 4BF6FF73 		movw	r3, #49151
 2136 0c48 9A42     		cmp	r2, r3
 2137 0c4a 08D0     		beq	.L129
 2138              		.loc 1 736 0 is_stmt 0 discriminator 1
 2139 0c4c 7B88     		ldrh	r3, [r7, #2]
 2140 0c4e B3F5804F 		cmp	r3, #16384
 2141 0c52 04D0     		beq	.L129
 2142              		.loc 1 736 0 discriminator 2
 2143 0c54 1148     		ldr	r0, .L132+12
 2144 0c56 4FF43871 		mov	r1, #736
 2145 0c5a FFF7FEFF 		bl	assert_failed
 2146              	.L129:
 737:../SPL/src/stm32f10x_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 2147              		.loc 1 737 0 is_stmt 1
 2148 0c5e 7B88     		ldrh	r3, [r7, #2]
 2149 0c60 B3F5804F 		cmp	r3, #16384
 2150 0c64 08D1     		bne	.L130
 738:../SPL/src/stm32f10x_spi.c ****   {
 739:../SPL/src/stm32f10x_spi.c ****     /* Set the Tx only mode */
 740:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 2151              		.loc 1 740 0
 2152 0c66 7B68     		ldr	r3, [r7, #4]
 2153 0c68 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2154 0c6a 9BB2     		uxth	r3, r3
 2155 0c6c 43F48043 		orr	r3, r3, #16384
 2156 0c70 9AB2     		uxth	r2, r3
 2157 0c72 7B68     		ldr	r3, [r7, #4]
 2158 0c74 1A80     		strh	r2, [r3, #0]	@ movhi
 2159 0c76 07E0     		b	.L127
 2160              	.L130:
 741:../SPL/src/stm32f10x_spi.c ****   }
 742:../SPL/src/stm32f10x_spi.c ****   else
 743:../SPL/src/stm32f10x_spi.c ****   {
 744:../SPL/src/stm32f10x_spi.c ****     /* Set the Rx only mode */
 745:../SPL/src/stm32f10x_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 2161              		.loc 1 745 0
 2162 0c78 7B68     		ldr	r3, [r7, #4]
 2163 0c7a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2164 0c7c 9BB2     		uxth	r3, r3
 2165 0c7e 23F48043 		bic	r3, r3, #16384
 2166 0c82 9AB2     		uxth	r2, r3
 2167 0c84 7B68     		ldr	r3, [r7, #4]
 2168 0c86 1A80     		strh	r2, [r3, #0]	@ movhi
 2169              	.L127:
 746:../SPL/src/stm32f10x_spi.c ****   }
 747:../SPL/src/stm32f10x_spi.c **** }
 2170              		.loc 1 747 0
 2171 0c88 07F10807 		add	r7, r7, #8
 2172 0c8c BD46     		mov	sp, r7
 2173 0c8e 80BD     		pop	{r7, pc}
 2174              	.L133:
 2175              		.align	2
 2176              	.L132:
 2177 0c90 00300140 		.word	1073819648
 2178 0c94 00380040 		.word	1073756160
 2179 0c98 003C0040 		.word	1073757184
 2180 0c9c 00000000 		.word	.LC0
 2181              		.cfi_endproc
 2182              	.LFE47:
 2184              		.align	2
 2185              		.global	SPI_I2S_GetFlagStatus
 2186              		.thumb
 2187              		.thumb_func
 2189              	SPI_I2S_GetFlagStatus:
 2190              	.LFB48:
 748:../SPL/src/stm32f10x_spi.c **** 
 749:../SPL/src/stm32f10x_spi.c **** /**
 750:../SPL/src/stm32f10x_spi.c ****   * @brief  Checks whether the specified SPI/I2S flag is set or not.
 751:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 752:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 753:../SPL/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 754:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI/I2S flag to check. 
 755:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 756:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
 757:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
 758:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_BSY: Busy flag.
 759:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_OVR: Overrun flag.
 760:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_FLAG_MODF: Mode Fault flag.
 761:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_FLAG_CRCERR: CRC Error flag.
 762:../SPL/src/stm32f10x_spi.c ****   *     @arg I2S_FLAG_UDR: Underrun Error flag.
 763:../SPL/src/stm32f10x_spi.c ****   *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
 764:../SPL/src/stm32f10x_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
 765:../SPL/src/stm32f10x_spi.c ****   */
 766:../SPL/src/stm32f10x_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
 767:../SPL/src/stm32f10x_spi.c **** {
 2191              		.loc 1 767 0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 16
 2194              		@ frame_needed = 1, uses_anonymous_args = 0
 2195 0ca0 80B5     		push	{r7, lr}
 2196              	.LCFI57:
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 7, -8
 2199              		.cfi_offset 14, -4
 2200 0ca2 84B0     		sub	sp, sp, #16
 2201              	.LCFI58:
 2202              		.cfi_def_cfa_offset 24
 2203 0ca4 00AF     		add	r7, sp, #0
 2204              	.LCFI59:
 2205              		.cfi_def_cfa_register 7
 2206 0ca6 7860     		str	r0, [r7, #4]
 2207 0ca8 0B46     		mov	r3, r1
 2208 0caa 7B80     		strh	r3, [r7, #2]	@ movhi
 768:../SPL/src/stm32f10x_spi.c ****   FlagStatus bitstatus = RESET;
 2209              		.loc 1 768 0
 2210 0cac 4FF00003 		mov	r3, #0
 2211 0cb0 FB73     		strb	r3, [r7, #15]
 769:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 770:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 2212              		.loc 1 770 0
 2213 0cb2 7A68     		ldr	r2, [r7, #4]
 2214 0cb4 204B     		ldr	r3, .L140
 2215 0cb6 9A42     		cmp	r2, r3
 2216 0cb8 0CD0     		beq	.L135
 2217              		.loc 1 770 0 is_stmt 0 discriminator 1
 2218 0cba 7A68     		ldr	r2, [r7, #4]
 2219 0cbc 1F4B     		ldr	r3, .L140+4
 2220 0cbe 9A42     		cmp	r2, r3
 2221 0cc0 08D0     		beq	.L135
 2222              		.loc 1 770 0 discriminator 2
 2223 0cc2 7A68     		ldr	r2, [r7, #4]
 2224 0cc4 1E4B     		ldr	r3, .L140+8
 2225 0cc6 9A42     		cmp	r2, r3
 2226 0cc8 04D0     		beq	.L135
 2227              		.loc 1 770 0 discriminator 3
 2228 0cca 1E48     		ldr	r0, .L140+12
 2229 0ccc 40F20231 		movw	r1, #770
 2230 0cd0 FFF7FEFF 		bl	assert_failed
 2231              	.L135:
 771:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 2232              		.loc 1 771 0 is_stmt 1
 2233 0cd4 7B88     		ldrh	r3, [r7, #2]
 2234 0cd6 802B     		cmp	r3, #128
 2235 0cd8 19D0     		beq	.L136
 2236              		.loc 1 771 0 is_stmt 0 discriminator 1
 2237 0cda 7B88     		ldrh	r3, [r7, #2]
 2238 0cdc 402B     		cmp	r3, #64
 2239 0cde 16D0     		beq	.L136
 2240              		.loc 1 771 0 discriminator 2
 2241 0ce0 7B88     		ldrh	r3, [r7, #2]
 2242 0ce2 202B     		cmp	r3, #32
 2243 0ce4 13D0     		beq	.L136
 2244              		.loc 1 771 0 discriminator 3
 2245 0ce6 7B88     		ldrh	r3, [r7, #2]
 2246 0ce8 102B     		cmp	r3, #16
 2247 0cea 10D0     		beq	.L136
 2248              		.loc 1 771 0 discriminator 4
 2249 0cec 7B88     		ldrh	r3, [r7, #2]
 2250 0cee 082B     		cmp	r3, #8
 2251 0cf0 0DD0     		beq	.L136
 2252              		.loc 1 771 0 discriminator 5
 2253 0cf2 7B88     		ldrh	r3, [r7, #2]
 2254 0cf4 042B     		cmp	r3, #4
 2255 0cf6 0AD0     		beq	.L136
 2256              		.loc 1 771 0 discriminator 6
 2257 0cf8 7B88     		ldrh	r3, [r7, #2]
 2258 0cfa 022B     		cmp	r3, #2
 2259 0cfc 07D0     		beq	.L136
 2260              		.loc 1 771 0 discriminator 7
 2261 0cfe 7B88     		ldrh	r3, [r7, #2]
 2262 0d00 012B     		cmp	r3, #1
 2263 0d02 04D0     		beq	.L136
 2264              		.loc 1 771 0 discriminator 8
 2265 0d04 0F48     		ldr	r0, .L140+12
 2266 0d06 40F20331 		movw	r1, #771
 2267 0d0a FFF7FEFF 		bl	assert_failed
 2268              	.L136:
 772:../SPL/src/stm32f10x_spi.c ****   /* Check the status of the specified SPI/I2S flag */
 773:../SPL/src/stm32f10x_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 2269              		.loc 1 773 0 is_stmt 1
 2270 0d0e 7B68     		ldr	r3, [r7, #4]
 2271 0d10 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2272 0d12 9AB2     		uxth	r2, r3
 2273 0d14 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2274 0d16 1340     		ands	r3, r3, r2
 2275 0d18 9BB2     		uxth	r3, r3
 2276 0d1a 002B     		cmp	r3, #0
 2277 0d1c 03D0     		beq	.L137
 774:../SPL/src/stm32f10x_spi.c ****   {
 775:../SPL/src/stm32f10x_spi.c ****     /* SPI_I2S_FLAG is set */
 776:../SPL/src/stm32f10x_spi.c ****     bitstatus = SET;
 2278              		.loc 1 776 0
 2279 0d1e 4FF00103 		mov	r3, #1
 2280 0d22 FB73     		strb	r3, [r7, #15]
 2281 0d24 02E0     		b	.L138
 2282              	.L137:
 777:../SPL/src/stm32f10x_spi.c ****   }
 778:../SPL/src/stm32f10x_spi.c ****   else
 779:../SPL/src/stm32f10x_spi.c ****   {
 780:../SPL/src/stm32f10x_spi.c ****     /* SPI_I2S_FLAG is reset */
 781:../SPL/src/stm32f10x_spi.c ****     bitstatus = RESET;
 2283              		.loc 1 781 0
 2284 0d26 4FF00003 		mov	r3, #0
 2285 0d2a FB73     		strb	r3, [r7, #15]
 2286              	.L138:
 782:../SPL/src/stm32f10x_spi.c ****   }
 783:../SPL/src/stm32f10x_spi.c ****   /* Return the SPI_I2S_FLAG status */
 784:../SPL/src/stm32f10x_spi.c ****   return  bitstatus;
 2287              		.loc 1 784 0
 2288 0d2c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 785:../SPL/src/stm32f10x_spi.c **** }
 2289              		.loc 1 785 0
 2290 0d2e 1846     		mov	r0, r3
 2291 0d30 07F11007 		add	r7, r7, #16
 2292 0d34 BD46     		mov	sp, r7
 2293 0d36 80BD     		pop	{r7, pc}
 2294              	.L141:
 2295              		.align	2
 2296              	.L140:
 2297 0d38 00300140 		.word	1073819648
 2298 0d3c 00380040 		.word	1073756160
 2299 0d40 003C0040 		.word	1073757184
 2300 0d44 00000000 		.word	.LC0
 2301              		.cfi_endproc
 2302              	.LFE48:
 2304              		.align	2
 2305              		.global	SPI_I2S_ClearFlag
 2306              		.thumb
 2307              		.thumb_func
 2309              	SPI_I2S_ClearFlag:
 2310              	.LFB49:
 786:../SPL/src/stm32f10x_spi.c **** 
 787:../SPL/src/stm32f10x_spi.c **** /**
 788:../SPL/src/stm32f10x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
 789:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 790:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 791:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
 792:../SPL/src/stm32f10x_spi.c ****   *   This function clears only CRCERR flag.
 793:../SPL/src/stm32f10x_spi.c ****   * @note
 794:../SPL/src/stm32f10x_spi.c ****   *   - OVR (OverRun error) flag is cleared by software sequence: a read 
 795:../SPL/src/stm32f10x_spi.c ****   *     operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
 796:../SPL/src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
 797:../SPL/src/stm32f10x_spi.c ****   *   - UDR (UnderRun error) flag is cleared by a read operation to 
 798:../SPL/src/stm32f10x_spi.c ****   *     SPI_SR register (SPI_I2S_GetFlagStatus()).
 799:../SPL/src/stm32f10x_spi.c ****   *   - MODF (Mode Fault) flag is cleared by software sequence: a read/write 
 800:../SPL/src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
 801:../SPL/src/stm32f10x_spi.c ****   *     write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
 802:../SPL/src/stm32f10x_spi.c ****   * @retval None
 803:../SPL/src/stm32f10x_spi.c ****   */
 804:../SPL/src/stm32f10x_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
 805:../SPL/src/stm32f10x_spi.c **** {
 2311              		.loc 1 805 0
 2312              		.cfi_startproc
 2313              		@ args = 0, pretend = 0, frame = 8
 2314              		@ frame_needed = 1, uses_anonymous_args = 0
 2315 0d48 80B5     		push	{r7, lr}
 2316              	.LCFI60:
 2317              		.cfi_def_cfa_offset 8
 2318              		.cfi_offset 7, -8
 2319              		.cfi_offset 14, -4
 2320 0d4a 82B0     		sub	sp, sp, #8
 2321              	.LCFI61:
 2322              		.cfi_def_cfa_offset 16
 2323 0d4c 00AF     		add	r7, sp, #0
 2324              	.LCFI62:
 2325              		.cfi_def_cfa_register 7
 2326 0d4e 7860     		str	r0, [r7, #4]
 2327 0d50 0B46     		mov	r3, r1
 2328 0d52 7B80     		strh	r3, [r7, #2]	@ movhi
 806:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 807:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 2329              		.loc 1 807 0
 2330 0d54 7A68     		ldr	r2, [r7, #4]
 2331 0d56 114B     		ldr	r3, .L145
 2332 0d58 9A42     		cmp	r2, r3
 2333 0d5a 0CD0     		beq	.L143
 2334              		.loc 1 807 0 is_stmt 0 discriminator 1
 2335 0d5c 7A68     		ldr	r2, [r7, #4]
 2336 0d5e 104B     		ldr	r3, .L145+4
 2337 0d60 9A42     		cmp	r2, r3
 2338 0d62 08D0     		beq	.L143
 2339              		.loc 1 807 0 discriminator 2
 2340 0d64 7A68     		ldr	r2, [r7, #4]
 2341 0d66 0F4B     		ldr	r3, .L145+8
 2342 0d68 9A42     		cmp	r2, r3
 2343 0d6a 04D0     		beq	.L143
 2344              		.loc 1 807 0 discriminator 3
 2345 0d6c 0E48     		ldr	r0, .L145+12
 2346 0d6e 40F22731 		movw	r1, #807
 2347 0d72 FFF7FEFF 		bl	assert_failed
 2348              	.L143:
 808:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 2349              		.loc 1 808 0 is_stmt 1
 2350 0d76 7B88     		ldrh	r3, [r7, #2]
 2351 0d78 102B     		cmp	r3, #16
 2352 0d7a 04D0     		beq	.L144
 2353              		.loc 1 808 0 is_stmt 0 discriminator 1
 2354 0d7c 0A48     		ldr	r0, .L145+12
 2355 0d7e 4FF44A71 		mov	r1, #808
 2356 0d82 FFF7FEFF 		bl	assert_failed
 2357              	.L144:
 809:../SPL/src/stm32f10x_spi.c ****     
 810:../SPL/src/stm32f10x_spi.c ****     /* Clear the selected SPI CRC Error (CRCERR) flag */
 811:../SPL/src/stm32f10x_spi.c ****     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 2358              		.loc 1 811 0 is_stmt 1
 2359 0d86 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2360 0d88 6FEA0303 		mvn	r3, r3
 2361 0d8c 9AB2     		uxth	r2, r3
 2362 0d8e 7B68     		ldr	r3, [r7, #4]
 2363 0d90 1A81     		strh	r2, [r3, #8]	@ movhi
 812:../SPL/src/stm32f10x_spi.c **** }
 2364              		.loc 1 812 0
 2365 0d92 07F10807 		add	r7, r7, #8
 2366 0d96 BD46     		mov	sp, r7
 2367 0d98 80BD     		pop	{r7, pc}
 2368              	.L146:
 2369 0d9a 00BF     		.align	2
 2370              	.L145:
 2371 0d9c 00300140 		.word	1073819648
 2372 0da0 00380040 		.word	1073756160
 2373 0da4 003C0040 		.word	1073757184
 2374 0da8 00000000 		.word	.LC0
 2375              		.cfi_endproc
 2376              	.LFE49:
 2378              		.align	2
 2379              		.global	SPI_I2S_GetITStatus
 2380              		.thumb
 2381              		.thumb_func
 2383              	SPI_I2S_GetITStatus:
 2384              	.LFB50:
 813:../SPL/src/stm32f10x_spi.c **** 
 814:../SPL/src/stm32f10x_spi.c **** /**
 815:../SPL/src/stm32f10x_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
 816:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 817:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 818:../SPL/src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 819:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to check. 
 820:../SPL/src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 821:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
 822:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
 823:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_OVR: Overrun interrupt.
 824:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_IT_MODF: Mode Fault interrupt.
 825:../SPL/src/stm32f10x_spi.c ****   *     @arg SPI_IT_CRCERR: CRC Error interrupt.
 826:../SPL/src/stm32f10x_spi.c ****   *     @arg I2S_IT_UDR: Underrun Error interrupt.
 827:../SPL/src/stm32f10x_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
 828:../SPL/src/stm32f10x_spi.c ****   */
 829:../SPL/src/stm32f10x_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 830:../SPL/src/stm32f10x_spi.c **** {
 2385              		.loc 1 830 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 16
 2388              		@ frame_needed = 1, uses_anonymous_args = 0
 2389 0dac 80B5     		push	{r7, lr}
 2390              	.LCFI63:
 2391              		.cfi_def_cfa_offset 8
 2392              		.cfi_offset 7, -8
 2393              		.cfi_offset 14, -4
 2394 0dae 84B0     		sub	sp, sp, #16
 2395              	.LCFI64:
 2396              		.cfi_def_cfa_offset 24
 2397 0db0 00AF     		add	r7, sp, #0
 2398              	.LCFI65:
 2399              		.cfi_def_cfa_register 7
 2400 0db2 7860     		str	r0, [r7, #4]
 2401 0db4 0B46     		mov	r3, r1
 2402 0db6 FB70     		strb	r3, [r7, #3]
 831:../SPL/src/stm32f10x_spi.c ****   ITStatus bitstatus = RESET;
 2403              		.loc 1 831 0
 2404 0db8 4FF00003 		mov	r3, #0
 2405 0dbc FB73     		strb	r3, [r7, #15]
 832:../SPL/src/stm32f10x_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 2406              		.loc 1 832 0
 2407 0dbe 4FF00003 		mov	r3, #0
 2408 0dc2 BB81     		strh	r3, [r7, #12]	@ movhi
 2409 0dc4 4FF00003 		mov	r3, #0
 2410 0dc8 7B81     		strh	r3, [r7, #10]	@ movhi
 2411 0dca 4FF00003 		mov	r3, #0
 2412 0dce 3B81     		strh	r3, [r7, #8]	@ movhi
 833:../SPL/src/stm32f10x_spi.c **** 
 834:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 835:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 2413              		.loc 1 835 0
 2414 0dd0 7A68     		ldr	r2, [r7, #4]
 2415 0dd2 2C4B     		ldr	r3, .L153
 2416 0dd4 9A42     		cmp	r2, r3
 2417 0dd6 0CD0     		beq	.L148
 2418              		.loc 1 835 0 is_stmt 0 discriminator 1
 2419 0dd8 7A68     		ldr	r2, [r7, #4]
 2420 0dda 2B4B     		ldr	r3, .L153+4
 2421 0ddc 9A42     		cmp	r2, r3
 2422 0dde 08D0     		beq	.L148
 2423              		.loc 1 835 0 discriminator 2
 2424 0de0 7A68     		ldr	r2, [r7, #4]
 2425 0de2 2A4B     		ldr	r3, .L153+8
 2426 0de4 9A42     		cmp	r2, r3
 2427 0de6 04D0     		beq	.L148
 2428              		.loc 1 835 0 discriminator 3
 2429 0de8 2948     		ldr	r0, .L153+12
 2430 0dea 40F24331 		movw	r1, #835
 2431 0dee FFF7FEFF 		bl	assert_failed
 2432              	.L148:
 836:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 2433              		.loc 1 836 0 is_stmt 1
 2434 0df2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2435 0df4 602B     		cmp	r3, #96
 2436 0df6 13D0     		beq	.L149
 2437              		.loc 1 836 0 is_stmt 0 discriminator 1
 2438 0df8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2439 0dfa 712B     		cmp	r3, #113
 2440 0dfc 10D0     		beq	.L149
 2441              		.loc 1 836 0 discriminator 2
 2442 0dfe FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2443 0e00 532B     		cmp	r3, #83
 2444 0e02 0DD0     		beq	.L149
 2445              		.loc 1 836 0 discriminator 3
 2446 0e04 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2447 0e06 542B     		cmp	r3, #84
 2448 0e08 0AD0     		beq	.L149
 2449              		.loc 1 836 0 discriminator 4
 2450 0e0a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2451 0e0c 552B     		cmp	r3, #85
 2452 0e0e 07D0     		beq	.L149
 2453              		.loc 1 836 0 discriminator 5
 2454 0e10 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2455 0e12 562B     		cmp	r3, #86
 2456 0e14 04D0     		beq	.L149
 2457              		.loc 1 836 0 discriminator 6
 2458 0e16 1E48     		ldr	r0, .L153+12
 2459 0e18 4FF45171 		mov	r1, #836
 2460 0e1c FFF7FEFF 		bl	assert_failed
 2461              	.L149:
 837:../SPL/src/stm32f10x_spi.c **** 
 838:../SPL/src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT index */
 839:../SPL/src/stm32f10x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 2462              		.loc 1 839 0 is_stmt 1
 2463 0e20 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2464 0e22 03F00F03 		and	r3, r3, #15
 2465 0e26 4FF00102 		mov	r2, #1
 2466 0e2a 02FA03F3 		lsl	r3, r2, r3
 2467 0e2e BB81     		strh	r3, [r7, #12]	@ movhi
 840:../SPL/src/stm32f10x_spi.c **** 
 841:../SPL/src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT mask */
 842:../SPL/src/stm32f10x_spi.c ****   itmask = SPI_I2S_IT >> 4;
 2468              		.loc 1 842 0
 2469 0e30 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2470 0e32 4FEA1313 		lsr	r3, r3, #4
 2471 0e36 DBB2     		uxtb	r3, r3
 2472 0e38 7B81     		strh	r3, [r7, #10]	@ movhi
 843:../SPL/src/stm32f10x_spi.c **** 
 844:../SPL/src/stm32f10x_spi.c ****   /* Set the IT mask */
 845:../SPL/src/stm32f10x_spi.c ****   itmask = 0x01 << itmask;
 2473              		.loc 1 845 0
 2474 0e3a 7B89     		ldrh	r3, [r7, #10]
 2475 0e3c 4FF00102 		mov	r2, #1
 2476 0e40 02FA03F3 		lsl	r3, r2, r3
 2477 0e44 7B81     		strh	r3, [r7, #10]	@ movhi
 846:../SPL/src/stm32f10x_spi.c **** 
 847:../SPL/src/stm32f10x_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
 848:../SPL/src/stm32f10x_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 2478              		.loc 1 848 0
 2479 0e46 7B68     		ldr	r3, [r7, #4]
 2480 0e48 9B88     		ldrh	r3, [r3, #4]	@ movhi
 2481 0e4a 9AB2     		uxth	r2, r3
 2482 0e4c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2483 0e4e 1340     		ands	r3, r3, r2
 2484 0e50 3B81     		strh	r3, [r7, #8]	@ movhi
 849:../SPL/src/stm32f10x_spi.c **** 
 850:../SPL/src/stm32f10x_spi.c ****   /* Check the status of the specified SPI/I2S interrupt */
 851:../SPL/src/stm32f10x_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 2485              		.loc 1 851 0
 2486 0e52 7B68     		ldr	r3, [r7, #4]
 2487 0e54 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2488 0e56 9AB2     		uxth	r2, r3
 2489 0e58 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2490 0e5a 1340     		ands	r3, r3, r2
 2491 0e5c 9BB2     		uxth	r3, r3
 2492 0e5e 002B     		cmp	r3, #0
 2493 0e60 06D0     		beq	.L150
 2494              		.loc 1 851 0 is_stmt 0 discriminator 1
 2495 0e62 3B89     		ldrh	r3, [r7, #8]
 2496 0e64 002B     		cmp	r3, #0
 2497 0e66 03D0     		beq	.L150
 852:../SPL/src/stm32f10x_spi.c ****   {
 853:../SPL/src/stm32f10x_spi.c ****     /* SPI_I2S_IT is set */
 854:../SPL/src/stm32f10x_spi.c ****     bitstatus = SET;
 2498              		.loc 1 854 0 is_stmt 1
 2499 0e68 4FF00103 		mov	r3, #1
 2500 0e6c FB73     		strb	r3, [r7, #15]
 2501 0e6e 02E0     		b	.L151
 2502              	.L150:
 855:../SPL/src/stm32f10x_spi.c ****   }
 856:../SPL/src/stm32f10x_spi.c ****   else
 857:../SPL/src/stm32f10x_spi.c ****   {
 858:../SPL/src/stm32f10x_spi.c ****     /* SPI_I2S_IT is reset */
 859:../SPL/src/stm32f10x_spi.c ****     bitstatus = RESET;
 2503              		.loc 1 859 0
 2504 0e70 4FF00003 		mov	r3, #0
 2505 0e74 FB73     		strb	r3, [r7, #15]
 2506              	.L151:
 860:../SPL/src/stm32f10x_spi.c ****   }
 861:../SPL/src/stm32f10x_spi.c ****   /* Return the SPI_I2S_IT status */
 862:../SPL/src/stm32f10x_spi.c ****   return bitstatus;
 2507              		.loc 1 862 0
 2508 0e76 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 863:../SPL/src/stm32f10x_spi.c **** }
 2509              		.loc 1 863 0
 2510 0e78 1846     		mov	r0, r3
 2511 0e7a 07F11007 		add	r7, r7, #16
 2512 0e7e BD46     		mov	sp, r7
 2513 0e80 80BD     		pop	{r7, pc}
 2514              	.L154:
 2515 0e82 00BF     		.align	2
 2516              	.L153:
 2517 0e84 00300140 		.word	1073819648
 2518 0e88 00380040 		.word	1073756160
 2519 0e8c 003C0040 		.word	1073757184
 2520 0e90 00000000 		.word	.LC0
 2521              		.cfi_endproc
 2522              	.LFE50:
 2524              		.align	2
 2525              		.global	SPI_I2S_ClearITPendingBit
 2526              		.thumb
 2527              		.thumb_func
 2529              	SPI_I2S_ClearITPendingBit:
 2530              	.LFB51:
 864:../SPL/src/stm32f10x_spi.c **** 
 865:../SPL/src/stm32f10x_spi.c **** /**
 866:../SPL/src/stm32f10x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
 867:../SPL/src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 868:../SPL/src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 869:../SPL/src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
 870:../SPL/src/stm32f10x_spi.c ****   *   This function clears only CRCERR interrupt pending bit.   
 871:../SPL/src/stm32f10x_spi.c ****   * @note
 872:../SPL/src/stm32f10x_spi.c ****   *   - OVR (OverRun Error) interrupt pending bit is cleared by software 
 873:../SPL/src/stm32f10x_spi.c ****   *     sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
 874:../SPL/src/stm32f10x_spi.c ****   *     followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
 875:../SPL/src/stm32f10x_spi.c ****   *   - UDR (UnderRun Error) interrupt pending bit is cleared by a read 
 876:../SPL/src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetITStatus()).
 877:../SPL/src/stm32f10x_spi.c ****   *   - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
 878:../SPL/src/stm32f10x_spi.c ****   *     a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
 879:../SPL/src/stm32f10x_spi.c ****   *     followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
 880:../SPL/src/stm32f10x_spi.c ****   *     the SPI).
 881:../SPL/src/stm32f10x_spi.c ****   * @retval None
 882:../SPL/src/stm32f10x_spi.c ****   */
 883:../SPL/src/stm32f10x_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 884:../SPL/src/stm32f10x_spi.c **** {
 2531              		.loc 1 884 0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 16
 2534              		@ frame_needed = 1, uses_anonymous_args = 0
 2535 0e94 80B5     		push	{r7, lr}
 2536              	.LCFI66:
 2537              		.cfi_def_cfa_offset 8
 2538              		.cfi_offset 7, -8
 2539              		.cfi_offset 14, -4
 2540 0e96 84B0     		sub	sp, sp, #16
 2541              	.LCFI67:
 2542              		.cfi_def_cfa_offset 24
 2543 0e98 00AF     		add	r7, sp, #0
 2544              	.LCFI68:
 2545              		.cfi_def_cfa_register 7
 2546 0e9a 7860     		str	r0, [r7, #4]
 2547 0e9c 0B46     		mov	r3, r1
 2548 0e9e FB70     		strb	r3, [r7, #3]
 885:../SPL/src/stm32f10x_spi.c ****   uint16_t itpos = 0;
 2549              		.loc 1 885 0
 2550 0ea0 4FF00003 		mov	r3, #0
 2551 0ea4 FB81     		strh	r3, [r7, #14]	@ movhi
 886:../SPL/src/stm32f10x_spi.c ****   /* Check the parameters */
 887:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 2552              		.loc 1 887 0
 2553 0ea6 7A68     		ldr	r2, [r7, #4]
 2554 0ea8 144B     		ldr	r3, .L158
 2555 0eaa 9A42     		cmp	r2, r3
 2556 0eac 0CD0     		beq	.L156
 2557              		.loc 1 887 0 is_stmt 0 discriminator 1
 2558 0eae 7A68     		ldr	r2, [r7, #4]
 2559 0eb0 134B     		ldr	r3, .L158+4
 2560 0eb2 9A42     		cmp	r2, r3
 2561 0eb4 08D0     		beq	.L156
 2562              		.loc 1 887 0 discriminator 2
 2563 0eb6 7A68     		ldr	r2, [r7, #4]
 2564 0eb8 124B     		ldr	r3, .L158+8
 2565 0eba 9A42     		cmp	r2, r3
 2566 0ebc 04D0     		beq	.L156
 2567              		.loc 1 887 0 discriminator 3
 2568 0ebe 1248     		ldr	r0, .L158+12
 2569 0ec0 40F27731 		movw	r1, #887
 2570 0ec4 FFF7FEFF 		bl	assert_failed
 2571              	.L156:
 888:../SPL/src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
 2572              		.loc 1 888 0 is_stmt 1
 2573 0ec8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2574 0eca 542B     		cmp	r3, #84
 2575 0ecc 04D0     		beq	.L157
 2576              		.loc 1 888 0 is_stmt 0 discriminator 1
 2577 0ece 0E48     		ldr	r0, .L158+12
 2578 0ed0 4FF45E71 		mov	r1, #888
 2579 0ed4 FFF7FEFF 		bl	assert_failed
 2580              	.L157:
 889:../SPL/src/stm32f10x_spi.c **** 
 890:../SPL/src/stm32f10x_spi.c ****   /* Get the SPI IT index */
 891:../SPL/src/stm32f10x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 2581              		.loc 1 891 0 is_stmt 1
 2582 0ed8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2583 0eda 03F00F03 		and	r3, r3, #15
 2584 0ede 4FF00102 		mov	r2, #1
 2585 0ee2 02FA03F3 		lsl	r3, r2, r3
 2586 0ee6 FB81     		strh	r3, [r7, #14]	@ movhi
 892:../SPL/src/stm32f10x_spi.c **** 
 893:../SPL/src/stm32f10x_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
 894:../SPL/src/stm32f10x_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 2587              		.loc 1 894 0
 2588 0ee8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2589 0eea 6FEA0303 		mvn	r3, r3
 2590 0eee 9AB2     		uxth	r2, r3
 2591 0ef0 7B68     		ldr	r3, [r7, #4]
 2592 0ef2 1A81     		strh	r2, [r3, #8]	@ movhi
 895:../SPL/src/stm32f10x_spi.c **** }
 2593              		.loc 1 895 0
 2594 0ef4 07F11007 		add	r7, r7, #16
 2595 0ef8 BD46     		mov	sp, r7
 2596 0efa 80BD     		pop	{r7, pc}
 2597              	.L159:
 2598              		.align	2
 2599              	.L158:
 2600 0efc 00300140 		.word	1073819648
 2601 0f00 00380040 		.word	1073756160
 2602 0f04 003C0040 		.word	1073757184
 2603 0f08 00000000 		.word	.LC0
 2604              		.cfi_endproc
 2605              	.LFE51:
 2607              	.Letext0:
 2608              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2609              		.file 3 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/stm32f10x.h"
 2610              		.file 4 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\SPL\\inc/stm32f10x_rcc.h"
 2611              		.file 5 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\SPL\\inc/stm32f10x_spi.h"
 2612              		.file 6 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_spi.c
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:19     .rodata:00000000 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:23     .text:00000000 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:28     .text:00000000 SPI_I2S_DeInit
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:118    .text:00000098 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:125    .text:000000a8 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:130    .text:000000a8 SPI_Init
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:420    .text:00000280 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:427    .text:00000290 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:432    .text:00000290 I2S_Init
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:803    .text:00000520 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:811    .text:00000534 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:816    .text:00000534 SPI_StructInit
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:883    .text:00000590 I2S_StructInit
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:938    .text:000005d4 SPI_Cmd
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1021   .text:00000648 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1028   .text:00000658 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1033   .text:00000658 I2S_Cmd
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1111   .text:000006c4 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1117   .text:000006d0 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1122   .text:000006d0 SPI_I2S_ITConfig
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1243   .text:0000078c $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1250   .text:0000079c $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1255   .text:0000079c SPI_I2S_DMACmd
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1360   .text:00000838 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1367   .text:00000848 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1372   .text:00000848 SPI_I2S_SendData
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1423   .text:00000884 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1430   .text:00000894 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1435   .text:00000894 SPI_I2S_ReceiveData
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1485   .text:000008d0 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1492   .text:000008e0 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1497   .text:000008e0 SPI_NSSInternalSoftwareConfig
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1582   .text:00000960 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1589   .text:00000970 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1594   .text:00000970 SPI_SSOutputCmd
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1677   .text:000009e4 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1684   .text:000009f4 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1689   .text:000009f4 SPI_DataSizeConfig
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1766   .text:00000a64 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1773   .text:00000a74 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1778   .text:00000a74 SPI_TransmitCRC
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1831   .text:00000ab8 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1838   .text:00000ac8 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1843   .text:00000ac8 SPI_CalculateCRC
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1926   .text:00000b3c $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1933   .text:00000b4c $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:1938   .text:00000b4c SPI_GetCRC
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2019   .text:00000bb8 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2026   .text:00000bc8 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2031   .text:00000bc8 SPI_GetCRCPolynomial
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2081   .text:00000c04 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2088   .text:00000c14 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2093   .text:00000c14 SPI_BiDirectionalLineConfig
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2177   .text:00000c90 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2184   .text:00000ca0 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2189   .text:00000ca0 SPI_I2S_GetFlagStatus
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2297   .text:00000d38 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2304   .text:00000d48 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2309   .text:00000d48 SPI_I2S_ClearFlag
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2371   .text:00000d9c $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2378   .text:00000dac $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2383   .text:00000dac SPI_I2S_GetITStatus
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2517   .text:00000e84 $d
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2524   .text:00000e94 $t
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2529   .text:00000e94 SPI_I2S_ClearITPendingBit
C:\Users\PC108\AppData\Local\Temp\ccdRs6XZ.s:2600   .text:00000efc $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9001f459856fa07d79ce9793bb17c6cd
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_exti.h.56.8b2f216f9ded9d03a9eb42ed6973fc04
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_spi.h.117.5885fcde8f507e1811a76c071013c0c7

UNDEFINED SYMBOLS
assert_failed
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq

   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.align	2
  42              	ADCPrescTable:
  43 0010 02       		.byte	2
  44 0011 04       		.byte	4
  45 0012 06       		.byte	6
  46 0013 08       		.byte	8
  47              		.text
  48              		.align	2
  49              		.global	RCC_DeInit
  50              		.thumb
  51              		.thumb_func
  53              	RCC_DeInit:
  54              	.LFB29:
  55              		.file 1 "../SPL/src/stm32f10x_rcc.c"
   1:../SPL/src/stm32f10x_rcc.c **** /**
   2:../SPL/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../SPL/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../SPL/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_rcc.c ****   * @attention
  10:../SPL/src/stm32f10x_rcc.c ****   *
  11:../SPL/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_rcc.c ****   *
  18:../SPL/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_rcc.c ****   */
  21:../SPL/src/stm32f10x_rcc.c **** 
  22:../SPL/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../SPL/src/stm32f10x_rcc.c **** 
  25:../SPL/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../SPL/src/stm32f10x_rcc.c ****   * @{
  27:../SPL/src/stm32f10x_rcc.c ****   */
  28:../SPL/src/stm32f10x_rcc.c **** 
  29:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../SPL/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../SPL/src/stm32f10x_rcc.c ****   * @{
  32:../SPL/src/stm32f10x_rcc.c ****   */ 
  33:../SPL/src/stm32f10x_rcc.c **** 
  34:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../SPL/src/stm32f10x_rcc.c ****   * @{
  36:../SPL/src/stm32f10x_rcc.c ****   */
  37:../SPL/src/stm32f10x_rcc.c **** 
  38:../SPL/src/stm32f10x_rcc.c **** /**
  39:../SPL/src/stm32f10x_rcc.c ****   * @}
  40:../SPL/src/stm32f10x_rcc.c ****   */
  41:../SPL/src/stm32f10x_rcc.c **** 
  42:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../SPL/src/stm32f10x_rcc.c ****   * @{
  44:../SPL/src/stm32f10x_rcc.c ****   */
  45:../SPL/src/stm32f10x_rcc.c **** 
  46:../SPL/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../SPL/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../SPL/src/stm32f10x_rcc.c **** 
  49:../SPL/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../SPL/src/stm32f10x_rcc.c **** 
  51:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../SPL/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../SPL/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../SPL/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../SPL/src/stm32f10x_rcc.c **** 
  56:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../SPL/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../SPL/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../SPL/src/stm32f10x_rcc.c **** 
  60:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../SPL/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../SPL/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../SPL/src/stm32f10x_rcc.c **** 
  65:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../SPL/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../SPL/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../SPL/src/stm32f10x_rcc.c **** 
  70:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../SPL/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../SPL/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../SPL/src/stm32f10x_rcc.c **** 
  74:../SPL/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../SPL/src/stm32f10x_rcc.c **** 
  76:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../SPL/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../SPL/src/stm32f10x_rcc.c **** 
  79:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../SPL/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../SPL/src/stm32f10x_rcc.c **** #else
  83:../SPL/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../SPL/src/stm32f10x_rcc.c **** 
  87:../SPL/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../SPL/src/stm32f10x_rcc.c **** 
  89:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../SPL/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../SPL/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../SPL/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../SPL/src/stm32f10x_rcc.c **** 
  94:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../SPL/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../SPL/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../SPL/src/stm32f10x_rcc.c **** 
  98:../SPL/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../SPL/src/stm32f10x_rcc.c **** 
 100:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../SPL/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../SPL/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../SPL/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../SPL/src/stm32f10x_rcc.c **** 
 105:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../SPL/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../SPL/src/stm32f10x_rcc.c **** 
 108:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../SPL/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../SPL/src/stm32f10x_rcc.c **** 
 113:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../SPL/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../SPL/src/stm32f10x_rcc.c **** 
 118:../SPL/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../SPL/src/stm32f10x_rcc.c **** 
 120:../SPL/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../SPL/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../SPL/src/stm32f10x_rcc.c **** 
 127:../SPL/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../SPL/src/stm32f10x_rcc.c **** #else
 131:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../SPL/src/stm32f10x_rcc.c **** 
 134:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../SPL/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../SPL/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../SPL/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../SPL/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../SPL/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../SPL/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../SPL/src/stm32f10x_rcc.c **** 
 148:../SPL/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../SPL/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../SPL/src/stm32f10x_rcc.c **** 
 151:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../SPL/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../SPL/src/stm32f10x_rcc.c **** #endif
 156:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../SPL/src/stm32f10x_rcc.c **** 
 162:../SPL/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../SPL/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../SPL/src/stm32f10x_rcc.c **** 
 165:../SPL/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../SPL/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../SPL/src/stm32f10x_rcc.c **** 
 168:../SPL/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../SPL/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../SPL/src/stm32f10x_rcc.c **** 
 171:../SPL/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../SPL/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../SPL/src/stm32f10x_rcc.c **** 
 174:../SPL/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../SPL/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../SPL/src/stm32f10x_rcc.c **** 
 177:../SPL/src/stm32f10x_rcc.c **** /**
 178:../SPL/src/stm32f10x_rcc.c ****   * @}
 179:../SPL/src/stm32f10x_rcc.c ****   */ 
 180:../SPL/src/stm32f10x_rcc.c **** 
 181:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../SPL/src/stm32f10x_rcc.c ****   * @{
 183:../SPL/src/stm32f10x_rcc.c ****   */ 
 184:../SPL/src/stm32f10x_rcc.c **** 
 185:../SPL/src/stm32f10x_rcc.c **** /**
 186:../SPL/src/stm32f10x_rcc.c ****   * @}
 187:../SPL/src/stm32f10x_rcc.c ****   */ 
 188:../SPL/src/stm32f10x_rcc.c **** 
 189:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../SPL/src/stm32f10x_rcc.c ****   * @{
 191:../SPL/src/stm32f10x_rcc.c ****   */ 
 192:../SPL/src/stm32f10x_rcc.c **** 
 193:../SPL/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../SPL/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../SPL/src/stm32f10x_rcc.c **** 
 196:../SPL/src/stm32f10x_rcc.c **** /**
 197:../SPL/src/stm32f10x_rcc.c ****   * @}
 198:../SPL/src/stm32f10x_rcc.c ****   */
 199:../SPL/src/stm32f10x_rcc.c **** 
 200:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../SPL/src/stm32f10x_rcc.c ****   * @{
 202:../SPL/src/stm32f10x_rcc.c ****   */
 203:../SPL/src/stm32f10x_rcc.c **** 
 204:../SPL/src/stm32f10x_rcc.c **** /**
 205:../SPL/src/stm32f10x_rcc.c ****   * @}
 206:../SPL/src/stm32f10x_rcc.c ****   */
 207:../SPL/src/stm32f10x_rcc.c **** 
 208:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../SPL/src/stm32f10x_rcc.c ****   * @{
 210:../SPL/src/stm32f10x_rcc.c ****   */
 211:../SPL/src/stm32f10x_rcc.c **** 
 212:../SPL/src/stm32f10x_rcc.c **** /**
 213:../SPL/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../SPL/src/stm32f10x_rcc.c ****   * @param  None
 215:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 216:../SPL/src/stm32f10x_rcc.c ****   */
 217:../SPL/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../SPL/src/stm32f10x_rcc.c **** {
  56              		.loc 1 218 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 7, -4
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI1:
  67              		.cfi_def_cfa_register 7
 219:../SPL/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../SPL/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  68              		.loc 1 220 0
  69 0004 154B     		ldr	r3, .L2
  70 0006 154A     		ldr	r2, .L2
  71 0008 1268     		ldr	r2, [r2, #0]
  72 000a 42F00102 		orr	r2, r2, #1
  73 000e 1A60     		str	r2, [r3, #0]
 221:../SPL/src/stm32f10x_rcc.c **** 
 222:../SPL/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  74              		.loc 1 224 0
  75 0010 124A     		ldr	r2, .L2
  76 0012 124B     		ldr	r3, .L2
  77 0014 5968     		ldr	r1, [r3, #4]
  78 0016 124B     		ldr	r3, .L2+4
  79 0018 0B40     		ands	r3, r3, r1
  80 001a 5360     		str	r3, [r2, #4]
 225:../SPL/src/stm32f10x_rcc.c **** #else
 226:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../SPL/src/stm32f10x_rcc.c ****   
 229:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  81              		.loc 1 230 0
  82 001c 0F4A     		ldr	r2, .L2
  83 001e 0F4B     		ldr	r3, .L2
  84 0020 1B68     		ldr	r3, [r3, #0]
  85 0022 23F08473 		bic	r3, r3, #17301504
  86 0026 23F48033 		bic	r3, r3, #65536
  87 002a 1360     		str	r3, [r2, #0]
 231:../SPL/src/stm32f10x_rcc.c **** 
 232:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 233 0
  89 002c 0B4B     		ldr	r3, .L2
  90 002e 0B4A     		ldr	r2, .L2
  91 0030 1268     		ldr	r2, [r2, #0]
  92 0032 22F48022 		bic	r2, r2, #262144
  93 0036 1A60     		str	r2, [r3, #0]
 234:../SPL/src/stm32f10x_rcc.c **** 
 235:../SPL/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  94              		.loc 1 236 0
  95 0038 084B     		ldr	r3, .L2
  96 003a 084A     		ldr	r2, .L2
  97 003c 5268     		ldr	r2, [r2, #4]
  98 003e 22F4FE02 		bic	r2, r2, #8323072
  99 0042 5A60     		str	r2, [r3, #4]
 237:../SPL/src/stm32f10x_rcc.c **** 
 238:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../SPL/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../SPL/src/stm32f10x_rcc.c **** 
 242:../SPL/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../SPL/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../SPL/src/stm32f10x_rcc.c **** 
 245:../SPL/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../SPL/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../SPL/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../SPL/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 100              		.loc 1 249 0
 101 0044 054B     		ldr	r3, .L2
 102 0046 4FF41F02 		mov	r2, #10420224
 103 004a 9A60     		str	r2, [r3, #8]
 250:../SPL/src/stm32f10x_rcc.c **** 
 251:../SPL/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 104              		.loc 1 252 0
 105 004c 034B     		ldr	r3, .L2
 106 004e 4FF00002 		mov	r2, #0
 107 0052 DA62     		str	r2, [r3, #44]
 253:../SPL/src/stm32f10x_rcc.c **** #else
 254:../SPL/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../SPL/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../SPL/src/stm32f10x_rcc.c **** 
 258:../SPL/src/stm32f10x_rcc.c **** }
 108              		.loc 1 258 0
 109 0054 BD46     		mov	sp, r7
 110 0056 80BC     		pop	{r7}
 111 0058 7047     		bx	lr
 112              	.L3:
 113 005a 00BF     		.align	2
 114              	.L2:
 115 005c 00100240 		.word	1073876992
 116 0060 0000FFF8 		.word	-117506048
 117              		.cfi_endproc
 118              	.LFE29:
 120              		.section	.rodata
 121              		.align	2
 122              	.LC0:
 123 0000 2E2E2F53 		.ascii	"../SPL/src/stm32f10x_rcc.c\000"
 123      504C2F73 
 123      72632F73 
 123      746D3332 
 123      66313078 
 124 001b 00       		.text
 125              		.align	2
 126              		.global	RCC_HSEConfig
 127              		.thumb
 128              		.thumb_func
 130              	RCC_HSEConfig:
 131              	.LFB30:
 259:../SPL/src/stm32f10x_rcc.c **** 
 260:../SPL/src/stm32f10x_rcc.c **** /**
 261:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../SPL/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 269:../SPL/src/stm32f10x_rcc.c ****   */
 270:../SPL/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../SPL/src/stm32f10x_rcc.c **** {
 132              		.loc 1 271 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 8
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 0064 80B5     		push	{r7, lr}
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 0066 82B0     		sub	sp, sp, #8
 142              	.LCFI3:
 143              		.cfi_def_cfa_offset 16
 144 0068 00AF     		add	r7, sp, #0
 145              	.LCFI4:
 146              		.cfi_def_cfa_register 7
 147 006a 7860     		str	r0, [r7, #4]
 272:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 148              		.loc 1 273 0
 149 006c 7B68     		ldr	r3, [r7, #4]
 150 006e 002B     		cmp	r3, #0
 151 0070 0CD0     		beq	.L5
 152              		.loc 1 273 0 is_stmt 0 discriminator 1
 153 0072 7B68     		ldr	r3, [r7, #4]
 154 0074 B3F5803F 		cmp	r3, #65536
 155 0078 08D0     		beq	.L5
 156              		.loc 1 273 0 discriminator 2
 157 007a 7B68     		ldr	r3, [r7, #4]
 158 007c B3F5802F 		cmp	r3, #262144
 159 0080 04D0     		beq	.L5
 160              		.loc 1 273 0 discriminator 3
 161 0082 1648     		ldr	r0, .L11
 162 0084 40F21111 		movw	r1, #273
 163 0088 FFF7FEFF 		bl	assert_failed
 164              	.L5:
 274:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 165              		.loc 1 276 0 is_stmt 1
 166 008c 144B     		ldr	r3, .L11+4
 167 008e 144A     		ldr	r2, .L11+4
 168 0090 1268     		ldr	r2, [r2, #0]
 169 0092 22F48032 		bic	r2, r2, #65536
 170 0096 1A60     		str	r2, [r3, #0]
 277:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 171              		.loc 1 278 0
 172 0098 114B     		ldr	r3, .L11+4
 173 009a 114A     		ldr	r2, .L11+4
 174 009c 1268     		ldr	r2, [r2, #0]
 175 009e 22F48022 		bic	r2, r2, #262144
 176 00a2 1A60     		str	r2, [r3, #0]
 279:../SPL/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../SPL/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 177              		.loc 1 280 0
 178 00a4 7B68     		ldr	r3, [r7, #4]
 179 00a6 B3F5803F 		cmp	r3, #65536
 180 00aa 03D0     		beq	.L7
 181 00ac B3F5802F 		cmp	r3, #262144
 182 00b0 07D0     		beq	.L8
 183 00b2 0DE0     		b	.L10
 184              	.L7:
 281:../SPL/src/stm32f10x_rcc.c ****   {
 282:../SPL/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../SPL/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../SPL/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 185              		.loc 1 284 0
 186 00b4 0A4B     		ldr	r3, .L11+4
 187 00b6 0A4A     		ldr	r2, .L11+4
 188 00b8 1268     		ldr	r2, [r2, #0]
 189 00ba 42F48032 		orr	r2, r2, #65536
 190 00be 1A60     		str	r2, [r3, #0]
 285:../SPL/src/stm32f10x_rcc.c ****       break;
 191              		.loc 1 285 0
 192 00c0 07E0     		b	.L4
 193              	.L8:
 286:../SPL/src/stm32f10x_rcc.c ****       
 287:../SPL/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../SPL/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../SPL/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 194              		.loc 1 289 0
 195 00c2 074B     		ldr	r3, .L11+4
 196 00c4 064A     		ldr	r2, .L11+4
 197 00c6 1268     		ldr	r2, [r2, #0]
 198 00c8 42F4A022 		orr	r2, r2, #327680
 199 00cc 1A60     		str	r2, [r3, #0]
 290:../SPL/src/stm32f10x_rcc.c ****       break;
 200              		.loc 1 290 0
 201 00ce 00E0     		b	.L4
 202              	.L10:
 291:../SPL/src/stm32f10x_rcc.c ****       
 292:../SPL/src/stm32f10x_rcc.c ****     default:
 293:../SPL/src/stm32f10x_rcc.c ****       break;
 203              		.loc 1 293 0
 204 00d0 00BF     		nop
 205              	.L4:
 294:../SPL/src/stm32f10x_rcc.c ****   }
 295:../SPL/src/stm32f10x_rcc.c **** }
 206              		.loc 1 295 0
 207 00d2 07F10807 		add	r7, r7, #8
 208 00d6 BD46     		mov	sp, r7
 209 00d8 80BD     		pop	{r7, pc}
 210              	.L12:
 211 00da 00BF     		.align	2
 212              	.L11:
 213 00dc 00000000 		.word	.LC0
 214 00e0 00100240 		.word	1073876992
 215              		.cfi_endproc
 216              	.LFE30:
 218              		.align	2
 219              		.global	RCC_WaitForHSEStartUp
 220              		.thumb
 221              		.thumb_func
 223              	RCC_WaitForHSEStartUp:
 224              	.LFB31:
 296:../SPL/src/stm32f10x_rcc.c **** 
 297:../SPL/src/stm32f10x_rcc.c **** /**
 298:../SPL/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../SPL/src/stm32f10x_rcc.c ****   * @param  None
 300:../SPL/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../SPL/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../SPL/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../SPL/src/stm32f10x_rcc.c ****   */
 304:../SPL/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../SPL/src/stm32f10x_rcc.c **** {
 225              		.loc 1 305 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229 00e4 80B5     		push	{r7, lr}
 230              	.LCFI5:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 7, -8
 233              		.cfi_offset 14, -4
 234 00e6 82B0     		sub	sp, sp, #8
 235              	.LCFI6:
 236              		.cfi_def_cfa_offset 16
 237 00e8 00AF     		add	r7, sp, #0
 238              	.LCFI7:
 239              		.cfi_def_cfa_register 7
 306:../SPL/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 240              		.loc 1 306 0
 241 00ea 4FF00003 		mov	r3, #0
 242 00ee 3B60     		str	r3, [r7, #0]
 307:../SPL/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 243              		.loc 1 307 0
 244 00f0 4FF00003 		mov	r3, #0
 245 00f4 FB71     		strb	r3, [r7, #7]
 308:../SPL/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 246              		.loc 1 308 0
 247 00f6 4FF00003 		mov	r3, #0
 248 00fa BB71     		strb	r3, [r7, #6]
 249              	.L15:
 309:../SPL/src/stm32f10x_rcc.c ****   
 310:../SPL/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../SPL/src/stm32f10x_rcc.c ****   do
 312:../SPL/src/stm32f10x_rcc.c ****   {
 313:../SPL/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 250              		.loc 1 313 0 discriminator 1
 251 00fc 4FF03100 		mov	r0, #49
 252 0100 FFF7FEFF 		bl	RCC_GetFlagStatus
 253 0104 0346     		mov	r3, r0
 254 0106 BB71     		strb	r3, [r7, #6]
 314:../SPL/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 255              		.loc 1 314 0 discriminator 1
 256 0108 3B68     		ldr	r3, [r7, #0]
 257 010a 03F10103 		add	r3, r3, #1
 258 010e 3B60     		str	r3, [r7, #0]
 315:../SPL/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 259              		.loc 1 315 0 discriminator 1
 260 0110 3B68     		ldr	r3, [r7, #0]
 261 0112 B3F5A06F 		cmp	r3, #1280
 262 0116 02D0     		beq	.L14
 263 0118 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 264 011a 002B     		cmp	r3, #0
 265 011c EED0     		beq	.L15
 266              	.L14:
 316:../SPL/src/stm32f10x_rcc.c ****   
 317:../SPL/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 267              		.loc 1 317 0
 268 011e 4FF03100 		mov	r0, #49
 269 0122 FFF7FEFF 		bl	RCC_GetFlagStatus
 270 0126 0346     		mov	r3, r0
 271 0128 002B     		cmp	r3, #0
 272 012a 03D0     		beq	.L16
 318:../SPL/src/stm32f10x_rcc.c ****   {
 319:../SPL/src/stm32f10x_rcc.c ****     status = SUCCESS;
 273              		.loc 1 319 0
 274 012c 4FF00103 		mov	r3, #1
 275 0130 FB71     		strb	r3, [r7, #7]
 276 0132 02E0     		b	.L17
 277              	.L16:
 320:../SPL/src/stm32f10x_rcc.c ****   }
 321:../SPL/src/stm32f10x_rcc.c ****   else
 322:../SPL/src/stm32f10x_rcc.c ****   {
 323:../SPL/src/stm32f10x_rcc.c ****     status = ERROR;
 278              		.loc 1 323 0
 279 0134 4FF00003 		mov	r3, #0
 280 0138 FB71     		strb	r3, [r7, #7]
 281              	.L17:
 324:../SPL/src/stm32f10x_rcc.c ****   }  
 325:../SPL/src/stm32f10x_rcc.c ****   return (status);
 282              		.loc 1 325 0
 283 013a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../SPL/src/stm32f10x_rcc.c **** }
 284              		.loc 1 326 0
 285 013c 1846     		mov	r0, r3
 286 013e 07F10807 		add	r7, r7, #8
 287 0142 BD46     		mov	sp, r7
 288 0144 80BD     		pop	{r7, pc}
 289              		.cfi_endproc
 290              	.LFE31:
 292 0146 00BF     		.align	2
 293              		.global	RCC_AdjustHSICalibrationValue
 294              		.thumb
 295              		.thumb_func
 297              	RCC_AdjustHSICalibrationValue:
 298              	.LFB32:
 327:../SPL/src/stm32f10x_rcc.c **** 
 328:../SPL/src/stm32f10x_rcc.c **** /**
 329:../SPL/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../SPL/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../SPL/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 333:../SPL/src/stm32f10x_rcc.c ****   */
 334:../SPL/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../SPL/src/stm32f10x_rcc.c **** {
 299              		.loc 1 335 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 16
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0148 80B5     		push	{r7, lr}
 304              	.LCFI8:
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 014a 84B0     		sub	sp, sp, #16
 309              	.LCFI9:
 310              		.cfi_def_cfa_offset 24
 311 014c 00AF     		add	r7, sp, #0
 312              	.LCFI10:
 313              		.cfi_def_cfa_register 7
 314 014e 0346     		mov	r3, r0
 315 0150 FB71     		strb	r3, [r7, #7]
 336:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 316              		.loc 1 336 0
 317 0152 4FF00003 		mov	r3, #0
 318 0156 FB60     		str	r3, [r7, #12]
 337:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 319              		.loc 1 338 0
 320 0158 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 321 015a 1F2B     		cmp	r3, #31
 322 015c 04D9     		bls	.L20
 323              		.loc 1 338 0 is_stmt 0 discriminator 1
 324 015e 0C48     		ldr	r0, .L21
 325 0160 4FF4A971 		mov	r1, #338
 326 0164 FFF7FEFF 		bl	assert_failed
 327              	.L20:
 339:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 328              		.loc 1 339 0 is_stmt 1
 329 0168 0A4B     		ldr	r3, .L21+4
 330 016a 1B68     		ldr	r3, [r3, #0]
 331 016c FB60     		str	r3, [r7, #12]
 340:../SPL/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 332              		.loc 1 341 0
 333 016e FB68     		ldr	r3, [r7, #12]
 334 0170 23F0F803 		bic	r3, r3, #248
 335 0174 FB60     		str	r3, [r7, #12]
 342:../SPL/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 336              		.loc 1 343 0
 337 0176 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 338 0178 4FEAC303 		lsl	r3, r3, #3
 339 017c FA68     		ldr	r2, [r7, #12]
 340 017e 1343     		orrs	r3, r3, r2
 341 0180 FB60     		str	r3, [r7, #12]
 344:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../SPL/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 342              		.loc 1 345 0
 343 0182 044B     		ldr	r3, .L21+4
 344 0184 FA68     		ldr	r2, [r7, #12]
 345 0186 1A60     		str	r2, [r3, #0]
 346:../SPL/src/stm32f10x_rcc.c **** }
 346              		.loc 1 346 0
 347 0188 07F11007 		add	r7, r7, #16
 348 018c BD46     		mov	sp, r7
 349 018e 80BD     		pop	{r7, pc}
 350              	.L22:
 351              		.align	2
 352              	.L21:
 353 0190 00000000 		.word	.LC0
 354 0194 00100240 		.word	1073876992
 355              		.cfi_endproc
 356              	.LFE32:
 358              		.align	2
 359              		.global	RCC_HSICmd
 360              		.thumb
 361              		.thumb_func
 363              	RCC_HSICmd:
 364              	.LFB33:
 347:../SPL/src/stm32f10x_rcc.c **** 
 348:../SPL/src/stm32f10x_rcc.c **** /**
 349:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../SPL/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 353:../SPL/src/stm32f10x_rcc.c ****   */
 354:../SPL/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../SPL/src/stm32f10x_rcc.c **** {
 365              		.loc 1 355 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 8
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369 0198 80B5     		push	{r7, lr}
 370              	.LCFI11:
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 7, -8
 373              		.cfi_offset 14, -4
 374 019a 82B0     		sub	sp, sp, #8
 375              	.LCFI12:
 376              		.cfi_def_cfa_offset 16
 377 019c 00AF     		add	r7, sp, #0
 378              	.LCFI13:
 379              		.cfi_def_cfa_register 7
 380 019e 0346     		mov	r3, r0
 381 01a0 FB71     		strb	r3, [r7, #7]
 356:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 382              		.loc 1 357 0
 383 01a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 384 01a4 002B     		cmp	r3, #0
 385 01a6 07D0     		beq	.L24
 386              		.loc 1 357 0 is_stmt 0 discriminator 1
 387 01a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 388 01aa 012B     		cmp	r3, #1
 389 01ac 04D0     		beq	.L24
 390              		.loc 1 357 0 discriminator 2
 391 01ae 0648     		ldr	r0, .L25
 392 01b0 40F26511 		movw	r1, #357
 393 01b4 FFF7FEFF 		bl	assert_failed
 394              	.L24:
 358:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 395              		.loc 1 358 0 is_stmt 1
 396 01b8 044B     		ldr	r3, .L25+4
 397 01ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 398 01bc 1A60     		str	r2, [r3, #0]
 359:../SPL/src/stm32f10x_rcc.c **** }
 399              		.loc 1 359 0
 400 01be 07F10807 		add	r7, r7, #8
 401 01c2 BD46     		mov	sp, r7
 402 01c4 80BD     		pop	{r7, pc}
 403              	.L26:
 404 01c6 00BF     		.align	2
 405              	.L25:
 406 01c8 00000000 		.word	.LC0
 407 01cc 00004242 		.word	1111621632
 408              		.cfi_endproc
 409              	.LFE33:
 411              		.align	2
 412              		.global	RCC_PLLConfig
 413              		.thumb
 414              		.thumb_func
 416              	RCC_PLLConfig:
 417              	.LFB34:
 360:../SPL/src/stm32f10x_rcc.c **** 
 361:../SPL/src/stm32f10x_rcc.c **** /**
 362:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../SPL/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../SPL/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 377:../SPL/src/stm32f10x_rcc.c ****   */
 378:../SPL/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../SPL/src/stm32f10x_rcc.c **** {
 418              		.loc 1 379 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 01d0 80B5     		push	{r7, lr}
 423              	.LCFI14:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 01d2 84B0     		sub	sp, sp, #16
 428              	.LCFI15:
 429              		.cfi_def_cfa_offset 24
 430 01d4 00AF     		add	r7, sp, #0
 431              	.LCFI16:
 432              		.cfi_def_cfa_register 7
 433 01d6 7860     		str	r0, [r7, #4]
 434 01d8 3960     		str	r1, [r7, #0]
 380:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 435              		.loc 1 380 0
 436 01da 4FF00003 		mov	r3, #0
 437 01de FB60     		str	r3, [r7, #12]
 381:../SPL/src/stm32f10x_rcc.c **** 
 382:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 438              		.loc 1 383 0
 439 01e0 7B68     		ldr	r3, [r7, #4]
 440 01e2 002B     		cmp	r3, #0
 441 01e4 08D0     		beq	.L28
 442              		.loc 1 383 0 is_stmt 0 discriminator 1
 443 01e6 7B68     		ldr	r3, [r7, #4]
 444 01e8 B3F5803F 		cmp	r3, #65536
 445 01ec 04D0     		beq	.L28
 446              		.loc 1 383 0 discriminator 2
 447 01ee 2C48     		ldr	r0, .L30
 448 01f0 40F27F11 		movw	r1, #383
 449 01f4 FFF7FEFF 		bl	assert_failed
 450              	.L28:
 384:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 451              		.loc 1 384 0 is_stmt 1
 452 01f8 3B68     		ldr	r3, [r7, #0]
 453 01fa 002B     		cmp	r3, #0
 454 01fc 3CD0     		beq	.L29
 455              		.loc 1 384 0 is_stmt 0 discriminator 1
 456 01fe 3B68     		ldr	r3, [r7, #0]
 457 0200 B3F5802F 		cmp	r3, #262144
 458 0204 38D0     		beq	.L29
 459              		.loc 1 384 0 discriminator 2
 460 0206 3B68     		ldr	r3, [r7, #0]
 461 0208 B3F5002F 		cmp	r3, #524288
 462 020c 34D0     		beq	.L29
 463              		.loc 1 384 0 discriminator 3
 464 020e 3B68     		ldr	r3, [r7, #0]
 465 0210 B3F5402F 		cmp	r3, #786432
 466 0214 30D0     		beq	.L29
 467              		.loc 1 384 0 discriminator 4
 468 0216 3B68     		ldr	r3, [r7, #0]
 469 0218 B3F5801F 		cmp	r3, #1048576
 470 021c 2CD0     		beq	.L29
 471              		.loc 1 384 0 discriminator 5
 472 021e 3B68     		ldr	r3, [r7, #0]
 473 0220 B3F5A01F 		cmp	r3, #1310720
 474 0224 28D0     		beq	.L29
 475              		.loc 1 384 0 discriminator 6
 476 0226 3B68     		ldr	r3, [r7, #0]
 477 0228 B3F5C01F 		cmp	r3, #1572864
 478 022c 24D0     		beq	.L29
 479              		.loc 1 384 0 discriminator 7
 480 022e 3B68     		ldr	r3, [r7, #0]
 481 0230 B3F5E01F 		cmp	r3, #1835008
 482 0234 20D0     		beq	.L29
 483              		.loc 1 384 0 discriminator 8
 484 0236 3B68     		ldr	r3, [r7, #0]
 485 0238 B3F5001F 		cmp	r3, #2097152
 486 023c 1CD0     		beq	.L29
 487              		.loc 1 384 0 discriminator 9
 488 023e 3B68     		ldr	r3, [r7, #0]
 489 0240 B3F5101F 		cmp	r3, #2359296
 490 0244 18D0     		beq	.L29
 491              		.loc 1 384 0 discriminator 10
 492 0246 3B68     		ldr	r3, [r7, #0]
 493 0248 B3F5201F 		cmp	r3, #2621440
 494 024c 14D0     		beq	.L29
 495              		.loc 1 384 0 discriminator 11
 496 024e 3B68     		ldr	r3, [r7, #0]
 497 0250 B3F5301F 		cmp	r3, #2883584
 498 0254 10D0     		beq	.L29
 499              		.loc 1 384 0 discriminator 12
 500 0256 3B68     		ldr	r3, [r7, #0]
 501 0258 B3F5401F 		cmp	r3, #3145728
 502 025c 0CD0     		beq	.L29
 503              		.loc 1 384 0 discriminator 13
 504 025e 3B68     		ldr	r3, [r7, #0]
 505 0260 B3F5501F 		cmp	r3, #3407872
 506 0264 08D0     		beq	.L29
 507              		.loc 1 384 0 discriminator 14
 508 0266 3B68     		ldr	r3, [r7, #0]
 509 0268 B3F5601F 		cmp	r3, #3670016
 510 026c 04D0     		beq	.L29
 511              		.loc 1 384 0 discriminator 15
 512 026e 0C48     		ldr	r0, .L30
 513 0270 4FF4C071 		mov	r1, #384
 514 0274 FFF7FEFF 		bl	assert_failed
 515              	.L29:
 385:../SPL/src/stm32f10x_rcc.c **** 
 386:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 516              		.loc 1 386 0 is_stmt 1
 517 0278 0A4B     		ldr	r3, .L30+4
 518 027a 5B68     		ldr	r3, [r3, #4]
 519 027c FB60     		str	r3, [r7, #12]
 387:../SPL/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 520              		.loc 1 388 0
 521 027e FB68     		ldr	r3, [r7, #12]
 522 0280 23F47413 		bic	r3, r3, #3997696
 523 0284 FB60     		str	r3, [r7, #12]
 389:../SPL/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 524              		.loc 1 390 0
 525 0286 7A68     		ldr	r2, [r7, #4]
 526 0288 3B68     		ldr	r3, [r7, #0]
 527 028a 1343     		orrs	r3, r3, r2
 528 028c FA68     		ldr	r2, [r7, #12]
 529 028e 1343     		orrs	r3, r3, r2
 530 0290 FB60     		str	r3, [r7, #12]
 391:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 531              		.loc 1 392 0
 532 0292 044B     		ldr	r3, .L30+4
 533 0294 FA68     		ldr	r2, [r7, #12]
 534 0296 5A60     		str	r2, [r3, #4]
 393:../SPL/src/stm32f10x_rcc.c **** }
 535              		.loc 1 393 0
 536 0298 07F11007 		add	r7, r7, #16
 537 029c BD46     		mov	sp, r7
 538 029e 80BD     		pop	{r7, pc}
 539              	.L31:
 540              		.align	2
 541              	.L30:
 542 02a0 00000000 		.word	.LC0
 543 02a4 00100240 		.word	1073876992
 544              		.cfi_endproc
 545              	.LFE34:
 547              		.align	2
 548              		.global	RCC_PLLCmd
 549              		.thumb
 550              		.thumb_func
 552              	RCC_PLLCmd:
 553              	.LFB35:
 394:../SPL/src/stm32f10x_rcc.c **** 
 395:../SPL/src/stm32f10x_rcc.c **** /**
 396:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../SPL/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 400:../SPL/src/stm32f10x_rcc.c ****   */
 401:../SPL/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../SPL/src/stm32f10x_rcc.c **** {
 554              		.loc 1 402 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 8
 557              		@ frame_needed = 1, uses_anonymous_args = 0
 558 02a8 80B5     		push	{r7, lr}
 559              	.LCFI17:
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 7, -8
 562              		.cfi_offset 14, -4
 563 02aa 82B0     		sub	sp, sp, #8
 564              	.LCFI18:
 565              		.cfi_def_cfa_offset 16
 566 02ac 00AF     		add	r7, sp, #0
 567              	.LCFI19:
 568              		.cfi_def_cfa_register 7
 569 02ae 0346     		mov	r3, r0
 570 02b0 FB71     		strb	r3, [r7, #7]
 403:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 571              		.loc 1 404 0
 572 02b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 573 02b4 002B     		cmp	r3, #0
 574 02b6 07D0     		beq	.L33
 575              		.loc 1 404 0 is_stmt 0 discriminator 1
 576 02b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 577 02ba 012B     		cmp	r3, #1
 578 02bc 04D0     		beq	.L33
 579              		.loc 1 404 0 discriminator 2
 580 02be 0648     		ldr	r0, .L34
 581 02c0 4FF4CA71 		mov	r1, #404
 582 02c4 FFF7FEFF 		bl	assert_failed
 583              	.L33:
 405:../SPL/src/stm32f10x_rcc.c **** 
 406:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 584              		.loc 1 406 0 is_stmt 1
 585 02c8 044B     		ldr	r3, .L34+4
 586 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 587 02cc 1A60     		str	r2, [r3, #0]
 407:../SPL/src/stm32f10x_rcc.c **** }
 588              		.loc 1 407 0
 589 02ce 07F10807 		add	r7, r7, #8
 590 02d2 BD46     		mov	sp, r7
 591 02d4 80BD     		pop	{r7, pc}
 592              	.L35:
 593 02d6 00BF     		.align	2
 594              	.L34:
 595 02d8 00000000 		.word	.LC0
 596 02dc 60004242 		.word	1111621728
 597              		.cfi_endproc
 598              	.LFE35:
 600              		.align	2
 601              		.global	RCC_PREDIV1Config
 602              		.thumb
 603              		.thumb_func
 605              	RCC_PREDIV1Config:
 606              	.LFB36:
 408:../SPL/src/stm32f10x_rcc.c **** 
 409:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../SPL/src/stm32f10x_rcc.c **** /**
 411:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../SPL/src/stm32f10x_rcc.c ****   * @note 
 413:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../SPL/src/stm32f10x_rcc.c ****   *     devices.
 416:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../SPL/src/stm32f10x_rcc.c ****   * @note 
 421:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 425:../SPL/src/stm32f10x_rcc.c ****   */
 426:../SPL/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../SPL/src/stm32f10x_rcc.c **** {
 607              		.loc 1 427 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 16
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 02e0 80B5     		push	{r7, lr}
 612              	.LCFI20:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 02e2 84B0     		sub	sp, sp, #16
 617              	.LCFI21:
 618              		.cfi_def_cfa_offset 24
 619 02e4 00AF     		add	r7, sp, #0
 620              	.LCFI22:
 621              		.cfi_def_cfa_register 7
 622 02e6 7860     		str	r0, [r7, #4]
 623 02e8 3960     		str	r1, [r7, #0]
 428:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 624              		.loc 1 428 0
 625 02ea 4FF00003 		mov	r3, #0
 626 02ee FB60     		str	r3, [r7, #12]
 429:../SPL/src/stm32f10x_rcc.c ****   
 430:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 627              		.loc 1 431 0
 628 02f0 7B68     		ldr	r3, [r7, #4]
 629 02f2 002B     		cmp	r3, #0
 630 02f4 04D0     		beq	.L37
 631              		.loc 1 431 0 is_stmt 0 discriminator 1
 632 02f6 2848     		ldr	r0, .L39
 633 02f8 40F2AF11 		movw	r1, #431
 634 02fc FFF7FEFF 		bl	assert_failed
 635              	.L37:
 432:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 636              		.loc 1 432 0 is_stmt 1
 637 0300 3B68     		ldr	r3, [r7, #0]
 638 0302 002B     		cmp	r3, #0
 639 0304 31D0     		beq	.L38
 640              		.loc 1 432 0 is_stmt 0 discriminator 1
 641 0306 3B68     		ldr	r3, [r7, #0]
 642 0308 012B     		cmp	r3, #1
 643 030a 2ED0     		beq	.L38
 644              		.loc 1 432 0 discriminator 2
 645 030c 3B68     		ldr	r3, [r7, #0]
 646 030e 022B     		cmp	r3, #2
 647 0310 2BD0     		beq	.L38
 648              		.loc 1 432 0 discriminator 3
 649 0312 3B68     		ldr	r3, [r7, #0]
 650 0314 032B     		cmp	r3, #3
 651 0316 28D0     		beq	.L38
 652              		.loc 1 432 0 discriminator 4
 653 0318 3B68     		ldr	r3, [r7, #0]
 654 031a 042B     		cmp	r3, #4
 655 031c 25D0     		beq	.L38
 656              		.loc 1 432 0 discriminator 5
 657 031e 3B68     		ldr	r3, [r7, #0]
 658 0320 052B     		cmp	r3, #5
 659 0322 22D0     		beq	.L38
 660              		.loc 1 432 0 discriminator 6
 661 0324 3B68     		ldr	r3, [r7, #0]
 662 0326 062B     		cmp	r3, #6
 663 0328 1FD0     		beq	.L38
 664              		.loc 1 432 0 discriminator 7
 665 032a 3B68     		ldr	r3, [r7, #0]
 666 032c 072B     		cmp	r3, #7
 667 032e 1CD0     		beq	.L38
 668              		.loc 1 432 0 discriminator 8
 669 0330 3B68     		ldr	r3, [r7, #0]
 670 0332 082B     		cmp	r3, #8
 671 0334 19D0     		beq	.L38
 672              		.loc 1 432 0 discriminator 9
 673 0336 3B68     		ldr	r3, [r7, #0]
 674 0338 092B     		cmp	r3, #9
 675 033a 16D0     		beq	.L38
 676              		.loc 1 432 0 discriminator 10
 677 033c 3B68     		ldr	r3, [r7, #0]
 678 033e 0A2B     		cmp	r3, #10
 679 0340 13D0     		beq	.L38
 680              		.loc 1 432 0 discriminator 11
 681 0342 3B68     		ldr	r3, [r7, #0]
 682 0344 0B2B     		cmp	r3, #11
 683 0346 10D0     		beq	.L38
 684              		.loc 1 432 0 discriminator 12
 685 0348 3B68     		ldr	r3, [r7, #0]
 686 034a 0C2B     		cmp	r3, #12
 687 034c 0DD0     		beq	.L38
 688              		.loc 1 432 0 discriminator 13
 689 034e 3B68     		ldr	r3, [r7, #0]
 690 0350 0D2B     		cmp	r3, #13
 691 0352 0AD0     		beq	.L38
 692              		.loc 1 432 0 discriminator 14
 693 0354 3B68     		ldr	r3, [r7, #0]
 694 0356 0E2B     		cmp	r3, #14
 695 0358 07D0     		beq	.L38
 696              		.loc 1 432 0 discriminator 15
 697 035a 3B68     		ldr	r3, [r7, #0]
 698 035c 0F2B     		cmp	r3, #15
 699 035e 04D0     		beq	.L38
 700              		.loc 1 432 0 discriminator 16
 701 0360 0D48     		ldr	r0, .L39
 702 0362 4FF4D871 		mov	r1, #432
 703 0366 FFF7FEFF 		bl	assert_failed
 704              	.L38:
 433:../SPL/src/stm32f10x_rcc.c **** 
 434:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 705              		.loc 1 434 0 is_stmt 1
 706 036a 0C4B     		ldr	r3, .L39+4
 707 036c DB6A     		ldr	r3, [r3, #44]
 708 036e FB60     		str	r3, [r7, #12]
 435:../SPL/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 709              		.loc 1 436 0
 710 0370 FB68     		ldr	r3, [r7, #12]
 711 0372 23F48033 		bic	r3, r3, #65536
 712 0376 23F00F03 		bic	r3, r3, #15
 713 037a FB60     		str	r3, [r7, #12]
 437:../SPL/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 714              		.loc 1 438 0
 715 037c 7A68     		ldr	r2, [r7, #4]
 716 037e 3B68     		ldr	r3, [r7, #0]
 717 0380 1343     		orrs	r3, r3, r2
 718 0382 FA68     		ldr	r2, [r7, #12]
 719 0384 1343     		orrs	r3, r3, r2
 720 0386 FB60     		str	r3, [r7, #12]
 439:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 721              		.loc 1 440 0
 722 0388 044B     		ldr	r3, .L39+4
 723 038a FA68     		ldr	r2, [r7, #12]
 724 038c DA62     		str	r2, [r3, #44]
 441:../SPL/src/stm32f10x_rcc.c **** }
 725              		.loc 1 441 0
 726 038e 07F11007 		add	r7, r7, #16
 727 0392 BD46     		mov	sp, r7
 728 0394 80BD     		pop	{r7, pc}
 729              	.L40:
 730 0396 00BF     		.align	2
 731              	.L39:
 732 0398 00000000 		.word	.LC0
 733 039c 00100240 		.word	1073876992
 734              		.cfi_endproc
 735              	.LFE36:
 737              		.align	2
 738              		.global	RCC_SYSCLKConfig
 739              		.thumb
 740              		.thumb_func
 742              	RCC_SYSCLKConfig:
 743              	.LFB37:
 442:../SPL/src/stm32f10x_rcc.c **** #endif
 443:../SPL/src/stm32f10x_rcc.c **** 
 444:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../SPL/src/stm32f10x_rcc.c **** /**
 446:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../SPL/src/stm32f10x_rcc.c ****   * @note 
 448:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 453:../SPL/src/stm32f10x_rcc.c ****   */
 454:../SPL/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../SPL/src/stm32f10x_rcc.c **** {
 456:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../SPL/src/stm32f10x_rcc.c **** 
 458:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../SPL/src/stm32f10x_rcc.c **** 
 461:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../SPL/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../SPL/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../SPL/src/stm32f10x_rcc.c **** }
 469:../SPL/src/stm32f10x_rcc.c **** 
 470:../SPL/src/stm32f10x_rcc.c **** /**
 471:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../SPL/src/stm32f10x_rcc.c ****   * @note
 473:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 478:../SPL/src/stm32f10x_rcc.c ****   */
 479:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../SPL/src/stm32f10x_rcc.c **** {
 481:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../SPL/src/stm32f10x_rcc.c **** 
 483:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../SPL/src/stm32f10x_rcc.c **** 
 486:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../SPL/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../SPL/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../SPL/src/stm32f10x_rcc.c **** }
 494:../SPL/src/stm32f10x_rcc.c **** 
 495:../SPL/src/stm32f10x_rcc.c **** 
 496:../SPL/src/stm32f10x_rcc.c **** /**
 497:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../SPL/src/stm32f10x_rcc.c ****   * @note 
 499:../SPL/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../SPL/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 504:../SPL/src/stm32f10x_rcc.c ****   */
 505:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../SPL/src/stm32f10x_rcc.c **** {
 507:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../SPL/src/stm32f10x_rcc.c **** 
 510:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../SPL/src/stm32f10x_rcc.c **** }
 512:../SPL/src/stm32f10x_rcc.c **** 
 513:../SPL/src/stm32f10x_rcc.c **** 
 514:../SPL/src/stm32f10x_rcc.c **** /**
 515:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../SPL/src/stm32f10x_rcc.c ****   * @note 
 517:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 522:../SPL/src/stm32f10x_rcc.c ****   */
 523:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../SPL/src/stm32f10x_rcc.c **** {
 525:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../SPL/src/stm32f10x_rcc.c **** 
 527:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../SPL/src/stm32f10x_rcc.c **** 
 530:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../SPL/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../SPL/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../SPL/src/stm32f10x_rcc.c **** }
 538:../SPL/src/stm32f10x_rcc.c **** 
 539:../SPL/src/stm32f10x_rcc.c **** 
 540:../SPL/src/stm32f10x_rcc.c **** /**
 541:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../SPL/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 545:../SPL/src/stm32f10x_rcc.c ****   */
 546:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../SPL/src/stm32f10x_rcc.c **** {
 548:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../SPL/src/stm32f10x_rcc.c **** 
 550:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../SPL/src/stm32f10x_rcc.c **** }
 553:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../SPL/src/stm32f10x_rcc.c **** 
 555:../SPL/src/stm32f10x_rcc.c **** /**
 556:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 563:../SPL/src/stm32f10x_rcc.c ****   */
 564:../SPL/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../SPL/src/stm32f10x_rcc.c **** {
 744              		.loc 1 565 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 16
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748 03a0 80B5     		push	{r7, lr}
 749              	.LCFI23:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 7, -8
 752              		.cfi_offset 14, -4
 753 03a2 84B0     		sub	sp, sp, #16
 754              	.LCFI24:
 755              		.cfi_def_cfa_offset 24
 756 03a4 00AF     		add	r7, sp, #0
 757              	.LCFI25:
 758              		.cfi_def_cfa_register 7
 759 03a6 7860     		str	r0, [r7, #4]
 566:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 760              		.loc 1 566 0
 761 03a8 4FF00003 		mov	r3, #0
 762 03ac FB60     		str	r3, [r7, #12]
 567:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 763              		.loc 1 568 0
 764 03ae 7B68     		ldr	r3, [r7, #4]
 765 03b0 002B     		cmp	r3, #0
 766 03b2 0AD0     		beq	.L42
 767              		.loc 1 568 0 is_stmt 0 discriminator 1
 768 03b4 7B68     		ldr	r3, [r7, #4]
 769 03b6 012B     		cmp	r3, #1
 770 03b8 07D0     		beq	.L42
 771              		.loc 1 568 0 discriminator 2
 772 03ba 7B68     		ldr	r3, [r7, #4]
 773 03bc 022B     		cmp	r3, #2
 774 03be 04D0     		beq	.L42
 775              		.loc 1 568 0 discriminator 3
 776 03c0 0B48     		ldr	r0, .L43
 777 03c2 4FF40E71 		mov	r1, #568
 778 03c6 FFF7FEFF 		bl	assert_failed
 779              	.L42:
 569:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 780              		.loc 1 569 0 is_stmt 1
 781 03ca 0A4B     		ldr	r3, .L43+4
 782 03cc 5B68     		ldr	r3, [r3, #4]
 783 03ce FB60     		str	r3, [r7, #12]
 570:../SPL/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 784              		.loc 1 571 0
 785 03d0 FB68     		ldr	r3, [r7, #12]
 786 03d2 23F00303 		bic	r3, r3, #3
 787 03d6 FB60     		str	r3, [r7, #12]
 572:../SPL/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 788              		.loc 1 573 0
 789 03d8 FA68     		ldr	r2, [r7, #12]
 790 03da 7B68     		ldr	r3, [r7, #4]
 791 03dc 1343     		orrs	r3, r3, r2
 792 03de FB60     		str	r3, [r7, #12]
 574:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 793              		.loc 1 575 0
 794 03e0 044B     		ldr	r3, .L43+4
 795 03e2 FA68     		ldr	r2, [r7, #12]
 796 03e4 5A60     		str	r2, [r3, #4]
 576:../SPL/src/stm32f10x_rcc.c **** }
 797              		.loc 1 576 0
 798 03e6 07F11007 		add	r7, r7, #16
 799 03ea BD46     		mov	sp, r7
 800 03ec 80BD     		pop	{r7, pc}
 801              	.L44:
 802 03ee 00BF     		.align	2
 803              	.L43:
 804 03f0 00000000 		.word	.LC0
 805 03f4 00100240 		.word	1073876992
 806              		.cfi_endproc
 807              	.LFE37:
 809              		.align	2
 810              		.global	RCC_GetSYSCLKSource
 811              		.thumb
 812              		.thumb_func
 814              	RCC_GetSYSCLKSource:
 815              	.LFB38:
 577:../SPL/src/stm32f10x_rcc.c **** 
 578:../SPL/src/stm32f10x_rcc.c **** /**
 579:../SPL/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../SPL/src/stm32f10x_rcc.c ****   * @param  None
 581:../SPL/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../SPL/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../SPL/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../SPL/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../SPL/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../SPL/src/stm32f10x_rcc.c ****   */
 587:../SPL/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../SPL/src/stm32f10x_rcc.c **** {
 816              		.loc 1 588 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 1, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 821 03f8 80B4     		push	{r7}
 822              	.LCFI26:
 823              		.cfi_def_cfa_offset 4
 824              		.cfi_offset 7, -4
 825 03fa 00AF     		add	r7, sp, #0
 826              	.LCFI27:
 827              		.cfi_def_cfa_register 7
 589:../SPL/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 828              		.loc 1 589 0
 829 03fc 044B     		ldr	r3, .L47
 830 03fe 5B68     		ldr	r3, [r3, #4]
 831 0400 DBB2     		uxtb	r3, r3
 832 0402 03F00C03 		and	r3, r3, #12
 833 0406 DBB2     		uxtb	r3, r3
 590:../SPL/src/stm32f10x_rcc.c **** }
 834              		.loc 1 590 0
 835 0408 1846     		mov	r0, r3
 836 040a BD46     		mov	sp, r7
 837 040c 80BC     		pop	{r7}
 838 040e 7047     		bx	lr
 839              	.L48:
 840              		.align	2
 841              	.L47:
 842 0410 00100240 		.word	1073876992
 843              		.cfi_endproc
 844              	.LFE38:
 846              		.align	2
 847              		.global	RCC_HCLKConfig
 848              		.thumb
 849              		.thumb_func
 851              	RCC_HCLKConfig:
 852              	.LFB39:
 591:../SPL/src/stm32f10x_rcc.c **** 
 592:../SPL/src/stm32f10x_rcc.c **** /**
 593:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../SPL/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 607:../SPL/src/stm32f10x_rcc.c ****   */
 608:../SPL/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../SPL/src/stm32f10x_rcc.c **** {
 853              		.loc 1 609 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 16
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857 0414 80B5     		push	{r7, lr}
 858              	.LCFI28:
 859              		.cfi_def_cfa_offset 8
 860              		.cfi_offset 7, -8
 861              		.cfi_offset 14, -4
 862 0416 84B0     		sub	sp, sp, #16
 863              	.LCFI29:
 864              		.cfi_def_cfa_offset 24
 865 0418 00AF     		add	r7, sp, #0
 866              	.LCFI30:
 867              		.cfi_def_cfa_register 7
 868 041a 7860     		str	r0, [r7, #4]
 610:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 869              		.loc 1 610 0
 870 041c 4FF00003 		mov	r3, #0
 871 0420 FB60     		str	r3, [r7, #12]
 611:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 872              		.loc 1 612 0
 873 0422 7B68     		ldr	r3, [r7, #4]
 874 0424 002B     		cmp	r3, #0
 875 0426 1CD0     		beq	.L50
 876              		.loc 1 612 0 is_stmt 0 discriminator 1
 877 0428 7B68     		ldr	r3, [r7, #4]
 878 042a 802B     		cmp	r3, #128
 879 042c 19D0     		beq	.L50
 880              		.loc 1 612 0 discriminator 2
 881 042e 7B68     		ldr	r3, [r7, #4]
 882 0430 902B     		cmp	r3, #144
 883 0432 16D0     		beq	.L50
 884              		.loc 1 612 0 discriminator 3
 885 0434 7B68     		ldr	r3, [r7, #4]
 886 0436 A02B     		cmp	r3, #160
 887 0438 13D0     		beq	.L50
 888              		.loc 1 612 0 discriminator 4
 889 043a 7B68     		ldr	r3, [r7, #4]
 890 043c B02B     		cmp	r3, #176
 891 043e 10D0     		beq	.L50
 892              		.loc 1 612 0 discriminator 5
 893 0440 7B68     		ldr	r3, [r7, #4]
 894 0442 C02B     		cmp	r3, #192
 895 0444 0DD0     		beq	.L50
 896              		.loc 1 612 0 discriminator 6
 897 0446 7B68     		ldr	r3, [r7, #4]
 898 0448 D02B     		cmp	r3, #208
 899 044a 0AD0     		beq	.L50
 900              		.loc 1 612 0 discriminator 7
 901 044c 7B68     		ldr	r3, [r7, #4]
 902 044e E02B     		cmp	r3, #224
 903 0450 07D0     		beq	.L50
 904              		.loc 1 612 0 discriminator 8
 905 0452 7B68     		ldr	r3, [r7, #4]
 906 0454 F02B     		cmp	r3, #240
 907 0456 04D0     		beq	.L50
 908              		.loc 1 612 0 discriminator 9
 909 0458 0B48     		ldr	r0, .L51
 910 045a 4FF41971 		mov	r1, #612
 911 045e FFF7FEFF 		bl	assert_failed
 912              	.L50:
 613:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 913              		.loc 1 613 0 is_stmt 1
 914 0462 0A4B     		ldr	r3, .L51+4
 915 0464 5B68     		ldr	r3, [r3, #4]
 916 0466 FB60     		str	r3, [r7, #12]
 614:../SPL/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 917              		.loc 1 615 0
 918 0468 FB68     		ldr	r3, [r7, #12]
 919 046a 23F0F003 		bic	r3, r3, #240
 920 046e FB60     		str	r3, [r7, #12]
 616:../SPL/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 921              		.loc 1 617 0
 922 0470 FA68     		ldr	r2, [r7, #12]
 923 0472 7B68     		ldr	r3, [r7, #4]
 924 0474 1343     		orrs	r3, r3, r2
 925 0476 FB60     		str	r3, [r7, #12]
 618:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 926              		.loc 1 619 0
 927 0478 044B     		ldr	r3, .L51+4
 928 047a FA68     		ldr	r2, [r7, #12]
 929 047c 5A60     		str	r2, [r3, #4]
 620:../SPL/src/stm32f10x_rcc.c **** }
 930              		.loc 1 620 0
 931 047e 07F11007 		add	r7, r7, #16
 932 0482 BD46     		mov	sp, r7
 933 0484 80BD     		pop	{r7, pc}
 934              	.L52:
 935 0486 00BF     		.align	2
 936              	.L51:
 937 0488 00000000 		.word	.LC0
 938 048c 00100240 		.word	1073876992
 939              		.cfi_endproc
 940              	.LFE39:
 942              		.align	2
 943              		.global	RCC_PCLK1Config
 944              		.thumb
 945              		.thumb_func
 947              	RCC_PCLK1Config:
 948              	.LFB40:
 621:../SPL/src/stm32f10x_rcc.c **** 
 622:../SPL/src/stm32f10x_rcc.c **** /**
 623:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../SPL/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 633:../SPL/src/stm32f10x_rcc.c ****   */
 634:../SPL/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../SPL/src/stm32f10x_rcc.c **** {
 949              		.loc 1 635 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 16
 952              		@ frame_needed = 1, uses_anonymous_args = 0
 953 0490 80B5     		push	{r7, lr}
 954              	.LCFI31:
 955              		.cfi_def_cfa_offset 8
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0492 84B0     		sub	sp, sp, #16
 959              	.LCFI32:
 960              		.cfi_def_cfa_offset 24
 961 0494 00AF     		add	r7, sp, #0
 962              	.LCFI33:
 963              		.cfi_def_cfa_register 7
 964 0496 7860     		str	r0, [r7, #4]
 636:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 965              		.loc 1 636 0
 966 0498 4FF00003 		mov	r3, #0
 967 049c FB60     		str	r3, [r7, #12]
 637:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 968              		.loc 1 638 0
 969 049e 7B68     		ldr	r3, [r7, #4]
 970 04a0 002B     		cmp	r3, #0
 971 04a2 14D0     		beq	.L54
 972              		.loc 1 638 0 is_stmt 0 discriminator 1
 973 04a4 7B68     		ldr	r3, [r7, #4]
 974 04a6 B3F5806F 		cmp	r3, #1024
 975 04aa 10D0     		beq	.L54
 976              		.loc 1 638 0 discriminator 2
 977 04ac 7B68     		ldr	r3, [r7, #4]
 978 04ae B3F5A06F 		cmp	r3, #1280
 979 04b2 0CD0     		beq	.L54
 980              		.loc 1 638 0 discriminator 3
 981 04b4 7B68     		ldr	r3, [r7, #4]
 982 04b6 B3F5C06F 		cmp	r3, #1536
 983 04ba 08D0     		beq	.L54
 984              		.loc 1 638 0 discriminator 4
 985 04bc 7B68     		ldr	r3, [r7, #4]
 986 04be B3F5E06F 		cmp	r3, #1792
 987 04c2 04D0     		beq	.L54
 988              		.loc 1 638 0 discriminator 5
 989 04c4 0B48     		ldr	r0, .L55
 990 04c6 40F27E21 		movw	r1, #638
 991 04ca FFF7FEFF 		bl	assert_failed
 992              	.L54:
 639:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 993              		.loc 1 639 0 is_stmt 1
 994 04ce 0A4B     		ldr	r3, .L55+4
 995 04d0 5B68     		ldr	r3, [r3, #4]
 996 04d2 FB60     		str	r3, [r7, #12]
 640:../SPL/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 997              		.loc 1 641 0
 998 04d4 FB68     		ldr	r3, [r7, #12]
 999 04d6 23F4E063 		bic	r3, r3, #1792
 1000 04da FB60     		str	r3, [r7, #12]
 642:../SPL/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 1001              		.loc 1 643 0
 1002 04dc FA68     		ldr	r2, [r7, #12]
 1003 04de 7B68     		ldr	r3, [r7, #4]
 1004 04e0 1343     		orrs	r3, r3, r2
 1005 04e2 FB60     		str	r3, [r7, #12]
 644:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 1006              		.loc 1 645 0
 1007 04e4 044B     		ldr	r3, .L55+4
 1008 04e6 FA68     		ldr	r2, [r7, #12]
 1009 04e8 5A60     		str	r2, [r3, #4]
 646:../SPL/src/stm32f10x_rcc.c **** }
 1010              		.loc 1 646 0
 1011 04ea 07F11007 		add	r7, r7, #16
 1012 04ee BD46     		mov	sp, r7
 1013 04f0 80BD     		pop	{r7, pc}
 1014              	.L56:
 1015 04f2 00BF     		.align	2
 1016              	.L55:
 1017 04f4 00000000 		.word	.LC0
 1018 04f8 00100240 		.word	1073876992
 1019              		.cfi_endproc
 1020              	.LFE40:
 1022              		.align	2
 1023              		.global	RCC_PCLK2Config
 1024              		.thumb
 1025              		.thumb_func
 1027              	RCC_PCLK2Config:
 1028              	.LFB41:
 647:../SPL/src/stm32f10x_rcc.c **** 
 648:../SPL/src/stm32f10x_rcc.c **** /**
 649:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../SPL/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 659:../SPL/src/stm32f10x_rcc.c ****   */
 660:../SPL/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../SPL/src/stm32f10x_rcc.c **** {
 1029              		.loc 1 661 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 16
 1032              		@ frame_needed = 1, uses_anonymous_args = 0
 1033 04fc 80B5     		push	{r7, lr}
 1034              	.LCFI34:
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 04fe 84B0     		sub	sp, sp, #16
 1039              	.LCFI35:
 1040              		.cfi_def_cfa_offset 24
 1041 0500 00AF     		add	r7, sp, #0
 1042              	.LCFI36:
 1043              		.cfi_def_cfa_register 7
 1044 0502 7860     		str	r0, [r7, #4]
 662:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 1045              		.loc 1 662 0
 1046 0504 4FF00003 		mov	r3, #0
 1047 0508 FB60     		str	r3, [r7, #12]
 663:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 1048              		.loc 1 664 0
 1049 050a 7B68     		ldr	r3, [r7, #4]
 1050 050c 002B     		cmp	r3, #0
 1051 050e 14D0     		beq	.L58
 1052              		.loc 1 664 0 is_stmt 0 discriminator 1
 1053 0510 7B68     		ldr	r3, [r7, #4]
 1054 0512 B3F5806F 		cmp	r3, #1024
 1055 0516 10D0     		beq	.L58
 1056              		.loc 1 664 0 discriminator 2
 1057 0518 7B68     		ldr	r3, [r7, #4]
 1058 051a B3F5A06F 		cmp	r3, #1280
 1059 051e 0CD0     		beq	.L58
 1060              		.loc 1 664 0 discriminator 3
 1061 0520 7B68     		ldr	r3, [r7, #4]
 1062 0522 B3F5C06F 		cmp	r3, #1536
 1063 0526 08D0     		beq	.L58
 1064              		.loc 1 664 0 discriminator 4
 1065 0528 7B68     		ldr	r3, [r7, #4]
 1066 052a B3F5E06F 		cmp	r3, #1792
 1067 052e 04D0     		beq	.L58
 1068              		.loc 1 664 0 discriminator 5
 1069 0530 0C48     		ldr	r0, .L59
 1070 0532 4FF42671 		mov	r1, #664
 1071 0536 FFF7FEFF 		bl	assert_failed
 1072              	.L58:
 665:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 1073              		.loc 1 665 0 is_stmt 1
 1074 053a 0B4B     		ldr	r3, .L59+4
 1075 053c 5B68     		ldr	r3, [r3, #4]
 1076 053e FB60     		str	r3, [r7, #12]
 666:../SPL/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 1077              		.loc 1 667 0
 1078 0540 FB68     		ldr	r3, [r7, #12]
 1079 0542 23F46053 		bic	r3, r3, #14336
 1080 0546 FB60     		str	r3, [r7, #12]
 668:../SPL/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1081              		.loc 1 669 0
 1082 0548 7B68     		ldr	r3, [r7, #4]
 1083 054a 4FEAC303 		lsl	r3, r3, #3
 1084 054e FA68     		ldr	r2, [r7, #12]
 1085 0550 1343     		orrs	r3, r3, r2
 1086 0552 FB60     		str	r3, [r7, #12]
 670:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 1087              		.loc 1 671 0
 1088 0554 044B     		ldr	r3, .L59+4
 1089 0556 FA68     		ldr	r2, [r7, #12]
 1090 0558 5A60     		str	r2, [r3, #4]
 672:../SPL/src/stm32f10x_rcc.c **** }
 1091              		.loc 1 672 0
 1092 055a 07F11007 		add	r7, r7, #16
 1093 055e BD46     		mov	sp, r7
 1094 0560 80BD     		pop	{r7, pc}
 1095              	.L60:
 1096 0562 00BF     		.align	2
 1097              	.L59:
 1098 0564 00000000 		.word	.LC0
 1099 0568 00100240 		.word	1073876992
 1100              		.cfi_endproc
 1101              	.LFE41:
 1103              		.align	2
 1104              		.global	RCC_ITConfig
 1105              		.thumb
 1106              		.thumb_func
 1108              	RCC_ITConfig:
 1109              	.LFB42:
 673:../SPL/src/stm32f10x_rcc.c **** 
 674:../SPL/src/stm32f10x_rcc.c **** /**
 675:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../SPL/src/stm32f10x_rcc.c ****   * 
 678:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../SPL/src/stm32f10x_rcc.c ****   *   of the following values        
 680:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../SPL/src/stm32f10x_rcc.c ****   * 
 688:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../SPL/src/stm32f10x_rcc.c ****   *   following values        
 690:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../SPL/src/stm32f10x_rcc.c ****   *       
 696:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 699:../SPL/src/stm32f10x_rcc.c ****   */
 700:../SPL/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../SPL/src/stm32f10x_rcc.c **** {
 1110              		.loc 1 701 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 8
 1113              		@ frame_needed = 1, uses_anonymous_args = 0
 1114 056c 80B5     		push	{r7, lr}
 1115              	.LCFI37:
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119 056e 82B0     		sub	sp, sp, #8
 1120              	.LCFI38:
 1121              		.cfi_def_cfa_offset 16
 1122 0570 00AF     		add	r7, sp, #0
 1123              	.LCFI39:
 1124              		.cfi_def_cfa_register 7
 1125 0572 0246     		mov	r2, r0
 1126 0574 0B46     		mov	r3, r1
 1127 0576 FA71     		strb	r2, [r7, #7]
 1128 0578 BB71     		strb	r3, [r7, #6]
 702:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 1129              		.loc 1 703 0
 1130 057a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1131 057c 03F0E003 		and	r3, r3, #224
 1132 0580 002B     		cmp	r3, #0
 1133 0582 02D1     		bne	.L62
 1134              		.loc 1 703 0 is_stmt 0 discriminator 2
 1135 0584 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1136 0586 002B     		cmp	r3, #0
 1137 0588 04D1     		bne	.L63
 1138              	.L62:
 1139              		.loc 1 703 0 discriminator 1
 1140 058a 1548     		ldr	r0, .L67
 1141 058c 40F2BF21 		movw	r1, #703
 1142 0590 FFF7FEFF 		bl	assert_failed
 1143              	.L63:
 704:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1144              		.loc 1 704 0 is_stmt 1
 1145 0594 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1146 0596 002B     		cmp	r3, #0
 1147 0598 07D0     		beq	.L64
 1148              		.loc 1 704 0 is_stmt 0 discriminator 1
 1149 059a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1150 059c 012B     		cmp	r3, #1
 1151 059e 04D0     		beq	.L64
 1152              		.loc 1 704 0 discriminator 2
 1153 05a0 0F48     		ldr	r0, .L67
 1154 05a2 4FF43071 		mov	r1, #704
 1155 05a6 FFF7FEFF 		bl	assert_failed
 1156              	.L64:
 705:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1157              		.loc 1 705 0 is_stmt 1
 1158 05aa BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1159 05ac 002B     		cmp	r3, #0
 1160 05ae 08D0     		beq	.L65
 706:../SPL/src/stm32f10x_rcc.c ****   {
 707:../SPL/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../SPL/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1161              		.loc 1 708 0
 1162 05b0 0C4B     		ldr	r3, .L67+4
 1163 05b2 0C4A     		ldr	r2, .L67+4
 1164 05b4 1278     		ldrb	r2, [r2, #0]
 1165 05b6 D1B2     		uxtb	r1, r2
 1166 05b8 FA79     		ldrb	r2, [r7, #7]
 1167 05ba 0A43     		orrs	r2, r2, r1
 1168 05bc D2B2     		uxtb	r2, r2
 1169 05be 1A70     		strb	r2, [r3, #0]
 1170 05c0 0AE0     		b	.L61
 1171              	.L65:
 709:../SPL/src/stm32f10x_rcc.c ****   }
 710:../SPL/src/stm32f10x_rcc.c ****   else
 711:../SPL/src/stm32f10x_rcc.c ****   {
 712:../SPL/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../SPL/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1172              		.loc 1 713 0
 1173 05c2 084B     		ldr	r3, .L67+4
 1174 05c4 074A     		ldr	r2, .L67+4
 1175 05c6 1278     		ldrb	r2, [r2, #0]
 1176 05c8 D1B2     		uxtb	r1, r2
 1177 05ca FA79     		ldrb	r2, [r7, #7]
 1178 05cc 6FEA0202 		mvn	r2, r2
 1179 05d0 D2B2     		uxtb	r2, r2
 1180 05d2 0A40     		ands	r2, r2, r1
 1181 05d4 D2B2     		uxtb	r2, r2
 1182 05d6 1A70     		strb	r2, [r3, #0]
 1183              	.L61:
 714:../SPL/src/stm32f10x_rcc.c ****   }
 715:../SPL/src/stm32f10x_rcc.c **** }
 1184              		.loc 1 715 0
 1185 05d8 07F10807 		add	r7, r7, #8
 1186 05dc BD46     		mov	sp, r7
 1187 05de 80BD     		pop	{r7, pc}
 1188              	.L68:
 1189              		.align	2
 1190              	.L67:
 1191 05e0 00000000 		.word	.LC0
 1192 05e4 09100240 		.word	1073877001
 1193              		.cfi_endproc
 1194              	.LFE42:
 1196              		.align	2
 1197              		.global	RCC_USBCLKConfig
 1198              		.thumb
 1199              		.thumb_func
 1201              	RCC_USBCLKConfig:
 1202              	.LFB43:
 716:../SPL/src/stm32f10x_rcc.c **** 
 717:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../SPL/src/stm32f10x_rcc.c **** /**
 719:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../SPL/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../SPL/src/stm32f10x_rcc.c ****   *                                     clock source
 725:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 727:../SPL/src/stm32f10x_rcc.c ****   */
 728:../SPL/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../SPL/src/stm32f10x_rcc.c **** {
 1203              		.loc 1 729 0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 8
 1206              		@ frame_needed = 1, uses_anonymous_args = 0
 1207 05e8 80B5     		push	{r7, lr}
 1208              	.LCFI40:
 1209              		.cfi_def_cfa_offset 8
 1210              		.cfi_offset 7, -8
 1211              		.cfi_offset 14, -4
 1212 05ea 82B0     		sub	sp, sp, #8
 1213              	.LCFI41:
 1214              		.cfi_def_cfa_offset 16
 1215 05ec 00AF     		add	r7, sp, #0
 1216              	.LCFI42:
 1217              		.cfi_def_cfa_register 7
 1218 05ee 7860     		str	r0, [r7, #4]
 730:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 1219              		.loc 1 731 0
 1220 05f0 7B68     		ldr	r3, [r7, #4]
 1221 05f2 002B     		cmp	r3, #0
 1222 05f4 07D0     		beq	.L70
 1223              		.loc 1 731 0 is_stmt 0 discriminator 1
 1224 05f6 7B68     		ldr	r3, [r7, #4]
 1225 05f8 012B     		cmp	r3, #1
 1226 05fa 04D0     		beq	.L70
 1227              		.loc 1 731 0 discriminator 2
 1228 05fc 0548     		ldr	r0, .L71
 1229 05fe 40F2DB21 		movw	r1, #731
 1230 0602 FFF7FEFF 		bl	assert_failed
 1231              	.L70:
 732:../SPL/src/stm32f10x_rcc.c **** 
 733:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 1232              		.loc 1 733 0 is_stmt 1
 1233 0606 044B     		ldr	r3, .L71+4
 1234 0608 7A68     		ldr	r2, [r7, #4]
 1235 060a 1A60     		str	r2, [r3, #0]
 734:../SPL/src/stm32f10x_rcc.c **** }
 1236              		.loc 1 734 0
 1237 060c 07F10807 		add	r7, r7, #8
 1238 0610 BD46     		mov	sp, r7
 1239 0612 80BD     		pop	{r7, pc}
 1240              	.L72:
 1241              		.align	2
 1242              	.L71:
 1243 0614 00000000 		.word	.LC0
 1244 0618 D8004242 		.word	1111621848
 1245              		.cfi_endproc
 1246              	.LFE43:
 1248              		.align	2
 1249              		.global	RCC_ADCCLKConfig
 1250              		.thumb
 1251              		.thumb_func
 1253              	RCC_ADCCLKConfig:
 1254              	.LFB44:
 735:../SPL/src/stm32f10x_rcc.c **** #else
 736:../SPL/src/stm32f10x_rcc.c **** /**
 737:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../SPL/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../SPL/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../SPL/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../SPL/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 745:../SPL/src/stm32f10x_rcc.c ****   */
 746:../SPL/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../SPL/src/stm32f10x_rcc.c **** {
 748:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../SPL/src/stm32f10x_rcc.c **** 
 751:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../SPL/src/stm32f10x_rcc.c **** }
 753:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../SPL/src/stm32f10x_rcc.c **** 
 755:../SPL/src/stm32f10x_rcc.c **** /**
 756:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../SPL/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 765:../SPL/src/stm32f10x_rcc.c ****   */
 766:../SPL/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../SPL/src/stm32f10x_rcc.c **** {
 1255              		.loc 1 767 0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 16
 1258              		@ frame_needed = 1, uses_anonymous_args = 0
 1259 061c 80B5     		push	{r7, lr}
 1260              	.LCFI43:
 1261              		.cfi_def_cfa_offset 8
 1262              		.cfi_offset 7, -8
 1263              		.cfi_offset 14, -4
 1264 061e 84B0     		sub	sp, sp, #16
 1265              	.LCFI44:
 1266              		.cfi_def_cfa_offset 24
 1267 0620 00AF     		add	r7, sp, #0
 1268              	.LCFI45:
 1269              		.cfi_def_cfa_register 7
 1270 0622 7860     		str	r0, [r7, #4]
 768:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 1271              		.loc 1 768 0
 1272 0624 4FF00003 		mov	r3, #0
 1273 0628 FB60     		str	r3, [r7, #12]
 769:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 1274              		.loc 1 770 0
 1275 062a 7B68     		ldr	r3, [r7, #4]
 1276 062c 002B     		cmp	r3, #0
 1277 062e 10D0     		beq	.L74
 1278              		.loc 1 770 0 is_stmt 0 discriminator 1
 1279 0630 7B68     		ldr	r3, [r7, #4]
 1280 0632 B3F5804F 		cmp	r3, #16384
 1281 0636 0CD0     		beq	.L74
 1282              		.loc 1 770 0 discriminator 2
 1283 0638 7B68     		ldr	r3, [r7, #4]
 1284 063a B3F5004F 		cmp	r3, #32768
 1285 063e 08D0     		beq	.L74
 1286              		.loc 1 770 0 discriminator 3
 1287 0640 7B68     		ldr	r3, [r7, #4]
 1288 0642 B3F5404F 		cmp	r3, #49152
 1289 0646 04D0     		beq	.L74
 1290              		.loc 1 770 0 discriminator 4
 1291 0648 0B48     		ldr	r0, .L75
 1292 064a 40F20231 		movw	r1, #770
 1293 064e FFF7FEFF 		bl	assert_failed
 1294              	.L74:
 771:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 1295              		.loc 1 771 0 is_stmt 1
 1296 0652 0A4B     		ldr	r3, .L75+4
 1297 0654 5B68     		ldr	r3, [r3, #4]
 1298 0656 FB60     		str	r3, [r7, #12]
 772:../SPL/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 1299              		.loc 1 773 0
 1300 0658 FB68     		ldr	r3, [r7, #12]
 1301 065a 23F44043 		bic	r3, r3, #49152
 1302 065e FB60     		str	r3, [r7, #12]
 774:../SPL/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 1303              		.loc 1 775 0
 1304 0660 FA68     		ldr	r2, [r7, #12]
 1305 0662 7B68     		ldr	r3, [r7, #4]
 1306 0664 1343     		orrs	r3, r3, r2
 1307 0666 FB60     		str	r3, [r7, #12]
 776:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 1308              		.loc 1 777 0
 1309 0668 044B     		ldr	r3, .L75+4
 1310 066a FA68     		ldr	r2, [r7, #12]
 1311 066c 5A60     		str	r2, [r3, #4]
 778:../SPL/src/stm32f10x_rcc.c **** }
 1312              		.loc 1 778 0
 1313 066e 07F11007 		add	r7, r7, #16
 1314 0672 BD46     		mov	sp, r7
 1315 0674 80BD     		pop	{r7, pc}
 1316              	.L76:
 1317 0676 00BF     		.align	2
 1318              	.L75:
 1319 0678 00000000 		.word	.LC0
 1320 067c 00100240 		.word	1073876992
 1321              		.cfi_endproc
 1322              	.LFE44:
 1324              		.align	2
 1325              		.global	RCC_LSEConfig
 1326              		.thumb
 1327              		.thumb_func
 1329              	RCC_LSEConfig:
 1330              	.LFB45:
 779:../SPL/src/stm32f10x_rcc.c **** 
 780:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../SPL/src/stm32f10x_rcc.c **** /**
 782:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../SPL/src/stm32f10x_rcc.c ****   * @note
 784:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 791:../SPL/src/stm32f10x_rcc.c ****   */
 792:../SPL/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../SPL/src/stm32f10x_rcc.c **** {
 794:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../SPL/src/stm32f10x_rcc.c **** 
 797:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../SPL/src/stm32f10x_rcc.c **** }
 799:../SPL/src/stm32f10x_rcc.c **** 
 800:../SPL/src/stm32f10x_rcc.c **** /**
 801:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../SPL/src/stm32f10x_rcc.c ****   * @note
 803:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 810:../SPL/src/stm32f10x_rcc.c ****   */
 811:../SPL/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../SPL/src/stm32f10x_rcc.c **** {
 813:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../SPL/src/stm32f10x_rcc.c **** 
 816:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../SPL/src/stm32f10x_rcc.c **** }
 818:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../SPL/src/stm32f10x_rcc.c **** 
 820:../SPL/src/stm32f10x_rcc.c **** /**
 821:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 828:../SPL/src/stm32f10x_rcc.c ****   */
 829:../SPL/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../SPL/src/stm32f10x_rcc.c **** {
 1331              		.loc 1 830 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 8
 1334              		@ frame_needed = 1, uses_anonymous_args = 0
 1335 0680 80B5     		push	{r7, lr}
 1336              	.LCFI46:
 1337              		.cfi_def_cfa_offset 8
 1338              		.cfi_offset 7, -8
 1339              		.cfi_offset 14, -4
 1340 0682 82B0     		sub	sp, sp, #8
 1341              	.LCFI47:
 1342              		.cfi_def_cfa_offset 16
 1343 0684 00AF     		add	r7, sp, #0
 1344              	.LCFI48:
 1345              		.cfi_def_cfa_register 7
 1346 0686 0346     		mov	r3, r0
 1347 0688 FB71     		strb	r3, [r7, #7]
 831:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 1348              		.loc 1 832 0
 1349 068a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1350 068c 002B     		cmp	r3, #0
 1351 068e 0AD0     		beq	.L78
 1352              		.loc 1 832 0 is_stmt 0 discriminator 1
 1353 0690 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1354 0692 012B     		cmp	r3, #1
 1355 0694 07D0     		beq	.L78
 1356              		.loc 1 832 0 discriminator 2
 1357 0696 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1358 0698 042B     		cmp	r3, #4
 1359 069a 04D0     		beq	.L78
 1360              		.loc 1 832 0 discriminator 3
 1361 069c 1048     		ldr	r0, .L84
 1362 069e 4FF45071 		mov	r1, #832
 1363 06a2 FFF7FEFF 		bl	assert_failed
 1364              	.L78:
 833:../SPL/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../SPL/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 1365              		.loc 1 835 0 is_stmt 1
 1366 06a6 0F4B     		ldr	r3, .L84+4
 1367 06a8 4FF00002 		mov	r2, #0
 1368 06ac 1A70     		strb	r2, [r3, #0]
 836:../SPL/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 1369              		.loc 1 837 0
 1370 06ae 0D4B     		ldr	r3, .L84+4
 1371 06b0 4FF00002 		mov	r2, #0
 1372 06b4 1A70     		strb	r2, [r3, #0]
 838:../SPL/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../SPL/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 1373              		.loc 1 839 0
 1374 06b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1375 06b8 012B     		cmp	r3, #1
 1376 06ba 02D0     		beq	.L80
 1377 06bc 042B     		cmp	r3, #4
 1378 06be 05D0     		beq	.L81
 1379 06c0 09E0     		b	.L83
 1380              	.L80:
 840:../SPL/src/stm32f10x_rcc.c ****   {
 841:../SPL/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../SPL/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../SPL/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 1381              		.loc 1 843 0
 1382 06c2 084B     		ldr	r3, .L84+4
 1383 06c4 4FF00102 		mov	r2, #1
 1384 06c8 1A70     		strb	r2, [r3, #0]
 844:../SPL/src/stm32f10x_rcc.c ****       break;
 1385              		.loc 1 844 0
 1386 06ca 05E0     		b	.L77
 1387              	.L81:
 845:../SPL/src/stm32f10x_rcc.c ****       
 846:../SPL/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../SPL/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../SPL/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 1388              		.loc 1 848 0
 1389 06cc 054B     		ldr	r3, .L84+4
 1390 06ce 4FF00502 		mov	r2, #5
 1391 06d2 1A70     		strb	r2, [r3, #0]
 849:../SPL/src/stm32f10x_rcc.c ****       break;            
 1392              		.loc 1 849 0
 1393 06d4 00E0     		b	.L77
 1394              	.L83:
 850:../SPL/src/stm32f10x_rcc.c ****       
 851:../SPL/src/stm32f10x_rcc.c ****     default:
 852:../SPL/src/stm32f10x_rcc.c ****       break;      
 1395              		.loc 1 852 0
 1396 06d6 00BF     		nop
 1397              	.L77:
 853:../SPL/src/stm32f10x_rcc.c ****   }
 854:../SPL/src/stm32f10x_rcc.c **** }
 1398              		.loc 1 854 0
 1399 06d8 07F10807 		add	r7, r7, #8
 1400 06dc BD46     		mov	sp, r7
 1401 06de 80BD     		pop	{r7, pc}
 1402              	.L85:
 1403              		.align	2
 1404              	.L84:
 1405 06e0 00000000 		.word	.LC0
 1406 06e4 20100240 		.word	1073877024
 1407              		.cfi_endproc
 1408              	.LFE45:
 1410              		.align	2
 1411              		.global	RCC_LSICmd
 1412              		.thumb
 1413              		.thumb_func
 1415              	RCC_LSICmd:
 1416              	.LFB46:
 855:../SPL/src/stm32f10x_rcc.c **** 
 856:../SPL/src/stm32f10x_rcc.c **** /**
 857:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../SPL/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 861:../SPL/src/stm32f10x_rcc.c ****   */
 862:../SPL/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../SPL/src/stm32f10x_rcc.c **** {
 1417              		.loc 1 863 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 8
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 06e8 80B5     		push	{r7, lr}
 1422              	.LCFI49:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 06ea 82B0     		sub	sp, sp, #8
 1427              	.LCFI50:
 1428              		.cfi_def_cfa_offset 16
 1429 06ec 00AF     		add	r7, sp, #0
 1430              	.LCFI51:
 1431              		.cfi_def_cfa_register 7
 1432 06ee 0346     		mov	r3, r0
 1433 06f0 FB71     		strb	r3, [r7, #7]
 864:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1434              		.loc 1 865 0
 1435 06f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1436 06f4 002B     		cmp	r3, #0
 1437 06f6 07D0     		beq	.L87
 1438              		.loc 1 865 0 is_stmt 0 discriminator 1
 1439 06f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1440 06fa 012B     		cmp	r3, #1
 1441 06fc 04D0     		beq	.L87
 1442              		.loc 1 865 0 discriminator 2
 1443 06fe 0648     		ldr	r0, .L88
 1444 0700 40F26131 		movw	r1, #865
 1445 0704 FFF7FEFF 		bl	assert_failed
 1446              	.L87:
 866:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 1447              		.loc 1 866 0 is_stmt 1
 1448 0708 044B     		ldr	r3, .L88+4
 1449 070a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1450 070c 1A60     		str	r2, [r3, #0]
 867:../SPL/src/stm32f10x_rcc.c **** }
 1451              		.loc 1 867 0
 1452 070e 07F10807 		add	r7, r7, #8
 1453 0712 BD46     		mov	sp, r7
 1454 0714 80BD     		pop	{r7, pc}
 1455              	.L89:
 1456 0716 00BF     		.align	2
 1457              	.L88:
 1458 0718 00000000 		.word	.LC0
 1459 071c 80044242 		.word	1111622784
 1460              		.cfi_endproc
 1461              	.LFE46:
 1463              		.align	2
 1464              		.global	RCC_RTCCLKConfig
 1465              		.thumb
 1466              		.thumb_func
 1468              	RCC_RTCCLKConfig:
 1469              	.LFB47:
 868:../SPL/src/stm32f10x_rcc.c **** 
 869:../SPL/src/stm32f10x_rcc.c **** /**
 870:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../SPL/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 878:../SPL/src/stm32f10x_rcc.c ****   */
 879:../SPL/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../SPL/src/stm32f10x_rcc.c **** {
 1470              		.loc 1 880 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 8
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474 0720 80B5     		push	{r7, lr}
 1475              	.LCFI52:
 1476              		.cfi_def_cfa_offset 8
 1477              		.cfi_offset 7, -8
 1478              		.cfi_offset 14, -4
 1479 0722 82B0     		sub	sp, sp, #8
 1480              	.LCFI53:
 1481              		.cfi_def_cfa_offset 16
 1482 0724 00AF     		add	r7, sp, #0
 1483              	.LCFI54:
 1484              		.cfi_def_cfa_register 7
 1485 0726 7860     		str	r0, [r7, #4]
 881:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 1486              		.loc 1 882 0
 1487 0728 7B68     		ldr	r3, [r7, #4]
 1488 072a B3F5807F 		cmp	r3, #256
 1489 072e 0CD0     		beq	.L91
 1490              		.loc 1 882 0 is_stmt 0 discriminator 1
 1491 0730 7B68     		ldr	r3, [r7, #4]
 1492 0732 B3F5007F 		cmp	r3, #512
 1493 0736 08D0     		beq	.L91
 1494              		.loc 1 882 0 discriminator 2
 1495 0738 7B68     		ldr	r3, [r7, #4]
 1496 073a B3F5407F 		cmp	r3, #768
 1497 073e 04D0     		beq	.L91
 1498              		.loc 1 882 0 discriminator 3
 1499 0740 0748     		ldr	r0, .L92
 1500 0742 40F27231 		movw	r1, #882
 1501 0746 FFF7FEFF 		bl	assert_failed
 1502              	.L91:
 883:../SPL/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../SPL/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1503              		.loc 1 884 0 is_stmt 1
 1504 074a 064B     		ldr	r3, .L92+4
 1505 074c 054A     		ldr	r2, .L92+4
 1506 074e 116A     		ldr	r1, [r2, #32]
 1507 0750 7A68     		ldr	r2, [r7, #4]
 1508 0752 0A43     		orrs	r2, r2, r1
 1509 0754 1A62     		str	r2, [r3, #32]
 885:../SPL/src/stm32f10x_rcc.c **** }
 1510              		.loc 1 885 0
 1511 0756 07F10807 		add	r7, r7, #8
 1512 075a BD46     		mov	sp, r7
 1513 075c 80BD     		pop	{r7, pc}
 1514              	.L93:
 1515 075e 00BF     		.align	2
 1516              	.L92:
 1517 0760 00000000 		.word	.LC0
 1518 0764 00100240 		.word	1073876992
 1519              		.cfi_endproc
 1520              	.LFE47:
 1522              		.align	2
 1523              		.global	RCC_RTCCLKCmd
 1524              		.thumb
 1525              		.thumb_func
 1527              	RCC_RTCCLKCmd:
 1528              	.LFB48:
 886:../SPL/src/stm32f10x_rcc.c **** 
 887:../SPL/src/stm32f10x_rcc.c **** /**
 888:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../SPL/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 892:../SPL/src/stm32f10x_rcc.c ****   */
 893:../SPL/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../SPL/src/stm32f10x_rcc.c **** {
 1529              		.loc 1 894 0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 8
 1532              		@ frame_needed = 1, uses_anonymous_args = 0
 1533 0768 80B5     		push	{r7, lr}
 1534              	.LCFI55:
 1535              		.cfi_def_cfa_offset 8
 1536              		.cfi_offset 7, -8
 1537              		.cfi_offset 14, -4
 1538 076a 82B0     		sub	sp, sp, #8
 1539              	.LCFI56:
 1540              		.cfi_def_cfa_offset 16
 1541 076c 00AF     		add	r7, sp, #0
 1542              	.LCFI57:
 1543              		.cfi_def_cfa_register 7
 1544 076e 0346     		mov	r3, r0
 1545 0770 FB71     		strb	r3, [r7, #7]
 895:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1546              		.loc 1 896 0
 1547 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1548 0774 002B     		cmp	r3, #0
 1549 0776 07D0     		beq	.L95
 1550              		.loc 1 896 0 is_stmt 0 discriminator 1
 1551 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1552 077a 012B     		cmp	r3, #1
 1553 077c 04D0     		beq	.L95
 1554              		.loc 1 896 0 discriminator 2
 1555 077e 0648     		ldr	r0, .L96
 1556 0780 4FF46071 		mov	r1, #896
 1557 0784 FFF7FEFF 		bl	assert_failed
 1558              	.L95:
 897:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1559              		.loc 1 897 0 is_stmt 1
 1560 0788 044B     		ldr	r3, .L96+4
 1561 078a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1562 078c 1A60     		str	r2, [r3, #0]
 898:../SPL/src/stm32f10x_rcc.c **** }
 1563              		.loc 1 898 0
 1564 078e 07F10807 		add	r7, r7, #8
 1565 0792 BD46     		mov	sp, r7
 1566 0794 80BD     		pop	{r7, pc}
 1567              	.L97:
 1568 0796 00BF     		.align	2
 1569              	.L96:
 1570 0798 00000000 		.word	.LC0
 1571 079c 3C044242 		.word	1111622716
 1572              		.cfi_endproc
 1573              	.LFE48:
 1575              		.align	2
 1576              		.global	RCC_GetClocksFreq
 1577              		.thumb
 1578              		.thumb_func
 1580              	RCC_GetClocksFreq:
 1581              	.LFB49:
 899:../SPL/src/stm32f10x_rcc.c **** 
 900:../SPL/src/stm32f10x_rcc.c **** /**
 901:../SPL/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../SPL/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../SPL/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../SPL/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 907:../SPL/src/stm32f10x_rcc.c ****   */
 908:../SPL/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../SPL/src/stm32f10x_rcc.c **** {
 1582              		.loc 1 909 0
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 32
 1585              		@ frame_needed = 1, uses_anonymous_args = 0
 1586              		@ link register save eliminated.
 1587 07a0 80B4     		push	{r7}
 1588              	.LCFI58:
 1589              		.cfi_def_cfa_offset 4
 1590              		.cfi_offset 7, -4
 1591 07a2 89B0     		sub	sp, sp, #36
 1592              	.LCFI59:
 1593              		.cfi_def_cfa_offset 40
 1594 07a4 00AF     		add	r7, sp, #0
 1595              	.LCFI60:
 1596              		.cfi_def_cfa_register 7
 1597 07a6 7860     		str	r0, [r7, #4]
 910:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1598              		.loc 1 910 0
 1599 07a8 4FF00003 		mov	r3, #0
 1600 07ac FB61     		str	r3, [r7, #28]
 1601 07ae 4FF00003 		mov	r3, #0
 1602 07b2 BB61     		str	r3, [r7, #24]
 1603 07b4 4FF00003 		mov	r3, #0
 1604 07b8 7B61     		str	r3, [r7, #20]
 1605 07ba 4FF00003 		mov	r3, #0
 1606 07be 3B61     		str	r3, [r7, #16]
 911:../SPL/src/stm32f10x_rcc.c **** 
 912:../SPL/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../SPL/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../SPL/src/stm32f10x_rcc.c **** 
 916:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../SPL/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 1607              		.loc 1 917 0
 1608 07c0 4FF00003 		mov	r3, #0
 1609 07c4 FB60     		str	r3, [r7, #12]
 918:../SPL/src/stm32f10x_rcc.c **** #endif
 919:../SPL/src/stm32f10x_rcc.c ****     
 920:../SPL/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1610              		.loc 1 921 0
 1611 07c6 504B     		ldr	r3, .L107
 1612 07c8 5B68     		ldr	r3, [r3, #4]
 1613 07ca 03F00C03 		and	r3, r3, #12
 1614 07ce FB61     		str	r3, [r7, #28]
 922:../SPL/src/stm32f10x_rcc.c ****   
 923:../SPL/src/stm32f10x_rcc.c ****   switch (tmp)
 1615              		.loc 1 923 0
 1616 07d0 FB69     		ldr	r3, [r7, #28]
 1617 07d2 042B     		cmp	r3, #4
 1618 07d4 07D0     		beq	.L101
 1619 07d6 082B     		cmp	r3, #8
 1620 07d8 09D0     		beq	.L102
 1621 07da 002B     		cmp	r3, #0
 1622 07dc 32D1     		bne	.L106
 1623              	.L100:
 924:../SPL/src/stm32f10x_rcc.c ****   {
 925:../SPL/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../SPL/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1624              		.loc 1 926 0
 1625 07de 7B68     		ldr	r3, [r7, #4]
 1626 07e0 4A4A     		ldr	r2, .L107+4
 1627 07e2 1A60     		str	r2, [r3, #0]
 927:../SPL/src/stm32f10x_rcc.c ****       break;
 1628              		.loc 1 927 0
 1629 07e4 32E0     		b	.L103
 1630              	.L101:
 928:../SPL/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../SPL/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1631              		.loc 1 929 0
 1632 07e6 7B68     		ldr	r3, [r7, #4]
 1633 07e8 484A     		ldr	r2, .L107+4
 1634 07ea 1A60     		str	r2, [r3, #0]
 930:../SPL/src/stm32f10x_rcc.c ****       break;
 1635              		.loc 1 930 0
 1636 07ec 2EE0     		b	.L103
 1637              	.L102:
 931:../SPL/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../SPL/src/stm32f10x_rcc.c **** 
 933:../SPL/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../SPL/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1638              		.loc 1 934 0
 1639 07ee 464B     		ldr	r3, .L107
 1640 07f0 5B68     		ldr	r3, [r3, #4]
 1641 07f2 03F47013 		and	r3, r3, #3932160
 1642 07f6 BB61     		str	r3, [r7, #24]
 935:../SPL/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1643              		.loc 1 935 0
 1644 07f8 434B     		ldr	r3, .L107
 1645 07fa 5B68     		ldr	r3, [r3, #4]
 1646 07fc 03F48033 		and	r3, r3, #65536
 1647 0800 7B61     		str	r3, [r7, #20]
 936:../SPL/src/stm32f10x_rcc.c ****       
 937:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../SPL/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1648              		.loc 1 938 0
 1649 0802 BB69     		ldr	r3, [r7, #24]
 1650 0804 4FEA9343 		lsr	r3, r3, #18
 1651 0808 03F10203 		add	r3, r3, #2
 1652 080c BB61     		str	r3, [r7, #24]
 939:../SPL/src/stm32f10x_rcc.c ****       
 940:../SPL/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1653              		.loc 1 940 0
 1654 080e 7B69     		ldr	r3, [r7, #20]
 1655 0810 002B     		cmp	r3, #0
 1656 0812 06D1     		bne	.L104
 941:../SPL/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../SPL/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1657              		.loc 1 942 0
 1658 0814 BB69     		ldr	r3, [r7, #24]
 1659 0816 3E4A     		ldr	r2, .L107+8
 1660 0818 02FB03F2 		mul	r2, r2, r3
 1661 081c 7B68     		ldr	r3, [r7, #4]
 1662 081e 1A60     		str	r2, [r3, #0]
 943:../SPL/src/stm32f10x_rcc.c ****       }
 944:../SPL/src/stm32f10x_rcc.c ****       else
 945:../SPL/src/stm32f10x_rcc.c ****       {
 946:../SPL/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../SPL/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../SPL/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../SPL/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../SPL/src/stm32f10x_rcc.c ****  #else
 951:../SPL/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../SPL/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../SPL/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../SPL/src/stm32f10x_rcc.c ****         }
 956:../SPL/src/stm32f10x_rcc.c ****         else
 957:../SPL/src/stm32f10x_rcc.c ****         {
 958:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../SPL/src/stm32f10x_rcc.c ****         }
 960:../SPL/src/stm32f10x_rcc.c ****  #endif
 961:../SPL/src/stm32f10x_rcc.c ****       }
 962:../SPL/src/stm32f10x_rcc.c **** #else
 963:../SPL/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../SPL/src/stm32f10x_rcc.c ****       
 965:../SPL/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../SPL/src/stm32f10x_rcc.c ****       {
 967:../SPL/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:../SPL/src/stm32f10x_rcc.c ****       }
 969:../SPL/src/stm32f10x_rcc.c ****       else
 970:../SPL/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../SPL/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../SPL/src/stm32f10x_rcc.c ****       }
 973:../SPL/src/stm32f10x_rcc.c ****             
 974:../SPL/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../SPL/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../SPL/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../SPL/src/stm32f10x_rcc.c ****       }
 978:../SPL/src/stm32f10x_rcc.c ****       else
 979:../SPL/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../SPL/src/stm32f10x_rcc.c ****         
 981:../SPL/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../SPL/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../SPL/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../SPL/src/stm32f10x_rcc.c ****         
 985:../SPL/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../SPL/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../SPL/src/stm32f10x_rcc.c ****         }
 989:../SPL/src/stm32f10x_rcc.c ****         else
 990:../SPL/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../SPL/src/stm32f10x_rcc.c ****           
 992:../SPL/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../SPL/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../SPL/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../SPL/src/stm32f10x_rcc.c ****         }
 997:../SPL/src/stm32f10x_rcc.c ****       }
 998:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../SPL/src/stm32f10x_rcc.c ****       break;
 1663              		.loc 1 999 0
 1664 0820 14E0     		b	.L103
 1665              	.L104:
 947:../SPL/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 1666              		.loc 1 947 0
 1667 0822 394B     		ldr	r3, .L107
 1668 0824 DB6A     		ldr	r3, [r3, #44]
 1669 0826 03F00F03 		and	r3, r3, #15
 1670 082a 03F10103 		add	r3, r3, #1
 1671 082e FB60     		str	r3, [r7, #12]
 949:../SPL/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 1672              		.loc 1 949 0
 1673 0830 364A     		ldr	r2, .L107+4
 1674 0832 FB68     		ldr	r3, [r7, #12]
 1675 0834 B2FBF3F3 		udiv	r3, r2, r3
 1676 0838 BA69     		ldr	r2, [r7, #24]
 1677 083a 02FB03F2 		mul	r2, r2, r3
 1678 083e 7B68     		ldr	r3, [r7, #4]
 1679 0840 1A60     		str	r2, [r3, #0]
 1680              		.loc 1 999 0
 1681 0842 03E0     		b	.L103
 1682              	.L106:
1000:../SPL/src/stm32f10x_rcc.c **** 
1001:../SPL/src/stm32f10x_rcc.c ****     default:
1002:../SPL/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1683              		.loc 1 1002 0
 1684 0844 7B68     		ldr	r3, [r7, #4]
 1685 0846 314A     		ldr	r2, .L107+4
 1686 0848 1A60     		str	r2, [r3, #0]
1003:../SPL/src/stm32f10x_rcc.c ****       break;
 1687              		.loc 1 1003 0
 1688 084a 00BF     		nop
 1689              	.L103:
1004:../SPL/src/stm32f10x_rcc.c ****   }
1005:../SPL/src/stm32f10x_rcc.c **** 
1006:../SPL/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../SPL/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1690              		.loc 1 1008 0
 1691 084c 2E4B     		ldr	r3, .L107
 1692 084e 5B68     		ldr	r3, [r3, #4]
 1693 0850 03F0F003 		and	r3, r3, #240
 1694 0854 FB61     		str	r3, [r7, #28]
1009:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1695              		.loc 1 1009 0
 1696 0856 FB69     		ldr	r3, [r7, #28]
 1697 0858 4FEA1313 		lsr	r3, r3, #4
 1698 085c FB61     		str	r3, [r7, #28]
1010:../SPL/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1699              		.loc 1 1010 0
 1700 085e 2D4A     		ldr	r2, .L107+12
 1701 0860 FB69     		ldr	r3, [r7, #28]
 1702 0862 D318     		adds	r3, r2, r3
 1703 0864 1B78     		ldrb	r3, [r3, #0]
 1704 0866 DBB2     		uxtb	r3, r3
 1705 0868 3B61     		str	r3, [r7, #16]
1011:../SPL/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1706              		.loc 1 1012 0
 1707 086a 7B68     		ldr	r3, [r7, #4]
 1708 086c 1A68     		ldr	r2, [r3, #0]
 1709 086e 3B69     		ldr	r3, [r7, #16]
 1710 0870 22FA03F2 		lsr	r2, r2, r3
 1711 0874 7B68     		ldr	r3, [r7, #4]
 1712 0876 5A60     		str	r2, [r3, #4]
1013:../SPL/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1713              		.loc 1 1014 0
 1714 0878 234B     		ldr	r3, .L107
 1715 087a 5B68     		ldr	r3, [r3, #4]
 1716 087c 03F4E063 		and	r3, r3, #1792
 1717 0880 FB61     		str	r3, [r7, #28]
1015:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1718              		.loc 1 1015 0
 1719 0882 FB69     		ldr	r3, [r7, #28]
 1720 0884 4FEA1323 		lsr	r3, r3, #8
 1721 0888 FB61     		str	r3, [r7, #28]
1016:../SPL/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1722              		.loc 1 1016 0
 1723 088a 224A     		ldr	r2, .L107+12
 1724 088c FB69     		ldr	r3, [r7, #28]
 1725 088e D318     		adds	r3, r2, r3
 1726 0890 1B78     		ldrb	r3, [r3, #0]
 1727 0892 DBB2     		uxtb	r3, r3
 1728 0894 3B61     		str	r3, [r7, #16]
1017:../SPL/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1729              		.loc 1 1018 0
 1730 0896 7B68     		ldr	r3, [r7, #4]
 1731 0898 5A68     		ldr	r2, [r3, #4]
 1732 089a 3B69     		ldr	r3, [r7, #16]
 1733 089c 22FA03F2 		lsr	r2, r2, r3
 1734 08a0 7B68     		ldr	r3, [r7, #4]
 1735 08a2 9A60     		str	r2, [r3, #8]
1019:../SPL/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1736              		.loc 1 1020 0
 1737 08a4 184B     		ldr	r3, .L107
 1738 08a6 5B68     		ldr	r3, [r3, #4]
 1739 08a8 03F46053 		and	r3, r3, #14336
 1740 08ac FB61     		str	r3, [r7, #28]
1021:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1741              		.loc 1 1021 0
 1742 08ae FB69     		ldr	r3, [r7, #28]
 1743 08b0 4FEAD323 		lsr	r3, r3, #11
 1744 08b4 FB61     		str	r3, [r7, #28]
1022:../SPL/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1745              		.loc 1 1022 0
 1746 08b6 174A     		ldr	r2, .L107+12
 1747 08b8 FB69     		ldr	r3, [r7, #28]
 1748 08ba D318     		adds	r3, r2, r3
 1749 08bc 1B78     		ldrb	r3, [r3, #0]
 1750 08be DBB2     		uxtb	r3, r3
 1751 08c0 3B61     		str	r3, [r7, #16]
1023:../SPL/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1752              		.loc 1 1024 0
 1753 08c2 7B68     		ldr	r3, [r7, #4]
 1754 08c4 5A68     		ldr	r2, [r3, #4]
 1755 08c6 3B69     		ldr	r3, [r7, #16]
 1756 08c8 22FA03F2 		lsr	r2, r2, r3
 1757 08cc 7B68     		ldr	r3, [r7, #4]
 1758 08ce DA60     		str	r2, [r3, #12]
1025:../SPL/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1759              		.loc 1 1026 0
 1760 08d0 0D4B     		ldr	r3, .L107
 1761 08d2 5B68     		ldr	r3, [r3, #4]
 1762 08d4 03F44043 		and	r3, r3, #49152
 1763 08d8 FB61     		str	r3, [r7, #28]
1027:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1764              		.loc 1 1027 0
 1765 08da FB69     		ldr	r3, [r7, #28]
 1766 08dc 4FEA9333 		lsr	r3, r3, #14
 1767 08e0 FB61     		str	r3, [r7, #28]
1028:../SPL/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1768              		.loc 1 1028 0
 1769 08e2 0D4A     		ldr	r2, .L107+16
 1770 08e4 FB69     		ldr	r3, [r7, #28]
 1771 08e6 D318     		adds	r3, r2, r3
 1772 08e8 1B78     		ldrb	r3, [r3, #0]
 1773 08ea DBB2     		uxtb	r3, r3
 1774 08ec 3B61     		str	r3, [r7, #16]
1029:../SPL/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1775              		.loc 1 1030 0
 1776 08ee 7B68     		ldr	r3, [r7, #4]
 1777 08f0 DA68     		ldr	r2, [r3, #12]
 1778 08f2 3B69     		ldr	r3, [r7, #16]
 1779 08f4 B2FBF3F2 		udiv	r2, r2, r3
 1780 08f8 7B68     		ldr	r3, [r7, #4]
 1781 08fa 1A61     		str	r2, [r3, #16]
1031:../SPL/src/stm32f10x_rcc.c **** }
 1782              		.loc 1 1031 0
 1783 08fc 07F12407 		add	r7, r7, #36
 1784 0900 BD46     		mov	sp, r7
 1785 0902 80BC     		pop	{r7}
 1786 0904 7047     		bx	lr
 1787              	.L108:
 1788 0906 00BF     		.align	2
 1789              	.L107:
 1790 0908 00100240 		.word	1073876992
 1791 090c 00127A00 		.word	8000000
 1792 0910 00093D00 		.word	4000000
 1793 0914 00000000 		.word	APBAHBPrescTable
 1794 0918 10000000 		.word	ADCPrescTable
 1795              		.cfi_endproc
 1796              	.LFE49:
 1798              		.align	2
 1799              		.global	RCC_AHBPeriphClockCmd
 1800              		.thumb
 1801              		.thumb_func
 1803              	RCC_AHBPeriphClockCmd:
 1804              	.LFB50:
1032:../SPL/src/stm32f10x_rcc.c **** 
1033:../SPL/src/stm32f10x_rcc.c **** /**
1034:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../SPL/src/stm32f10x_rcc.c ****   *   
1037:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../SPL/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../SPL/src/stm32f10x_rcc.c ****   * 
1049:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../SPL/src/stm32f10x_rcc.c ****   *   following values:        
1051:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../SPL/src/stm32f10x_rcc.c ****   *   
1059:../SPL/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1063:../SPL/src/stm32f10x_rcc.c ****   */
1064:../SPL/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../SPL/src/stm32f10x_rcc.c **** {
 1805              		.loc 1 1065 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 8
 1808              		@ frame_needed = 1, uses_anonymous_args = 0
 1809 091c 80B5     		push	{r7, lr}
 1810              	.LCFI61:
 1811              		.cfi_def_cfa_offset 8
 1812              		.cfi_offset 7, -8
 1813              		.cfi_offset 14, -4
 1814 091e 82B0     		sub	sp, sp, #8
 1815              	.LCFI62:
 1816              		.cfi_def_cfa_offset 16
 1817 0920 00AF     		add	r7, sp, #0
 1818              	.LCFI63:
 1819              		.cfi_def_cfa_register 7
 1820 0922 7860     		str	r0, [r7, #4]
 1821 0924 0B46     		mov	r3, r1
 1822 0926 FB70     		strb	r3, [r7, #3]
1066:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
 1823              		.loc 1 1067 0
 1824 0928 7B68     		ldr	r3, [r7, #4]
 1825 092a 23F4AA63 		bic	r3, r3, #1360
 1826 092e 23F00703 		bic	r3, r3, #7
 1827 0932 002B     		cmp	r3, #0
 1828 0934 02D1     		bne	.L110
 1829              		.loc 1 1067 0 is_stmt 0 discriminator 2
 1830 0936 7B68     		ldr	r3, [r7, #4]
 1831 0938 002B     		cmp	r3, #0
 1832 093a 04D1     		bne	.L111
 1833              	.L110:
 1834              		.loc 1 1067 0 discriminator 1
 1835 093c 1248     		ldr	r0, .L115
 1836 093e 40F22B41 		movw	r1, #1067
 1837 0942 FFF7FEFF 		bl	assert_failed
 1838              	.L111:
1068:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1839              		.loc 1 1068 0 is_stmt 1
 1840 0946 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1841 0948 002B     		cmp	r3, #0
 1842 094a 07D0     		beq	.L112
 1843              		.loc 1 1068 0 is_stmt 0 discriminator 1
 1844 094c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1845 094e 012B     		cmp	r3, #1
 1846 0950 04D0     		beq	.L112
 1847              		.loc 1 1068 0 discriminator 2
 1848 0952 0D48     		ldr	r0, .L115
 1849 0954 40F22C41 		movw	r1, #1068
 1850 0958 FFF7FEFF 		bl	assert_failed
 1851              	.L112:
1069:../SPL/src/stm32f10x_rcc.c **** 
1070:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1852              		.loc 1 1070 0 is_stmt 1
 1853 095c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1854 095e 002B     		cmp	r3, #0
 1855 0960 06D0     		beq	.L113
1071:../SPL/src/stm32f10x_rcc.c ****   {
1072:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1856              		.loc 1 1072 0
 1857 0962 0A4B     		ldr	r3, .L115+4
 1858 0964 094A     		ldr	r2, .L115+4
 1859 0966 5169     		ldr	r1, [r2, #20]
 1860 0968 7A68     		ldr	r2, [r7, #4]
 1861 096a 0A43     		orrs	r2, r2, r1
 1862 096c 5A61     		str	r2, [r3, #20]
 1863 096e 07E0     		b	.L109
 1864              	.L113:
1073:../SPL/src/stm32f10x_rcc.c ****   }
1074:../SPL/src/stm32f10x_rcc.c ****   else
1075:../SPL/src/stm32f10x_rcc.c ****   {
1076:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1865              		.loc 1 1076 0
 1866 0970 064B     		ldr	r3, .L115+4
 1867 0972 064A     		ldr	r2, .L115+4
 1868 0974 5169     		ldr	r1, [r2, #20]
 1869 0976 7A68     		ldr	r2, [r7, #4]
 1870 0978 6FEA0202 		mvn	r2, r2
 1871 097c 0A40     		ands	r2, r2, r1
 1872 097e 5A61     		str	r2, [r3, #20]
 1873              	.L109:
1077:../SPL/src/stm32f10x_rcc.c ****   }
1078:../SPL/src/stm32f10x_rcc.c **** }
 1874              		.loc 1 1078 0
 1875 0980 07F10807 		add	r7, r7, #8
 1876 0984 BD46     		mov	sp, r7
 1877 0986 80BD     		pop	{r7, pc}
 1878              	.L116:
 1879              		.align	2
 1880              	.L115:
 1881 0988 00000000 		.word	.LC0
 1882 098c 00100240 		.word	1073876992
 1883              		.cfi_endproc
 1884              	.LFE50:
 1886              		.align	2
 1887              		.global	RCC_APB2PeriphClockCmd
 1888              		.thumb
 1889              		.thumb_func
 1891              	RCC_APB2PeriphClockCmd:
 1892              	.LFB51:
1079:../SPL/src/stm32f10x_rcc.c **** 
1080:../SPL/src/stm32f10x_rcc.c **** /**
1081:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1094:../SPL/src/stm32f10x_rcc.c ****   */
1095:../SPL/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../SPL/src/stm32f10x_rcc.c **** {
 1893              		.loc 1 1096 0
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 8
 1896              		@ frame_needed = 1, uses_anonymous_args = 0
 1897 0990 80B5     		push	{r7, lr}
 1898              	.LCFI64:
 1899              		.cfi_def_cfa_offset 8
 1900              		.cfi_offset 7, -8
 1901              		.cfi_offset 14, -4
 1902 0992 82B0     		sub	sp, sp, #8
 1903              	.LCFI65:
 1904              		.cfi_def_cfa_offset 16
 1905 0994 00AF     		add	r7, sp, #0
 1906              	.LCFI66:
 1907              		.cfi_def_cfa_register 7
 1908 0996 7860     		str	r0, [r7, #4]
 1909 0998 0B46     		mov	r3, r1
 1910 099a FB70     		strb	r3, [r7, #3]
1097:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1911              		.loc 1 1098 0
 1912 099c 7A68     		ldr	r2, [r7, #4]
 1913 099e 164B     		ldr	r3, .L123
 1914 09a0 1340     		ands	r3, r3, r2
 1915 09a2 002B     		cmp	r3, #0
 1916 09a4 02D1     		bne	.L118
 1917              		.loc 1 1098 0 is_stmt 0 discriminator 2
 1918 09a6 7B68     		ldr	r3, [r7, #4]
 1919 09a8 002B     		cmp	r3, #0
 1920 09aa 04D1     		bne	.L119
 1921              	.L118:
 1922              		.loc 1 1098 0 discriminator 1
 1923 09ac 1348     		ldr	r0, .L123+4
 1924 09ae 40F24A41 		movw	r1, #1098
 1925 09b2 FFF7FEFF 		bl	assert_failed
 1926              	.L119:
1099:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1927              		.loc 1 1099 0 is_stmt 1
 1928 09b6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1929 09b8 002B     		cmp	r3, #0
 1930 09ba 07D0     		beq	.L120
 1931              		.loc 1 1099 0 is_stmt 0 discriminator 1
 1932 09bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1933 09be 012B     		cmp	r3, #1
 1934 09c0 04D0     		beq	.L120
 1935              		.loc 1 1099 0 discriminator 2
 1936 09c2 0E48     		ldr	r0, .L123+4
 1937 09c4 40F24B41 		movw	r1, #1099
 1938 09c8 FFF7FEFF 		bl	assert_failed
 1939              	.L120:
1100:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1940              		.loc 1 1100 0 is_stmt 1
 1941 09cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1942 09ce 002B     		cmp	r3, #0
 1943 09d0 06D0     		beq	.L121
1101:../SPL/src/stm32f10x_rcc.c ****   {
1102:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1944              		.loc 1 1102 0
 1945 09d2 0B4B     		ldr	r3, .L123+8
 1946 09d4 0A4A     		ldr	r2, .L123+8
 1947 09d6 9169     		ldr	r1, [r2, #24]
 1948 09d8 7A68     		ldr	r2, [r7, #4]
 1949 09da 0A43     		orrs	r2, r2, r1
 1950 09dc 9A61     		str	r2, [r3, #24]
 1951 09de 07E0     		b	.L117
 1952              	.L121:
1103:../SPL/src/stm32f10x_rcc.c ****   }
1104:../SPL/src/stm32f10x_rcc.c ****   else
1105:../SPL/src/stm32f10x_rcc.c ****   {
1106:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1953              		.loc 1 1106 0
 1954 09e0 074B     		ldr	r3, .L123+8
 1955 09e2 074A     		ldr	r2, .L123+8
 1956 09e4 9169     		ldr	r1, [r2, #24]
 1957 09e6 7A68     		ldr	r2, [r7, #4]
 1958 09e8 6FEA0202 		mvn	r2, r2
 1959 09ec 0A40     		ands	r2, r2, r1
 1960 09ee 9A61     		str	r2, [r3, #24]
 1961              	.L117:
1107:../SPL/src/stm32f10x_rcc.c ****   }
1108:../SPL/src/stm32f10x_rcc.c **** }
 1962              		.loc 1 1108 0
 1963 09f0 07F10807 		add	r7, r7, #8
 1964 09f4 BD46     		mov	sp, r7
 1965 09f6 80BD     		pop	{r7, pc}
 1966              	.L124:
 1967              		.align	2
 1968              	.L123:
 1969 09f8 0200C0FF 		.word	-4194302
 1970 09fc 00000000 		.word	.LC0
 1971 0a00 00100240 		.word	1073876992
 1972              		.cfi_endproc
 1973              	.LFE51:
 1975              		.align	2
 1976              		.global	RCC_APB1PeriphClockCmd
 1977              		.thumb
 1978              		.thumb_func
 1980              	RCC_APB1PeriphClockCmd:
 1981              	.LFB52:
1109:../SPL/src/stm32f10x_rcc.c **** 
1110:../SPL/src/stm32f10x_rcc.c **** /**
1111:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1125:../SPL/src/stm32f10x_rcc.c ****   */
1126:../SPL/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../SPL/src/stm32f10x_rcc.c **** {
 1982              		.loc 1 1127 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 8
 1985              		@ frame_needed = 1, uses_anonymous_args = 0
 1986 0a04 80B5     		push	{r7, lr}
 1987              	.LCFI67:
 1988              		.cfi_def_cfa_offset 8
 1989              		.cfi_offset 7, -8
 1990              		.cfi_offset 14, -4
 1991 0a06 82B0     		sub	sp, sp, #8
 1992              	.LCFI68:
 1993              		.cfi_def_cfa_offset 16
 1994 0a08 00AF     		add	r7, sp, #0
 1995              	.LCFI69:
 1996              		.cfi_def_cfa_register 7
 1997 0a0a 7860     		str	r0, [r7, #4]
 1998 0a0c 0B46     		mov	r3, r1
 1999 0a0e FB70     		strb	r3, [r7, #3]
1128:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2000              		.loc 1 1129 0
 2001 0a10 7A68     		ldr	r2, [r7, #4]
 2002 0a12 164B     		ldr	r3, .L131
 2003 0a14 1340     		ands	r3, r3, r2
 2004 0a16 002B     		cmp	r3, #0
 2005 0a18 02D1     		bne	.L126
 2006              		.loc 1 1129 0 is_stmt 0 discriminator 2
 2007 0a1a 7B68     		ldr	r3, [r7, #4]
 2008 0a1c 002B     		cmp	r3, #0
 2009 0a1e 04D1     		bne	.L127
 2010              	.L126:
 2011              		.loc 1 1129 0 discriminator 1
 2012 0a20 1348     		ldr	r0, .L131+4
 2013 0a22 40F26941 		movw	r1, #1129
 2014 0a26 FFF7FEFF 		bl	assert_failed
 2015              	.L127:
1130:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2016              		.loc 1 1130 0 is_stmt 1
 2017 0a2a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2018 0a2c 002B     		cmp	r3, #0
 2019 0a2e 07D0     		beq	.L128
 2020              		.loc 1 1130 0 is_stmt 0 discriminator 1
 2021 0a30 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2022 0a32 012B     		cmp	r3, #1
 2023 0a34 04D0     		beq	.L128
 2024              		.loc 1 1130 0 discriminator 2
 2025 0a36 0E48     		ldr	r0, .L131+4
 2026 0a38 40F26A41 		movw	r1, #1130
 2027 0a3c FFF7FEFF 		bl	assert_failed
 2028              	.L128:
1131:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 2029              		.loc 1 1131 0 is_stmt 1
 2030 0a40 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2031 0a42 002B     		cmp	r3, #0
 2032 0a44 06D0     		beq	.L129
1132:../SPL/src/stm32f10x_rcc.c ****   {
1133:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 2033              		.loc 1 1133 0
 2034 0a46 0B4B     		ldr	r3, .L131+8
 2035 0a48 0A4A     		ldr	r2, .L131+8
 2036 0a4a D169     		ldr	r1, [r2, #28]
 2037 0a4c 7A68     		ldr	r2, [r7, #4]
 2038 0a4e 0A43     		orrs	r2, r2, r1
 2039 0a50 DA61     		str	r2, [r3, #28]
 2040 0a52 07E0     		b	.L125
 2041              	.L129:
1134:../SPL/src/stm32f10x_rcc.c ****   }
1135:../SPL/src/stm32f10x_rcc.c ****   else
1136:../SPL/src/stm32f10x_rcc.c ****   {
1137:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 2042              		.loc 1 1137 0
 2043 0a54 074B     		ldr	r3, .L131+8
 2044 0a56 074A     		ldr	r2, .L131+8
 2045 0a58 D169     		ldr	r1, [r2, #28]
 2046 0a5a 7A68     		ldr	r2, [r7, #4]
 2047 0a5c 6FEA0202 		mvn	r2, r2
 2048 0a60 0A40     		ands	r2, r2, r1
 2049 0a62 DA61     		str	r2, [r3, #28]
 2050              	.L125:
1138:../SPL/src/stm32f10x_rcc.c ****   }
1139:../SPL/src/stm32f10x_rcc.c **** }
 2051              		.loc 1 1139 0
 2052 0a64 07F10807 		add	r7, r7, #8
 2053 0a68 BD46     		mov	sp, r7
 2054 0a6a 80BD     		pop	{r7, pc}
 2055              	.L132:
 2056              		.align	2
 2057              	.L131:
 2058 0a6c 00360181 		.word	-2130627072
 2059 0a70 00000000 		.word	.LC0
 2060 0a74 00100240 		.word	1073876992
 2061              		.cfi_endproc
 2062              	.LFE52:
 2064              		.align	2
 2065              		.global	RCC_APB2PeriphResetCmd
 2066              		.thumb
 2067              		.thumb_func
 2069              	RCC_APB2PeriphResetCmd:
 2070              	.LFB53:
1140:../SPL/src/stm32f10x_rcc.c **** 
1141:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../SPL/src/stm32f10x_rcc.c **** /**
1143:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../SPL/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1152:../SPL/src/stm32f10x_rcc.c ****   */
1153:../SPL/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../SPL/src/stm32f10x_rcc.c **** {
1155:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../SPL/src/stm32f10x_rcc.c **** 
1159:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../SPL/src/stm32f10x_rcc.c ****   {
1161:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../SPL/src/stm32f10x_rcc.c ****   }
1163:../SPL/src/stm32f10x_rcc.c ****   else
1164:../SPL/src/stm32f10x_rcc.c ****   {
1165:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../SPL/src/stm32f10x_rcc.c ****   }
1167:../SPL/src/stm32f10x_rcc.c **** }
1168:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../SPL/src/stm32f10x_rcc.c **** 
1170:../SPL/src/stm32f10x_rcc.c **** /**
1171:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1184:../SPL/src/stm32f10x_rcc.c ****   */
1185:../SPL/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../SPL/src/stm32f10x_rcc.c **** {
 2071              		.loc 1 1186 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 8
 2074              		@ frame_needed = 1, uses_anonymous_args = 0
 2075 0a78 80B5     		push	{r7, lr}
 2076              	.LCFI70:
 2077              		.cfi_def_cfa_offset 8
 2078              		.cfi_offset 7, -8
 2079              		.cfi_offset 14, -4
 2080 0a7a 82B0     		sub	sp, sp, #8
 2081              	.LCFI71:
 2082              		.cfi_def_cfa_offset 16
 2083 0a7c 00AF     		add	r7, sp, #0
 2084              	.LCFI72:
 2085              		.cfi_def_cfa_register 7
 2086 0a7e 7860     		str	r0, [r7, #4]
 2087 0a80 0B46     		mov	r3, r1
 2088 0a82 FB70     		strb	r3, [r7, #3]
1187:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 2089              		.loc 1 1188 0
 2090 0a84 7A68     		ldr	r2, [r7, #4]
 2091 0a86 164B     		ldr	r3, .L139
 2092 0a88 1340     		ands	r3, r3, r2
 2093 0a8a 002B     		cmp	r3, #0
 2094 0a8c 02D1     		bne	.L134
 2095              		.loc 1 1188 0 is_stmt 0 discriminator 2
 2096 0a8e 7B68     		ldr	r3, [r7, #4]
 2097 0a90 002B     		cmp	r3, #0
 2098 0a92 04D1     		bne	.L135
 2099              	.L134:
 2100              		.loc 1 1188 0 discriminator 1
 2101 0a94 1348     		ldr	r0, .L139+4
 2102 0a96 40F2A441 		movw	r1, #1188
 2103 0a9a FFF7FEFF 		bl	assert_failed
 2104              	.L135:
1189:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2105              		.loc 1 1189 0 is_stmt 1
 2106 0a9e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2107 0aa0 002B     		cmp	r3, #0
 2108 0aa2 07D0     		beq	.L136
 2109              		.loc 1 1189 0 is_stmt 0 discriminator 1
 2110 0aa4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2111 0aa6 012B     		cmp	r3, #1
 2112 0aa8 04D0     		beq	.L136
 2113              		.loc 1 1189 0 discriminator 2
 2114 0aaa 0E48     		ldr	r0, .L139+4
 2115 0aac 40F2A541 		movw	r1, #1189
 2116 0ab0 FFF7FEFF 		bl	assert_failed
 2117              	.L136:
1190:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 2118              		.loc 1 1190 0 is_stmt 1
 2119 0ab4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2120 0ab6 002B     		cmp	r3, #0
 2121 0ab8 06D0     		beq	.L137
1191:../SPL/src/stm32f10x_rcc.c ****   {
1192:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2122              		.loc 1 1192 0
 2123 0aba 0B4B     		ldr	r3, .L139+8
 2124 0abc 0A4A     		ldr	r2, .L139+8
 2125 0abe D168     		ldr	r1, [r2, #12]
 2126 0ac0 7A68     		ldr	r2, [r7, #4]
 2127 0ac2 0A43     		orrs	r2, r2, r1
 2128 0ac4 DA60     		str	r2, [r3, #12]
 2129 0ac6 07E0     		b	.L133
 2130              	.L137:
1193:../SPL/src/stm32f10x_rcc.c ****   }
1194:../SPL/src/stm32f10x_rcc.c ****   else
1195:../SPL/src/stm32f10x_rcc.c ****   {
1196:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2131              		.loc 1 1196 0
 2132 0ac8 074B     		ldr	r3, .L139+8
 2133 0aca 074A     		ldr	r2, .L139+8
 2134 0acc D168     		ldr	r1, [r2, #12]
 2135 0ace 7A68     		ldr	r2, [r7, #4]
 2136 0ad0 6FEA0202 		mvn	r2, r2
 2137 0ad4 0A40     		ands	r2, r2, r1
 2138 0ad6 DA60     		str	r2, [r3, #12]
 2139              	.L133:
1197:../SPL/src/stm32f10x_rcc.c ****   }
1198:../SPL/src/stm32f10x_rcc.c **** }
 2140              		.loc 1 1198 0
 2141 0ad8 07F10807 		add	r7, r7, #8
 2142 0adc BD46     		mov	sp, r7
 2143 0ade 80BD     		pop	{r7, pc}
 2144              	.L140:
 2145              		.align	2
 2146              	.L139:
 2147 0ae0 0200C0FF 		.word	-4194302
 2148 0ae4 00000000 		.word	.LC0
 2149 0ae8 00100240 		.word	1073876992
 2150              		.cfi_endproc
 2151              	.LFE53:
 2153              		.align	2
 2154              		.global	RCC_APB1PeriphResetCmd
 2155              		.thumb
 2156              		.thumb_func
 2158              	RCC_APB1PeriphResetCmd:
 2159              	.LFB54:
1199:../SPL/src/stm32f10x_rcc.c **** 
1200:../SPL/src/stm32f10x_rcc.c **** /**
1201:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1215:../SPL/src/stm32f10x_rcc.c ****   */
1216:../SPL/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../SPL/src/stm32f10x_rcc.c **** {
 2160              		.loc 1 1217 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 8
 2163              		@ frame_needed = 1, uses_anonymous_args = 0
 2164 0aec 80B5     		push	{r7, lr}
 2165              	.LCFI73:
 2166              		.cfi_def_cfa_offset 8
 2167              		.cfi_offset 7, -8
 2168              		.cfi_offset 14, -4
 2169 0aee 82B0     		sub	sp, sp, #8
 2170              	.LCFI74:
 2171              		.cfi_def_cfa_offset 16
 2172 0af0 00AF     		add	r7, sp, #0
 2173              	.LCFI75:
 2174              		.cfi_def_cfa_register 7
 2175 0af2 7860     		str	r0, [r7, #4]
 2176 0af4 0B46     		mov	r3, r1
 2177 0af6 FB70     		strb	r3, [r7, #3]
1218:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2178              		.loc 1 1219 0
 2179 0af8 7A68     		ldr	r2, [r7, #4]
 2180 0afa 164B     		ldr	r3, .L147
 2181 0afc 1340     		ands	r3, r3, r2
 2182 0afe 002B     		cmp	r3, #0
 2183 0b00 02D1     		bne	.L142
 2184              		.loc 1 1219 0 is_stmt 0 discriminator 2
 2185 0b02 7B68     		ldr	r3, [r7, #4]
 2186 0b04 002B     		cmp	r3, #0
 2187 0b06 04D1     		bne	.L143
 2188              	.L142:
 2189              		.loc 1 1219 0 discriminator 1
 2190 0b08 1348     		ldr	r0, .L147+4
 2191 0b0a 40F2C341 		movw	r1, #1219
 2192 0b0e FFF7FEFF 		bl	assert_failed
 2193              	.L143:
1220:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2194              		.loc 1 1220 0 is_stmt 1
 2195 0b12 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2196 0b14 002B     		cmp	r3, #0
 2197 0b16 07D0     		beq	.L144
 2198              		.loc 1 1220 0 is_stmt 0 discriminator 1
 2199 0b18 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2200 0b1a 012B     		cmp	r3, #1
 2201 0b1c 04D0     		beq	.L144
 2202              		.loc 1 1220 0 discriminator 2
 2203 0b1e 0E48     		ldr	r0, .L147+4
 2204 0b20 40F2C441 		movw	r1, #1220
 2205 0b24 FFF7FEFF 		bl	assert_failed
 2206              	.L144:
1221:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 2207              		.loc 1 1221 0 is_stmt 1
 2208 0b28 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2209 0b2a 002B     		cmp	r3, #0
 2210 0b2c 06D0     		beq	.L145
1222:../SPL/src/stm32f10x_rcc.c ****   {
1223:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 2211              		.loc 1 1223 0
 2212 0b2e 0B4B     		ldr	r3, .L147+8
 2213 0b30 0A4A     		ldr	r2, .L147+8
 2214 0b32 1169     		ldr	r1, [r2, #16]
 2215 0b34 7A68     		ldr	r2, [r7, #4]
 2216 0b36 0A43     		orrs	r2, r2, r1
 2217 0b38 1A61     		str	r2, [r3, #16]
 2218 0b3a 07E0     		b	.L141
 2219              	.L145:
1224:../SPL/src/stm32f10x_rcc.c ****   }
1225:../SPL/src/stm32f10x_rcc.c ****   else
1226:../SPL/src/stm32f10x_rcc.c ****   {
1227:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 2220              		.loc 1 1227 0
 2221 0b3c 074B     		ldr	r3, .L147+8
 2222 0b3e 074A     		ldr	r2, .L147+8
 2223 0b40 1169     		ldr	r1, [r2, #16]
 2224 0b42 7A68     		ldr	r2, [r7, #4]
 2225 0b44 6FEA0202 		mvn	r2, r2
 2226 0b48 0A40     		ands	r2, r2, r1
 2227 0b4a 1A61     		str	r2, [r3, #16]
 2228              	.L141:
1228:../SPL/src/stm32f10x_rcc.c ****   }
1229:../SPL/src/stm32f10x_rcc.c **** }
 2229              		.loc 1 1229 0
 2230 0b4c 07F10807 		add	r7, r7, #8
 2231 0b50 BD46     		mov	sp, r7
 2232 0b52 80BD     		pop	{r7, pc}
 2233              	.L148:
 2234              		.align	2
 2235              	.L147:
 2236 0b54 00360181 		.word	-2130627072
 2237 0b58 00000000 		.word	.LC0
 2238 0b5c 00100240 		.word	1073876992
 2239              		.cfi_endproc
 2240              	.LFE54:
 2242              		.align	2
 2243              		.global	RCC_BackupResetCmd
 2244              		.thumb
 2245              		.thumb_func
 2247              	RCC_BackupResetCmd:
 2248              	.LFB55:
1230:../SPL/src/stm32f10x_rcc.c **** 
1231:../SPL/src/stm32f10x_rcc.c **** /**
1232:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1236:../SPL/src/stm32f10x_rcc.c ****   */
1237:../SPL/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../SPL/src/stm32f10x_rcc.c **** {
 2249              		.loc 1 1238 0
 2250              		.cfi_startproc
 2251              		@ args = 0, pretend = 0, frame = 8
 2252              		@ frame_needed = 1, uses_anonymous_args = 0
 2253 0b60 80B5     		push	{r7, lr}
 2254              	.LCFI76:
 2255              		.cfi_def_cfa_offset 8
 2256              		.cfi_offset 7, -8
 2257              		.cfi_offset 14, -4
 2258 0b62 82B0     		sub	sp, sp, #8
 2259              	.LCFI77:
 2260              		.cfi_def_cfa_offset 16
 2261 0b64 00AF     		add	r7, sp, #0
 2262              	.LCFI78:
 2263              		.cfi_def_cfa_register 7
 2264 0b66 0346     		mov	r3, r0
 2265 0b68 FB71     		strb	r3, [r7, #7]
1239:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2266              		.loc 1 1240 0
 2267 0b6a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2268 0b6c 002B     		cmp	r3, #0
 2269 0b6e 07D0     		beq	.L150
 2270              		.loc 1 1240 0 is_stmt 0 discriminator 1
 2271 0b70 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2272 0b72 012B     		cmp	r3, #1
 2273 0b74 04D0     		beq	.L150
 2274              		.loc 1 1240 0 discriminator 2
 2275 0b76 0648     		ldr	r0, .L151
 2276 0b78 4FF49B61 		mov	r1, #1240
 2277 0b7c FFF7FEFF 		bl	assert_failed
 2278              	.L150:
1241:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 2279              		.loc 1 1241 0 is_stmt 1
 2280 0b80 044B     		ldr	r3, .L151+4
 2281 0b82 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2282 0b84 1A60     		str	r2, [r3, #0]
1242:../SPL/src/stm32f10x_rcc.c **** }
 2283              		.loc 1 1242 0
 2284 0b86 07F10807 		add	r7, r7, #8
 2285 0b8a BD46     		mov	sp, r7
 2286 0b8c 80BD     		pop	{r7, pc}
 2287              	.L152:
 2288 0b8e 00BF     		.align	2
 2289              	.L151:
 2290 0b90 00000000 		.word	.LC0
 2291 0b94 40044242 		.word	1111622720
 2292              		.cfi_endproc
 2293              	.LFE55:
 2295              		.align	2
 2296              		.global	RCC_ClockSecuritySystemCmd
 2297              		.thumb
 2298              		.thumb_func
 2300              	RCC_ClockSecuritySystemCmd:
 2301              	.LFB56:
1243:../SPL/src/stm32f10x_rcc.c **** 
1244:../SPL/src/stm32f10x_rcc.c **** /**
1245:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1249:../SPL/src/stm32f10x_rcc.c ****   */
1250:../SPL/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../SPL/src/stm32f10x_rcc.c **** {
 2302              		.loc 1 1251 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 8
 2305              		@ frame_needed = 1, uses_anonymous_args = 0
 2306 0b98 80B5     		push	{r7, lr}
 2307              	.LCFI79:
 2308              		.cfi_def_cfa_offset 8
 2309              		.cfi_offset 7, -8
 2310              		.cfi_offset 14, -4
 2311 0b9a 82B0     		sub	sp, sp, #8
 2312              	.LCFI80:
 2313              		.cfi_def_cfa_offset 16
 2314 0b9c 00AF     		add	r7, sp, #0
 2315              	.LCFI81:
 2316              		.cfi_def_cfa_register 7
 2317 0b9e 0346     		mov	r3, r0
 2318 0ba0 FB71     		strb	r3, [r7, #7]
1252:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2319              		.loc 1 1253 0
 2320 0ba2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2321 0ba4 002B     		cmp	r3, #0
 2322 0ba6 07D0     		beq	.L154
 2323              		.loc 1 1253 0 is_stmt 0 discriminator 1
 2324 0ba8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2325 0baa 012B     		cmp	r3, #1
 2326 0bac 04D0     		beq	.L154
 2327              		.loc 1 1253 0 discriminator 2
 2328 0bae 0648     		ldr	r0, .L155
 2329 0bb0 40F2E541 		movw	r1, #1253
 2330 0bb4 FFF7FEFF 		bl	assert_failed
 2331              	.L154:
1254:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 2332              		.loc 1 1254 0 is_stmt 1
 2333 0bb8 044B     		ldr	r3, .L155+4
 2334 0bba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2335 0bbc 1A60     		str	r2, [r3, #0]
1255:../SPL/src/stm32f10x_rcc.c **** }
 2336              		.loc 1 1255 0
 2337 0bbe 07F10807 		add	r7, r7, #8
 2338 0bc2 BD46     		mov	sp, r7
 2339 0bc4 80BD     		pop	{r7, pc}
 2340              	.L156:
 2341 0bc6 00BF     		.align	2
 2342              	.L155:
 2343 0bc8 00000000 		.word	.LC0
 2344 0bcc 4C004242 		.word	1111621708
 2345              		.cfi_endproc
 2346              	.LFE56:
 2348              		.align	2
 2349              		.global	RCC_MCOConfig
 2350              		.thumb
 2351              		.thumb_func
 2353              	RCC_MCOConfig:
 2354              	.LFB57:
1256:../SPL/src/stm32f10x_rcc.c **** 
1257:../SPL/src/stm32f10x_rcc.c **** /**
1258:../SPL/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../SPL/src/stm32f10x_rcc.c ****   *   
1261:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../SPL/src/stm32f10x_rcc.c ****   *   following values:       
1263:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../SPL/src/stm32f10x_rcc.c ****   * 
1273:../SPL/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../SPL/src/stm32f10x_rcc.c ****   *   
1280:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1281:../SPL/src/stm32f10x_rcc.c ****   */
1282:../SPL/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../SPL/src/stm32f10x_rcc.c **** {
 2355              		.loc 1 1283 0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 8
 2358              		@ frame_needed = 1, uses_anonymous_args = 0
 2359 0bd0 80B5     		push	{r7, lr}
 2360              	.LCFI82:
 2361              		.cfi_def_cfa_offset 8
 2362              		.cfi_offset 7, -8
 2363              		.cfi_offset 14, -4
 2364 0bd2 82B0     		sub	sp, sp, #8
 2365              	.LCFI83:
 2366              		.cfi_def_cfa_offset 16
 2367 0bd4 00AF     		add	r7, sp, #0
 2368              	.LCFI84:
 2369              		.cfi_def_cfa_register 7
 2370 0bd6 0346     		mov	r3, r0
 2371 0bd8 FB71     		strb	r3, [r7, #7]
1284:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
 2372              		.loc 1 1285 0
 2373 0bda FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2374 0bdc 002B     		cmp	r3, #0
 2375 0bde 10D0     		beq	.L158
 2376              		.loc 1 1285 0 is_stmt 0 discriminator 1
 2377 0be0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2378 0be2 052B     		cmp	r3, #5
 2379 0be4 0DD0     		beq	.L158
 2380              		.loc 1 1285 0 discriminator 2
 2381 0be6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2382 0be8 042B     		cmp	r3, #4
 2383 0bea 0AD0     		beq	.L158
 2384              		.loc 1 1285 0 discriminator 3
 2385 0bec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2386 0bee 062B     		cmp	r3, #6
 2387 0bf0 07D0     		beq	.L158
 2388              		.loc 1 1285 0 discriminator 4
 2389 0bf2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2390 0bf4 072B     		cmp	r3, #7
 2391 0bf6 04D0     		beq	.L158
 2392              		.loc 1 1285 0 discriminator 5
 2393 0bf8 0548     		ldr	r0, .L159
 2394 0bfa 40F20551 		movw	r1, #1285
 2395 0bfe FFF7FEFF 		bl	assert_failed
 2396              	.L158:
1286:../SPL/src/stm32f10x_rcc.c **** 
1287:../SPL/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 2397              		.loc 1 1288 0 is_stmt 1
 2398 0c02 044B     		ldr	r3, .L159+4
 2399 0c04 FA79     		ldrb	r2, [r7, #7]
 2400 0c06 1A70     		strb	r2, [r3, #0]
1289:../SPL/src/stm32f10x_rcc.c **** }
 2401              		.loc 1 1289 0
 2402 0c08 07F10807 		add	r7, r7, #8
 2403 0c0c BD46     		mov	sp, r7
 2404 0c0e 80BD     		pop	{r7, pc}
 2405              	.L160:
 2406              		.align	2
 2407              	.L159:
 2408 0c10 00000000 		.word	.LC0
 2409 0c14 07100240 		.word	1073876999
 2410              		.cfi_endproc
 2411              	.LFE57:
 2413              		.align	2
 2414              		.global	RCC_GetFlagStatus
 2415              		.thumb
 2416              		.thumb_func
 2418              	RCC_GetFlagStatus:
 2419              	.LFB58:
1290:../SPL/src/stm32f10x_rcc.c **** 
1291:../SPL/src/stm32f10x_rcc.c **** /**
1292:../SPL/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../SPL/src/stm32f10x_rcc.c ****   *   
1295:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../SPL/src/stm32f10x_rcc.c ****   *   following values:
1297:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../SPL/src/stm32f10x_rcc.c ****   * 
1311:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../SPL/src/stm32f10x_rcc.c ****   *   
1324:../SPL/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../SPL/src/stm32f10x_rcc.c ****   */
1326:../SPL/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../SPL/src/stm32f10x_rcc.c **** {
 2420              		.loc 1 1327 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 24
 2423              		@ frame_needed = 1, uses_anonymous_args = 0
 2424 0c18 80B5     		push	{r7, lr}
 2425              	.LCFI85:
 2426              		.cfi_def_cfa_offset 8
 2427              		.cfi_offset 7, -8
 2428              		.cfi_offset 14, -4
 2429 0c1a 86B0     		sub	sp, sp, #24
 2430              	.LCFI86:
 2431              		.cfi_def_cfa_offset 32
 2432 0c1c 00AF     		add	r7, sp, #0
 2433              	.LCFI87:
 2434              		.cfi_def_cfa_register 7
 2435 0c1e 0346     		mov	r3, r0
 2436 0c20 FB71     		strb	r3, [r7, #7]
1328:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 2437              		.loc 1 1328 0
 2438 0c22 4FF00003 		mov	r3, #0
 2439 0c26 FB60     		str	r3, [r7, #12]
1329:../SPL/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 2440              		.loc 1 1329 0
 2441 0c28 4FF00003 		mov	r3, #0
 2442 0c2c 7B61     		str	r3, [r7, #20]
1330:../SPL/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 2443              		.loc 1 1330 0
 2444 0c2e 4FF00003 		mov	r3, #0
 2445 0c32 FB74     		strb	r3, [r7, #19]
1331:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 2446              		.loc 1 1332 0
 2447 0c34 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2448 0c36 212B     		cmp	r3, #33
 2449 0c38 22D0     		beq	.L162
 2450              		.loc 1 1332 0 is_stmt 0 discriminator 1
 2451 0c3a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2452 0c3c 312B     		cmp	r3, #49
 2453 0c3e 1FD0     		beq	.L162
 2454              		.loc 1 1332 0 discriminator 2
 2455 0c40 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2456 0c42 392B     		cmp	r3, #57
 2457 0c44 1CD0     		beq	.L162
 2458              		.loc 1 1332 0 discriminator 3
 2459 0c46 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2460 0c48 412B     		cmp	r3, #65
 2461 0c4a 19D0     		beq	.L162
 2462              		.loc 1 1332 0 discriminator 4
 2463 0c4c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2464 0c4e 612B     		cmp	r3, #97
 2465 0c50 16D0     		beq	.L162
 2466              		.loc 1 1332 0 discriminator 5
 2467 0c52 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2468 0c54 7A2B     		cmp	r3, #122
 2469 0c56 13D0     		beq	.L162
 2470              		.loc 1 1332 0 discriminator 6
 2471 0c58 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2472 0c5a 7B2B     		cmp	r3, #123
 2473 0c5c 10D0     		beq	.L162
 2474              		.loc 1 1332 0 discriminator 7
 2475 0c5e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2476 0c60 7C2B     		cmp	r3, #124
 2477 0c62 0DD0     		beq	.L162
 2478              		.loc 1 1332 0 discriminator 8
 2479 0c64 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2480 0c66 7D2B     		cmp	r3, #125
 2481 0c68 0AD0     		beq	.L162
 2482              		.loc 1 1332 0 discriminator 9
 2483 0c6a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2484 0c6c 7E2B     		cmp	r3, #126
 2485 0c6e 07D0     		beq	.L162
 2486              		.loc 1 1332 0 discriminator 10
 2487 0c70 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2488 0c72 7F2B     		cmp	r3, #127
 2489 0c74 04D0     		beq	.L162
 2490              		.loc 1 1332 0 discriminator 11
 2491 0c76 1A48     		ldr	r0, .L169
 2492 0c78 40F23451 		movw	r1, #1332
 2493 0c7c FFF7FEFF 		bl	assert_failed
 2494              	.L162:
1333:../SPL/src/stm32f10x_rcc.c **** 
1334:../SPL/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 2495              		.loc 1 1335 0 is_stmt 1
 2496 0c80 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2497 0c82 4FEA5313 		lsr	r3, r3, #5
 2498 0c86 DBB2     		uxtb	r3, r3
 2499 0c88 FB60     		str	r3, [r7, #12]
1336:../SPL/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2500              		.loc 1 1336 0
 2501 0c8a FB68     		ldr	r3, [r7, #12]
 2502 0c8c 012B     		cmp	r3, #1
 2503 0c8e 03D1     		bne	.L163
1337:../SPL/src/stm32f10x_rcc.c ****   {
1338:../SPL/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 2504              		.loc 1 1338 0
 2505 0c90 144B     		ldr	r3, .L169+4
 2506 0c92 1B68     		ldr	r3, [r3, #0]
 2507 0c94 7B61     		str	r3, [r7, #20]
 2508 0c96 09E0     		b	.L164
 2509              	.L163:
1339:../SPL/src/stm32f10x_rcc.c ****   }
1340:../SPL/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2510              		.loc 1 1340 0
 2511 0c98 FB68     		ldr	r3, [r7, #12]
 2512 0c9a 022B     		cmp	r3, #2
 2513 0c9c 03D1     		bne	.L165
1341:../SPL/src/stm32f10x_rcc.c ****   {
1342:../SPL/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 2514              		.loc 1 1342 0
 2515 0c9e 114B     		ldr	r3, .L169+4
 2516 0ca0 1B6A     		ldr	r3, [r3, #32]
 2517 0ca2 7B61     		str	r3, [r7, #20]
 2518 0ca4 02E0     		b	.L164
 2519              	.L165:
1343:../SPL/src/stm32f10x_rcc.c ****   }
1344:../SPL/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../SPL/src/stm32f10x_rcc.c ****   {
1346:../SPL/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 2520              		.loc 1 1346 0
 2521 0ca6 0F4B     		ldr	r3, .L169+4
 2522 0ca8 5B6A     		ldr	r3, [r3, #36]
 2523 0caa 7B61     		str	r3, [r7, #20]
 2524              	.L164:
1347:../SPL/src/stm32f10x_rcc.c ****   }
1348:../SPL/src/stm32f10x_rcc.c **** 
1349:../SPL/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 2525              		.loc 1 1350 0
 2526 0cac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2527 0cae 03F01F03 		and	r3, r3, #31
 2528 0cb2 FB60     		str	r3, [r7, #12]
1351:../SPL/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2529              		.loc 1 1351 0
 2530 0cb4 FB68     		ldr	r3, [r7, #12]
 2531 0cb6 7A69     		ldr	r2, [r7, #20]
 2532 0cb8 22FA03F3 		lsr	r3, r2, r3
 2533 0cbc 03F00103 		and	r3, r3, #1
 2534 0cc0 002B     		cmp	r3, #0
 2535 0cc2 03D0     		beq	.L166
1352:../SPL/src/stm32f10x_rcc.c ****   {
1353:../SPL/src/stm32f10x_rcc.c ****     bitstatus = SET;
 2536              		.loc 1 1353 0
 2537 0cc4 4FF00103 		mov	r3, #1
 2538 0cc8 FB74     		strb	r3, [r7, #19]
 2539 0cca 02E0     		b	.L167
 2540              	.L166:
1354:../SPL/src/stm32f10x_rcc.c ****   }
1355:../SPL/src/stm32f10x_rcc.c ****   else
1356:../SPL/src/stm32f10x_rcc.c ****   {
1357:../SPL/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 2541              		.loc 1 1357 0
 2542 0ccc 4FF00003 		mov	r3, #0
 2543 0cd0 FB74     		strb	r3, [r7, #19]
 2544              	.L167:
1358:../SPL/src/stm32f10x_rcc.c ****   }
1359:../SPL/src/stm32f10x_rcc.c **** 
1360:../SPL/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../SPL/src/stm32f10x_rcc.c ****   return bitstatus;
 2545              		.loc 1 1361 0
 2546 0cd2 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../SPL/src/stm32f10x_rcc.c **** }
 2547              		.loc 1 1362 0
 2548 0cd4 1846     		mov	r0, r3
 2549 0cd6 07F11807 		add	r7, r7, #24
 2550 0cda BD46     		mov	sp, r7
 2551 0cdc 80BD     		pop	{r7, pc}
 2552              	.L170:
 2553 0cde 00BF     		.align	2
 2554              	.L169:
 2555 0ce0 00000000 		.word	.LC0
 2556 0ce4 00100240 		.word	1073876992
 2557              		.cfi_endproc
 2558              	.LFE58:
 2560              		.align	2
 2561              		.global	RCC_ClearFlag
 2562              		.thumb
 2563              		.thumb_func
 2565              	RCC_ClearFlag:
 2566              	.LFB59:
1363:../SPL/src/stm32f10x_rcc.c **** 
1364:../SPL/src/stm32f10x_rcc.c **** /**
1365:../SPL/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../SPL/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../SPL/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../SPL/src/stm32f10x_rcc.c ****   * @param  None
1369:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1370:../SPL/src/stm32f10x_rcc.c ****   */
1371:../SPL/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../SPL/src/stm32f10x_rcc.c **** {
 2567              		.loc 1 1372 0
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 0
 2570              		@ frame_needed = 1, uses_anonymous_args = 0
 2571              		@ link register save eliminated.
 2572 0ce8 80B4     		push	{r7}
 2573              	.LCFI88:
 2574              		.cfi_def_cfa_offset 4
 2575              		.cfi_offset 7, -4
 2576 0cea 00AF     		add	r7, sp, #0
 2577              	.LCFI89:
 2578              		.cfi_def_cfa_register 7
1373:../SPL/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../SPL/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 2579              		.loc 1 1374 0
 2580 0cec 044B     		ldr	r3, .L172
 2581 0cee 044A     		ldr	r2, .L172
 2582 0cf0 526A     		ldr	r2, [r2, #36]
 2583 0cf2 42F08072 		orr	r2, r2, #16777216
 2584 0cf6 5A62     		str	r2, [r3, #36]
1375:../SPL/src/stm32f10x_rcc.c **** }
 2585              		.loc 1 1375 0
 2586 0cf8 BD46     		mov	sp, r7
 2587 0cfa 80BC     		pop	{r7}
 2588 0cfc 7047     		bx	lr
 2589              	.L173:
 2590 0cfe 00BF     		.align	2
 2591              	.L172:
 2592 0d00 00100240 		.word	1073876992
 2593              		.cfi_endproc
 2594              	.LFE59:
 2596              		.align	2
 2597              		.global	RCC_GetITStatus
 2598              		.thumb
 2599              		.thumb_func
 2601              	RCC_GetITStatus:
 2602              	.LFB60:
1376:../SPL/src/stm32f10x_rcc.c **** 
1377:../SPL/src/stm32f10x_rcc.c **** /**
1378:../SPL/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../SPL/src/stm32f10x_rcc.c ****   *   
1381:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../SPL/src/stm32f10x_rcc.c ****   *   following values:
1383:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../SPL/src/stm32f10x_rcc.c ****   * 
1392:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../SPL/src/stm32f10x_rcc.c ****   *   
1400:../SPL/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../SPL/src/stm32f10x_rcc.c ****   */
1402:../SPL/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../SPL/src/stm32f10x_rcc.c **** {
 2603              		.loc 1 1403 0
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 16
 2606              		@ frame_needed = 1, uses_anonymous_args = 0
 2607 0d04 80B5     		push	{r7, lr}
 2608              	.LCFI90:
 2609              		.cfi_def_cfa_offset 8
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
 2612 0d06 84B0     		sub	sp, sp, #16
 2613              	.LCFI91:
 2614              		.cfi_def_cfa_offset 24
 2615 0d08 00AF     		add	r7, sp, #0
 2616              	.LCFI92:
 2617              		.cfi_def_cfa_register 7
 2618 0d0a 0346     		mov	r3, r0
 2619 0d0c FB71     		strb	r3, [r7, #7]
1404:../SPL/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 2620              		.loc 1 1404 0
 2621 0d0e 4FF00003 		mov	r3, #0
 2622 0d12 FB73     		strb	r3, [r7, #15]
1405:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 2623              		.loc 1 1406 0
 2624 0d14 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2625 0d16 012B     		cmp	r3, #1
 2626 0d18 13D0     		beq	.L175
 2627              		.loc 1 1406 0 is_stmt 0 discriminator 1
 2628 0d1a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2629 0d1c 022B     		cmp	r3, #2
 2630 0d1e 10D0     		beq	.L175
 2631              		.loc 1 1406 0 discriminator 2
 2632 0d20 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2633 0d22 042B     		cmp	r3, #4
 2634 0d24 0DD0     		beq	.L175
 2635              		.loc 1 1406 0 discriminator 3
 2636 0d26 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2637 0d28 082B     		cmp	r3, #8
 2638 0d2a 0AD0     		beq	.L175
 2639              		.loc 1 1406 0 discriminator 4
 2640 0d2c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2641 0d2e 102B     		cmp	r3, #16
 2642 0d30 07D0     		beq	.L175
 2643              		.loc 1 1406 0 discriminator 5
 2644 0d32 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2645 0d34 802B     		cmp	r3, #128
 2646 0d36 04D0     		beq	.L175
 2647              		.loc 1 1406 0 discriminator 6
 2648 0d38 0B48     		ldr	r0, .L179
 2649 0d3a 40F27E51 		movw	r1, #1406
 2650 0d3e FFF7FEFF 		bl	assert_failed
 2651              	.L175:
1407:../SPL/src/stm32f10x_rcc.c **** 
1408:../SPL/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../SPL/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2652              		.loc 1 1409 0 is_stmt 1
 2653 0d42 0A4B     		ldr	r3, .L179+4
 2654 0d44 9A68     		ldr	r2, [r3, #8]
 2655 0d46 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2656 0d48 1340     		ands	r3, r3, r2
 2657 0d4a 002B     		cmp	r3, #0
 2658 0d4c 03D0     		beq	.L176
1410:../SPL/src/stm32f10x_rcc.c ****   {
1411:../SPL/src/stm32f10x_rcc.c ****     bitstatus = SET;
 2659              		.loc 1 1411 0
 2660 0d4e 4FF00103 		mov	r3, #1
 2661 0d52 FB73     		strb	r3, [r7, #15]
 2662 0d54 02E0     		b	.L177
 2663              	.L176:
1412:../SPL/src/stm32f10x_rcc.c ****   }
1413:../SPL/src/stm32f10x_rcc.c ****   else
1414:../SPL/src/stm32f10x_rcc.c ****   {
1415:../SPL/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 2664              		.loc 1 1415 0
 2665 0d56 4FF00003 		mov	r3, #0
 2666 0d5a FB73     		strb	r3, [r7, #15]
 2667              	.L177:
1416:../SPL/src/stm32f10x_rcc.c ****   }
1417:../SPL/src/stm32f10x_rcc.c **** 
1418:../SPL/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../SPL/src/stm32f10x_rcc.c ****   return  bitstatus;
 2668              		.loc 1 1419 0
 2669 0d5c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../SPL/src/stm32f10x_rcc.c **** }
 2670              		.loc 1 1420 0
 2671 0d5e 1846     		mov	r0, r3
 2672 0d60 07F11007 		add	r7, r7, #16
 2673 0d64 BD46     		mov	sp, r7
 2674 0d66 80BD     		pop	{r7, pc}
 2675              	.L180:
 2676              		.align	2
 2677              	.L179:
 2678 0d68 00000000 		.word	.LC0
 2679 0d6c 00100240 		.word	1073876992
 2680              		.cfi_endproc
 2681              	.LFE60:
 2683              		.align	2
 2684              		.global	RCC_ClearITPendingBit
 2685              		.thumb
 2686              		.thumb_func
 2688              	RCC_ClearITPendingBit:
 2689              	.LFB61:
1421:../SPL/src/stm32f10x_rcc.c **** 
1422:../SPL/src/stm32f10x_rcc.c **** /**
1423:../SPL/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../SPL/src/stm32f10x_rcc.c ****   *   
1426:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../SPL/src/stm32f10x_rcc.c ****   *   of the following values:
1428:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../SPL/src/stm32f10x_rcc.c ****   * 
1437:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../SPL/src/stm32f10x_rcc.c ****   *   following values:        
1439:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../SPL/src/stm32f10x_rcc.c ****   *   
1445:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1447:../SPL/src/stm32f10x_rcc.c ****   */
1448:../SPL/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../SPL/src/stm32f10x_rcc.c **** {
 2690              		.loc 1 1449 0
 2691              		.cfi_startproc
 2692              		@ args = 0, pretend = 0, frame = 8
 2693              		@ frame_needed = 1, uses_anonymous_args = 0
 2694 0d70 80B5     		push	{r7, lr}
 2695              	.LCFI93:
 2696              		.cfi_def_cfa_offset 8
 2697              		.cfi_offset 7, -8
 2698              		.cfi_offset 14, -4
 2699 0d72 82B0     		sub	sp, sp, #8
 2700              	.LCFI94:
 2701              		.cfi_def_cfa_offset 16
 2702 0d74 00AF     		add	r7, sp, #0
 2703              	.LCFI95:
 2704              		.cfi_def_cfa_register 7
 2705 0d76 0346     		mov	r3, r0
 2706 0d78 FB71     		strb	r3, [r7, #7]
1450:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 2707              		.loc 1 1451 0
 2708 0d7a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2709 0d7c 03F06003 		and	r3, r3, #96
 2710 0d80 002B     		cmp	r3, #0
 2711 0d82 02D1     		bne	.L182
 2712              		.loc 1 1451 0 is_stmt 0 discriminator 2
 2713 0d84 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2714 0d86 002B     		cmp	r3, #0
 2715 0d88 04D1     		bne	.L183
 2716              	.L182:
 2717              		.loc 1 1451 0 discriminator 1
 2718 0d8a 0648     		ldr	r0, .L184
 2719 0d8c 40F2AB51 		movw	r1, #1451
 2720 0d90 FFF7FEFF 		bl	assert_failed
 2721              	.L183:
1452:../SPL/src/stm32f10x_rcc.c **** 
1453:../SPL/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../SPL/src/stm32f10x_rcc.c ****      pending bits */
1455:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2722              		.loc 1 1455 0 is_stmt 1
 2723 0d94 044B     		ldr	r3, .L184+4
 2724 0d96 FA79     		ldrb	r2, [r7, #7]
 2725 0d98 1A70     		strb	r2, [r3, #0]
1456:../SPL/src/stm32f10x_rcc.c **** }
 2726              		.loc 1 1456 0
 2727 0d9a 07F10807 		add	r7, r7, #8
 2728 0d9e BD46     		mov	sp, r7
 2729 0da0 80BD     		pop	{r7, pc}
 2730              	.L185:
 2731 0da2 00BF     		.align	2
 2732              	.L184:
 2733 0da4 00000000 		.word	.LC0
 2734 0da8 0A100240 		.word	1073877002
 2735              		.cfi_endproc
 2736              	.LFE61:
 2738              	.Letext0:
 2739              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2740              		.file 3 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/stm32f10x.h"
 2741              		.file 4 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\SPL\\inc/stm32f10x_rcc.h"
 2742              		.file 5 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:19     .data:00000000 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:22     .data:00000000 APBAHBPrescTable
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:42     .data:00000010 ADCPrescTable
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:48     .text:00000000 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:53     .text:00000000 RCC_DeInit
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:115    .text:0000005c $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:121    .rodata:00000000 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:125    .text:00000064 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:130    .text:00000064 RCC_HSEConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:213    .text:000000dc $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:218    .text:000000e4 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:223    .text:000000e4 RCC_WaitForHSEStartUp
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2418   .text:00000c18 RCC_GetFlagStatus
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:297    .text:00000148 RCC_AdjustHSICalibrationValue
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:353    .text:00000190 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:358    .text:00000198 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:363    .text:00000198 RCC_HSICmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:406    .text:000001c8 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:411    .text:000001d0 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:416    .text:000001d0 RCC_PLLConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:542    .text:000002a0 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:547    .text:000002a8 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:552    .text:000002a8 RCC_PLLCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:595    .text:000002d8 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:600    .text:000002e0 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:605    .text:000002e0 RCC_PREDIV1Config
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:732    .text:00000398 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:737    .text:000003a0 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:742    .text:000003a0 RCC_SYSCLKConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:804    .text:000003f0 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:809    .text:000003f8 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:814    .text:000003f8 RCC_GetSYSCLKSource
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:842    .text:00000410 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:846    .text:00000414 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:851    .text:00000414 RCC_HCLKConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:937    .text:00000488 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:942    .text:00000490 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:947    .text:00000490 RCC_PCLK1Config
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1017   .text:000004f4 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1022   .text:000004fc $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1027   .text:000004fc RCC_PCLK2Config
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1098   .text:00000564 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1103   .text:0000056c $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1108   .text:0000056c RCC_ITConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1191   .text:000005e0 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1196   .text:000005e8 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1201   .text:000005e8 RCC_USBCLKConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1243   .text:00000614 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1248   .text:0000061c $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1253   .text:0000061c RCC_ADCCLKConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1319   .text:00000678 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1324   .text:00000680 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1329   .text:00000680 RCC_LSEConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1405   .text:000006e0 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1410   .text:000006e8 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1415   .text:000006e8 RCC_LSICmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1458   .text:00000718 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1463   .text:00000720 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1468   .text:00000720 RCC_RTCCLKConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1517   .text:00000760 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1522   .text:00000768 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1527   .text:00000768 RCC_RTCCLKCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1570   .text:00000798 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1575   .text:000007a0 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1580   .text:000007a0 RCC_GetClocksFreq
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1790   .text:00000908 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1798   .text:0000091c $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1803   .text:0000091c RCC_AHBPeriphClockCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1881   .text:00000988 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1886   .text:00000990 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1891   .text:00000990 RCC_APB2PeriphClockCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1969   .text:000009f8 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1975   .text:00000a04 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:1980   .text:00000a04 RCC_APB1PeriphClockCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2058   .text:00000a6c $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2064   .text:00000a78 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2069   .text:00000a78 RCC_APB2PeriphResetCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2147   .text:00000ae0 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2153   .text:00000aec $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2158   .text:00000aec RCC_APB1PeriphResetCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2236   .text:00000b54 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2242   .text:00000b60 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2247   .text:00000b60 RCC_BackupResetCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2290   .text:00000b90 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2295   .text:00000b98 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2300   .text:00000b98 RCC_ClockSecuritySystemCmd
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2343   .text:00000bc8 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2348   .text:00000bd0 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2353   .text:00000bd0 RCC_MCOConfig
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2408   .text:00000c10 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2413   .text:00000c18 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2555   .text:00000ce0 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2560   .text:00000ce8 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2565   .text:00000ce8 RCC_ClearFlag
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2592   .text:00000d00 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2596   .text:00000d04 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2601   .text:00000d04 RCC_GetITStatus
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2678   .text:00000d68 $d
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2683   .text:00000d70 $t
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2688   .text:00000d70 RCC_ClearITPendingBit
C:\Users\PC108\AppData\Local\Temp\ccdaDtTa.s:2733   .text:00000da4 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9001f459856fa07d79ce9793bb17c6cd
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_exti.h.56.8b2f216f9ded9d03a9eb42ed6973fc04
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.67.b2ac3f177eed824c6a7f550d9877061e

UNDEFINED SYMBOLS
assert_failed

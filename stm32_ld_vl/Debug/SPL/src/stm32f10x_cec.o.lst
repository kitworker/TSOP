   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_cec.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CEC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	CEC_DeInit:
  24              	.LFB29:
  25              		.file 1 "../SPL/src/stm32f10x_cec.c"
   1:../SPL/src/stm32f10x_cec.c **** /**
   2:../SPL/src/stm32f10x_cec.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_cec.c ****   * @file    stm32f10x_cec.c
   4:../SPL/src/stm32f10x_cec.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_cec.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_cec.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_cec.c ****   * @brief   This file provides all the CEC firmware functions.
   8:../SPL/src/stm32f10x_cec.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_cec.c ****   * @attention
  10:../SPL/src/stm32f10x_cec.c ****   *
  11:../SPL/src/stm32f10x_cec.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_cec.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_cec.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_cec.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_cec.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_cec.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_cec.c ****   *
  18:../SPL/src/stm32f10x_cec.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_cec.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_cec.c ****   */
  21:../SPL/src/stm32f10x_cec.c **** 
  22:../SPL/src/stm32f10x_cec.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_cec.c **** #include "stm32f10x_cec.h"
  24:../SPL/src/stm32f10x_cec.c **** #include "stm32f10x_rcc.h"
  25:../SPL/src/stm32f10x_cec.c **** 
  26:../SPL/src/stm32f10x_cec.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../SPL/src/stm32f10x_cec.c ****   * @{
  28:../SPL/src/stm32f10x_cec.c ****   */
  29:../SPL/src/stm32f10x_cec.c **** 
  30:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC 
  31:../SPL/src/stm32f10x_cec.c ****   * @brief CEC driver modules
  32:../SPL/src/stm32f10x_cec.c ****   * @{
  33:../SPL/src/stm32f10x_cec.c ****   */
  34:../SPL/src/stm32f10x_cec.c **** 
  35:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_TypesDefinitions
  36:../SPL/src/stm32f10x_cec.c ****   * @{
  37:../SPL/src/stm32f10x_cec.c ****   */
  38:../SPL/src/stm32f10x_cec.c **** 
  39:../SPL/src/stm32f10x_cec.c **** /**
  40:../SPL/src/stm32f10x_cec.c ****   * @}
  41:../SPL/src/stm32f10x_cec.c ****   */
  42:../SPL/src/stm32f10x_cec.c **** 
  43:../SPL/src/stm32f10x_cec.c **** 
  44:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Defines
  45:../SPL/src/stm32f10x_cec.c ****   * @{
  46:../SPL/src/stm32f10x_cec.c ****   */ 
  47:../SPL/src/stm32f10x_cec.c **** 
  48:../SPL/src/stm32f10x_cec.c **** /* ------------ CEC registers bit address in the alias region ----------- */
  49:../SPL/src/stm32f10x_cec.c **** #define CEC_OFFSET                (CEC_BASE - PERIPH_BASE)
  50:../SPL/src/stm32f10x_cec.c **** 
  51:../SPL/src/stm32f10x_cec.c **** /* --- CFGR Register ---*/
  52:../SPL/src/stm32f10x_cec.c **** 
  53:../SPL/src/stm32f10x_cec.c **** /* Alias word address of PE bit */
  54:../SPL/src/stm32f10x_cec.c **** #define CFGR_OFFSET                 (CEC_OFFSET + 0x00)
  55:../SPL/src/stm32f10x_cec.c **** #define PE_BitNumber                0x00
  56:../SPL/src/stm32f10x_cec.c **** #define CFGR_PE_BB                  (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (PE_BitNumber * 4))
  57:../SPL/src/stm32f10x_cec.c **** 
  58:../SPL/src/stm32f10x_cec.c **** /* Alias word address of IE bit */
  59:../SPL/src/stm32f10x_cec.c **** #define IE_BitNumber                0x01
  60:../SPL/src/stm32f10x_cec.c **** #define CFGR_IE_BB                  (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (IE_BitNumber * 4))
  61:../SPL/src/stm32f10x_cec.c **** 
  62:../SPL/src/stm32f10x_cec.c **** /* --- CSR Register ---*/
  63:../SPL/src/stm32f10x_cec.c **** 
  64:../SPL/src/stm32f10x_cec.c **** /* Alias word address of TSOM bit */
  65:../SPL/src/stm32f10x_cec.c **** #define CSR_OFFSET                  (CEC_OFFSET + 0x10)
  66:../SPL/src/stm32f10x_cec.c **** #define TSOM_BitNumber              0x00
  67:../SPL/src/stm32f10x_cec.c **** #define CSR_TSOM_BB                 (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TSOM_BitNumber * 4))
  68:../SPL/src/stm32f10x_cec.c **** 
  69:../SPL/src/stm32f10x_cec.c **** /* Alias word address of TEOM bit */
  70:../SPL/src/stm32f10x_cec.c **** #define TEOM_BitNumber              0x01
  71:../SPL/src/stm32f10x_cec.c **** #define CSR_TEOM_BB                 (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TEOM_BitNumber * 4))
  72:../SPL/src/stm32f10x_cec.c ****   
  73:../SPL/src/stm32f10x_cec.c **** #define CFGR_CLEAR_Mask            (uint8_t)(0xF3)        /* CFGR register Mask */
  74:../SPL/src/stm32f10x_cec.c **** #define FLAG_Mask                  ((uint32_t)0x00FFFFFF) /* CEC FLAG mask */
  75:../SPL/src/stm32f10x_cec.c ****  
  76:../SPL/src/stm32f10x_cec.c **** /**
  77:../SPL/src/stm32f10x_cec.c ****   * @}
  78:../SPL/src/stm32f10x_cec.c ****   */ 
  79:../SPL/src/stm32f10x_cec.c **** 
  80:../SPL/src/stm32f10x_cec.c **** 
  81:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Macros
  82:../SPL/src/stm32f10x_cec.c ****   * @{
  83:../SPL/src/stm32f10x_cec.c ****   */ 
  84:../SPL/src/stm32f10x_cec.c **** 
  85:../SPL/src/stm32f10x_cec.c **** /**
  86:../SPL/src/stm32f10x_cec.c ****   * @}
  87:../SPL/src/stm32f10x_cec.c ****   */ 
  88:../SPL/src/stm32f10x_cec.c **** 
  89:../SPL/src/stm32f10x_cec.c **** 
  90:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Variables
  91:../SPL/src/stm32f10x_cec.c ****   * @{
  92:../SPL/src/stm32f10x_cec.c ****   */ 
  93:../SPL/src/stm32f10x_cec.c **** 
  94:../SPL/src/stm32f10x_cec.c **** /**
  95:../SPL/src/stm32f10x_cec.c ****   * @}
  96:../SPL/src/stm32f10x_cec.c ****   */ 
  97:../SPL/src/stm32f10x_cec.c **** 
  98:../SPL/src/stm32f10x_cec.c **** 
  99:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_FunctionPrototypes
 100:../SPL/src/stm32f10x_cec.c ****   * @{
 101:../SPL/src/stm32f10x_cec.c ****   */
 102:../SPL/src/stm32f10x_cec.c ****  
 103:../SPL/src/stm32f10x_cec.c **** /**
 104:../SPL/src/stm32f10x_cec.c ****   * @}
 105:../SPL/src/stm32f10x_cec.c ****   */ 
 106:../SPL/src/stm32f10x_cec.c **** 
 107:../SPL/src/stm32f10x_cec.c **** 
 108:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Functions
 109:../SPL/src/stm32f10x_cec.c ****   * @{
 110:../SPL/src/stm32f10x_cec.c ****   */ 
 111:../SPL/src/stm32f10x_cec.c **** 
 112:../SPL/src/stm32f10x_cec.c **** /**
 113:../SPL/src/stm32f10x_cec.c ****   * @brief  Deinitializes the CEC peripheral registers to their default reset 
 114:../SPL/src/stm32f10x_cec.c ****   *         values.
 115:../SPL/src/stm32f10x_cec.c ****   * @param  None
 116:../SPL/src/stm32f10x_cec.c ****   * @retval None
 117:../SPL/src/stm32f10x_cec.c ****   */
 118:../SPL/src/stm32f10x_cec.c **** void CEC_DeInit(void)
 119:../SPL/src/stm32f10x_cec.c **** {
  26              		.loc 1 119 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 120:../SPL/src/stm32f10x_cec.c ****   /* Enable CEC reset state */
 121:../SPL/src/stm32f10x_cec.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
  38              		.loc 1 121 0
  39 0004 4FF08040 		mov	r0, #1073741824
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122:../SPL/src/stm32f10x_cec.c ****   /* Release CEC from reset state */
 123:../SPL/src/stm32f10x_cec.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
  42              		.loc 1 123 0
  43 0010 4FF08040 		mov	r0, #1073741824
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 124:../SPL/src/stm32f10x_cec.c **** }
  46              		.loc 1 124 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE29:
  51              		.section	.rodata
  52              		.align	2
  53              	.LC0:
  54 0000 2E2E2F53 		.ascii	"../SPL/src/stm32f10x_cec.c\000"
  54      504C2F73 
  54      72632F73 
  54      746D3332 
  54      66313078 
  55 001b 00       		.text
  56 001e 00BF     		.align	2
  57              		.global	CEC_Init
  58              		.thumb
  59              		.thumb_func
  61              	CEC_Init:
  62              	.LFB30:
 125:../SPL/src/stm32f10x_cec.c **** 
 126:../SPL/src/stm32f10x_cec.c **** 
 127:../SPL/src/stm32f10x_cec.c **** /**
 128:../SPL/src/stm32f10x_cec.c ****   * @brief  Initializes the CEC peripheral according to the specified 
 129:../SPL/src/stm32f10x_cec.c ****   *         parameters in the CEC_InitStruct.
 130:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_InitStruct: pointer to an CEC_InitTypeDef structure that
 131:../SPL/src/stm32f10x_cec.c ****   *         contains the configuration information for the specified
 132:../SPL/src/stm32f10x_cec.c ****   *         CEC peripheral.
 133:../SPL/src/stm32f10x_cec.c ****   * @retval None
 134:../SPL/src/stm32f10x_cec.c ****   */
 135:../SPL/src/stm32f10x_cec.c **** void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
 136:../SPL/src/stm32f10x_cec.c **** {
  63              		.loc 1 136 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 16
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67 0020 80B5     		push	{r7, lr}
  68              	.LCFI2:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0022 84B0     		sub	sp, sp, #16
  73              	.LCFI3:
  74              		.cfi_def_cfa_offset 24
  75 0024 00AF     		add	r7, sp, #0
  76              	.LCFI4:
  77              		.cfi_def_cfa_register 7
  78 0026 7860     		str	r0, [r7, #4]
 137:../SPL/src/stm32f10x_cec.c ****   uint16_t tmpreg = 0;
  79              		.loc 1 137 0
  80 0028 4FF00003 		mov	r3, #0
  81 002c FB81     		strh	r3, [r7, #14]	@ movhi
 138:../SPL/src/stm32f10x_cec.c ****  
 139:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 140:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  82              		.loc 1 140 0
  83 002e 7B68     		ldr	r3, [r7, #4]
  84 0030 1B88     		ldrh	r3, [r3, #0]
  85 0032 002B     		cmp	r3, #0
  86 0034 08D0     		beq	.L3
  87              		.loc 1 140 0 is_stmt 0 discriminator 1
  88 0036 7B68     		ldr	r3, [r7, #4]
  89 0038 1B88     		ldrh	r3, [r3, #0]
  90 003a 042B     		cmp	r3, #4
  91 003c 04D0     		beq	.L3
  92              		.loc 1 140 0 discriminator 2
  93 003e 1448     		ldr	r0, .L5
  94 0040 4FF08C01 		mov	r1, #140
  95 0044 FFF7FEFF 		bl	assert_failed
  96              	.L3:
 141:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
  97              		.loc 1 141 0 is_stmt 1
  98 0048 7B68     		ldr	r3, [r7, #4]
  99 004a 5B88     		ldrh	r3, [r3, #2]
 100 004c 002B     		cmp	r3, #0
 101 004e 08D0     		beq	.L4
 102              		.loc 1 141 0 is_stmt 0 discriminator 1
 103 0050 7B68     		ldr	r3, [r7, #4]
 104 0052 5B88     		ldrh	r3, [r3, #2]
 105 0054 082B     		cmp	r3, #8
 106 0056 04D0     		beq	.L4
 107              		.loc 1 141 0 discriminator 2
 108 0058 0D48     		ldr	r0, .L5
 109 005a 4FF08D01 		mov	r1, #141
 110 005e FFF7FEFF 		bl	assert_failed
 111              	.L4:
 142:../SPL/src/stm32f10x_cec.c ****      
 143:../SPL/src/stm32f10x_cec.c ****   /*---------------------------- CEC CFGR Configuration -----------------*/
 144:../SPL/src/stm32f10x_cec.c ****   /* Get the CEC CFGR value */
 145:../SPL/src/stm32f10x_cec.c ****   tmpreg = CEC->CFGR;
 112              		.loc 1 145 0 is_stmt 1
 113 0062 0C4B     		ldr	r3, .L5+4
 114 0064 1B68     		ldr	r3, [r3, #0]
 115 0066 FB81     		strh	r3, [r7, #14]	@ movhi
 146:../SPL/src/stm32f10x_cec.c ****   
 147:../SPL/src/stm32f10x_cec.c ****   /* Clear BTEM and BPEM bits */
 148:../SPL/src/stm32f10x_cec.c ****   tmpreg &= CFGR_CLEAR_Mask;
 116              		.loc 1 148 0
 117 0068 FB89     		ldrh	r3, [r7, #14]	@ movhi
 118 006a 03F0F303 		and	r3, r3, #243
 119 006e FB81     		strh	r3, [r7, #14]	@ movhi
 149:../SPL/src/stm32f10x_cec.c ****   
 150:../SPL/src/stm32f10x_cec.c ****   /* Configure CEC: Bit Timing Error and Bit Period Error */
 151:../SPL/src/stm32f10x_cec.c ****   tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);
 120              		.loc 1 151 0
 121 0070 7B68     		ldr	r3, [r7, #4]
 122 0072 1A88     		ldrh	r2, [r3, #0]
 123 0074 7B68     		ldr	r3, [r7, #4]
 124 0076 5B88     		ldrh	r3, [r3, #2]
 125 0078 1343     		orrs	r3, r3, r2
 126 007a 9AB2     		uxth	r2, r3
 127 007c FB89     		ldrh	r3, [r7, #14]	@ movhi
 128 007e 1343     		orrs	r3, r3, r2
 129 0080 FB81     		strh	r3, [r7, #14]	@ movhi
 152:../SPL/src/stm32f10x_cec.c **** 
 153:../SPL/src/stm32f10x_cec.c ****   /* Write to CEC CFGR  register*/
 154:../SPL/src/stm32f10x_cec.c ****   CEC->CFGR = tmpreg;
 130              		.loc 1 154 0
 131 0082 044B     		ldr	r3, .L5+4
 132 0084 FA89     		ldrh	r2, [r7, #14]
 133 0086 1A60     		str	r2, [r3, #0]
 155:../SPL/src/stm32f10x_cec.c ****   
 156:../SPL/src/stm32f10x_cec.c **** }
 134              		.loc 1 156 0
 135 0088 07F11007 		add	r7, r7, #16
 136 008c BD46     		mov	sp, r7
 137 008e 80BD     		pop	{r7, pc}
 138              	.L6:
 139              		.align	2
 140              	.L5:
 141 0090 00000000 		.word	.LC0
 142 0094 00780040 		.word	1073772544
 143              		.cfi_endproc
 144              	.LFE30:
 146              		.align	2
 147              		.global	CEC_Cmd
 148              		.thumb
 149              		.thumb_func
 151              	CEC_Cmd:
 152              	.LFB31:
 157:../SPL/src/stm32f10x_cec.c **** 
 158:../SPL/src/stm32f10x_cec.c **** /**
 159:../SPL/src/stm32f10x_cec.c ****   * @brief  Enables or disables the specified CEC peripheral.
 160:../SPL/src/stm32f10x_cec.c ****   * @param  NewState: new state of the CEC peripheral. 
 161:../SPL/src/stm32f10x_cec.c ****   *     This parameter can be: ENABLE or DISABLE.
 162:../SPL/src/stm32f10x_cec.c ****   * @retval None
 163:../SPL/src/stm32f10x_cec.c ****   */
 164:../SPL/src/stm32f10x_cec.c **** void CEC_Cmd(FunctionalState NewState)
 165:../SPL/src/stm32f10x_cec.c **** {
 153              		.loc 1 165 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 8
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157 0098 80B5     		push	{r7, lr}
 158              	.LCFI5:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 7, -8
 161              		.cfi_offset 14, -4
 162 009a 82B0     		sub	sp, sp, #8
 163              	.LCFI6:
 164              		.cfi_def_cfa_offset 16
 165 009c 00AF     		add	r7, sp, #0
 166              	.LCFI7:
 167              		.cfi_def_cfa_register 7
 168 009e 0346     		mov	r3, r0
 169 00a0 FB71     		strb	r3, [r7, #7]
 166:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 167:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 170              		.loc 1 167 0
 171 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 172 00a4 002B     		cmp	r3, #0
 173 00a6 07D0     		beq	.L8
 174              		.loc 1 167 0 is_stmt 0 discriminator 1
 175 00a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 176 00aa 012B     		cmp	r3, #1
 177 00ac 04D0     		beq	.L8
 178              		.loc 1 167 0 discriminator 2
 179 00ae 0B48     		ldr	r0, .L11
 180 00b0 4FF0A701 		mov	r1, #167
 181 00b4 FFF7FEFF 		bl	assert_failed
 182              	.L8:
 168:../SPL/src/stm32f10x_cec.c **** 
 169:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
 183              		.loc 1 169 0 is_stmt 1
 184 00b8 094B     		ldr	r3, .L11+4
 185 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 186 00bc 1A60     		str	r2, [r3, #0]
 170:../SPL/src/stm32f10x_cec.c **** 
 171:../SPL/src/stm32f10x_cec.c ****   if(NewState == DISABLE)
 187              		.loc 1 171 0
 188 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 189 00c0 002B     		cmp	r3, #0
 190 00c2 06D1     		bne	.L7
 172:../SPL/src/stm32f10x_cec.c ****   {
 173:../SPL/src/stm32f10x_cec.c ****     /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
 174:../SPL/src/stm32f10x_cec.c ****     while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
 191              		.loc 1 174 0
 192 00c4 00BF     		nop
 193              	.L10:
 194              		.loc 1 174 0 is_stmt 0 discriminator 1
 195 00c6 074B     		ldr	r3, .L11+8
 196 00c8 1B68     		ldr	r3, [r3, #0]
 197 00ca 03F00103 		and	r3, r3, #1
 198 00ce 002B     		cmp	r3, #0
 199 00d0 F9D1     		bne	.L10
 200              	.L7:
 175:../SPL/src/stm32f10x_cec.c ****     {
 176:../SPL/src/stm32f10x_cec.c ****     }  
 177:../SPL/src/stm32f10x_cec.c ****   }  
 178:../SPL/src/stm32f10x_cec.c **** }
 201              		.loc 1 178 0 is_stmt 1
 202 00d2 07F10807 		add	r7, r7, #8
 203 00d6 BD46     		mov	sp, r7
 204 00d8 80BD     		pop	{r7, pc}
 205              	.L12:
 206 00da 00BF     		.align	2
 207              	.L11:
 208 00dc 00000000 		.word	.LC0
 209 00e0 00000F42 		.word	1108279296
 210 00e4 00780040 		.word	1073772544
 211              		.cfi_endproc
 212              	.LFE31:
 214              		.align	2
 215              		.global	CEC_ITConfig
 216              		.thumb
 217              		.thumb_func
 219              	CEC_ITConfig:
 220              	.LFB32:
 179:../SPL/src/stm32f10x_cec.c **** 
 180:../SPL/src/stm32f10x_cec.c **** /**
 181:../SPL/src/stm32f10x_cec.c ****   * @brief  Enables or disables the CEC interrupt.
 182:../SPL/src/stm32f10x_cec.c ****   * @param  NewState: new state of the CEC interrupt.
 183:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be: ENABLE or DISABLE.
 184:../SPL/src/stm32f10x_cec.c ****   * @retval None
 185:../SPL/src/stm32f10x_cec.c ****   */
 186:../SPL/src/stm32f10x_cec.c **** void CEC_ITConfig(FunctionalState NewState)
 187:../SPL/src/stm32f10x_cec.c **** {
 221              		.loc 1 187 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 8
 224              		@ frame_needed = 1, uses_anonymous_args = 0
 225 00e8 80B5     		push	{r7, lr}
 226              	.LCFI8:
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 00ea 82B0     		sub	sp, sp, #8
 231              	.LCFI9:
 232              		.cfi_def_cfa_offset 16
 233 00ec 00AF     		add	r7, sp, #0
 234              	.LCFI10:
 235              		.cfi_def_cfa_register 7
 236 00ee 0346     		mov	r3, r0
 237 00f0 FB71     		strb	r3, [r7, #7]
 188:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 189:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 238              		.loc 1 189 0
 239 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 240 00f4 002B     		cmp	r3, #0
 241 00f6 07D0     		beq	.L14
 242              		.loc 1 189 0 is_stmt 0 discriminator 1
 243 00f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 244 00fa 012B     		cmp	r3, #1
 245 00fc 04D0     		beq	.L14
 246              		.loc 1 189 0 discriminator 2
 247 00fe 0648     		ldr	r0, .L15
 248 0100 4FF0BD01 		mov	r1, #189
 249 0104 FFF7FEFF 		bl	assert_failed
 250              	.L14:
 190:../SPL/src/stm32f10x_cec.c **** 
 191:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
 251              		.loc 1 191 0 is_stmt 1
 252 0108 044B     		ldr	r3, .L15+4
 253 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 254 010c 1A60     		str	r2, [r3, #0]
 192:../SPL/src/stm32f10x_cec.c **** }
 255              		.loc 1 192 0
 256 010e 07F10807 		add	r7, r7, #8
 257 0112 BD46     		mov	sp, r7
 258 0114 80BD     		pop	{r7, pc}
 259              	.L16:
 260 0116 00BF     		.align	2
 261              	.L15:
 262 0118 00000000 		.word	.LC0
 263 011c 04000F42 		.word	1108279300
 264              		.cfi_endproc
 265              	.LFE32:
 267              		.align	2
 268              		.global	CEC_OwnAddressConfig
 269              		.thumb
 270              		.thumb_func
 272              	CEC_OwnAddressConfig:
 273              	.LFB33:
 193:../SPL/src/stm32f10x_cec.c **** 
 194:../SPL/src/stm32f10x_cec.c **** /**
 195:../SPL/src/stm32f10x_cec.c ****   * @brief  Defines the Own Address of the CEC device.
 196:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_OwnAddress: The CEC own address
 197:../SPL/src/stm32f10x_cec.c ****   * @retval None
 198:../SPL/src/stm32f10x_cec.c ****   */
 199:../SPL/src/stm32f10x_cec.c **** void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress)
 200:../SPL/src/stm32f10x_cec.c **** {
 274              		.loc 1 200 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 8
 277              		@ frame_needed = 1, uses_anonymous_args = 0
 278 0120 80B5     		push	{r7, lr}
 279              	.LCFI11:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 7, -8
 282              		.cfi_offset 14, -4
 283 0122 82B0     		sub	sp, sp, #8
 284              	.LCFI12:
 285              		.cfi_def_cfa_offset 16
 286 0124 00AF     		add	r7, sp, #0
 287              	.LCFI13:
 288              		.cfi_def_cfa_register 7
 289 0126 0346     		mov	r3, r0
 290 0128 FB71     		strb	r3, [r7, #7]
 201:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 202:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));
 291              		.loc 1 202 0
 292 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 293 012c 0F2B     		cmp	r3, #15
 294 012e 04D9     		bls	.L18
 295              		.loc 1 202 0 is_stmt 0 discriminator 1
 296 0130 0548     		ldr	r0, .L19
 297 0132 4FF0CA01 		mov	r1, #202
 298 0136 FFF7FEFF 		bl	assert_failed
 299              	.L18:
 203:../SPL/src/stm32f10x_cec.c **** 
 204:../SPL/src/stm32f10x_cec.c ****   /* Set the CEC own address */
 205:../SPL/src/stm32f10x_cec.c ****   CEC->OAR = CEC_OwnAddress;
 300              		.loc 1 205 0 is_stmt 1
 301 013a 044B     		ldr	r3, .L19+4
 302 013c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 303 013e 5A60     		str	r2, [r3, #4]
 206:../SPL/src/stm32f10x_cec.c **** }
 304              		.loc 1 206 0
 305 0140 07F10807 		add	r7, r7, #8
 306 0144 BD46     		mov	sp, r7
 307 0146 80BD     		pop	{r7, pc}
 308              	.L20:
 309              		.align	2
 310              	.L19:
 311 0148 00000000 		.word	.LC0
 312 014c 00780040 		.word	1073772544
 313              		.cfi_endproc
 314              	.LFE33:
 316              		.align	2
 317              		.global	CEC_SetPrescaler
 318              		.thumb
 319              		.thumb_func
 321              	CEC_SetPrescaler:
 322              	.LFB34:
 207:../SPL/src/stm32f10x_cec.c **** 
 208:../SPL/src/stm32f10x_cec.c **** /**
 209:../SPL/src/stm32f10x_cec.c ****   * @brief  Sets the CEC prescaler value.
 210:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_Prescaler: CEC prescaler new value
 211:../SPL/src/stm32f10x_cec.c ****   * @retval None
 212:../SPL/src/stm32f10x_cec.c ****   */
 213:../SPL/src/stm32f10x_cec.c **** void CEC_SetPrescaler(uint16_t CEC_Prescaler)
 214:../SPL/src/stm32f10x_cec.c **** {
 323              		.loc 1 214 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 8
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327 0150 80B5     		push	{r7, lr}
 328              	.LCFI14:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0152 82B0     		sub	sp, sp, #8
 333              	.LCFI15:
 334              		.cfi_def_cfa_offset 16
 335 0154 00AF     		add	r7, sp, #0
 336              	.LCFI16:
 337              		.cfi_def_cfa_register 7
 338 0156 0346     		mov	r3, r0
 339 0158 FB80     		strh	r3, [r7, #6]	@ movhi
 215:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 216:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_PRESCALER(CEC_Prescaler));
 340              		.loc 1 216 0
 341 015a FA88     		ldrh	r2, [r7, #6]
 342 015c 43F6FF73 		movw	r3, #16383
 343 0160 9A42     		cmp	r2, r3
 344 0162 04D9     		bls	.L22
 345              		.loc 1 216 0 is_stmt 0 discriminator 1
 346 0164 0548     		ldr	r0, .L23
 347 0166 4FF0D801 		mov	r1, #216
 348 016a FFF7FEFF 		bl	assert_failed
 349              	.L22:
 217:../SPL/src/stm32f10x_cec.c **** 
 218:../SPL/src/stm32f10x_cec.c ****   /* Set the  Prescaler value*/
 219:../SPL/src/stm32f10x_cec.c ****   CEC->PRES = CEC_Prescaler;
 350              		.loc 1 219 0 is_stmt 1
 351 016e 044B     		ldr	r3, .L23+4
 352 0170 FA88     		ldrh	r2, [r7, #6]
 353 0172 9A60     		str	r2, [r3, #8]
 220:../SPL/src/stm32f10x_cec.c **** }
 354              		.loc 1 220 0
 355 0174 07F10807 		add	r7, r7, #8
 356 0178 BD46     		mov	sp, r7
 357 017a 80BD     		pop	{r7, pc}
 358              	.L24:
 359              		.align	2
 360              	.L23:
 361 017c 00000000 		.word	.LC0
 362 0180 00780040 		.word	1073772544
 363              		.cfi_endproc
 364              	.LFE34:
 366              		.align	2
 367              		.global	CEC_SendDataByte
 368              		.thumb
 369              		.thumb_func
 371              	CEC_SendDataByte:
 372              	.LFB35:
 221:../SPL/src/stm32f10x_cec.c **** 
 222:../SPL/src/stm32f10x_cec.c **** /**
 223:../SPL/src/stm32f10x_cec.c ****   * @brief  Transmits single data through the CEC peripheral.
 224:../SPL/src/stm32f10x_cec.c ****   * @param  Data: the data to transmit.
 225:../SPL/src/stm32f10x_cec.c ****   * @retval None
 226:../SPL/src/stm32f10x_cec.c ****   */
 227:../SPL/src/stm32f10x_cec.c **** void CEC_SendDataByte(uint8_t Data)
 228:../SPL/src/stm32f10x_cec.c **** {  
 373              		.loc 1 228 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 378 0184 80B4     		push	{r7}
 379              	.LCFI17:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 7, -4
 382 0186 83B0     		sub	sp, sp, #12
 383              	.LCFI18:
 384              		.cfi_def_cfa_offset 16
 385 0188 00AF     		add	r7, sp, #0
 386              	.LCFI19:
 387              		.cfi_def_cfa_register 7
 388 018a 0346     		mov	r3, r0
 389 018c FB71     		strb	r3, [r7, #7]
 229:../SPL/src/stm32f10x_cec.c ****   /* Transmit Data */
 230:../SPL/src/stm32f10x_cec.c ****   CEC->TXD = Data ;
 390              		.loc 1 230 0
 391 018e 044B     		ldr	r3, .L26
 392 0190 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 393 0192 5A61     		str	r2, [r3, #20]
 231:../SPL/src/stm32f10x_cec.c **** }
 394              		.loc 1 231 0
 395 0194 07F10C07 		add	r7, r7, #12
 396 0198 BD46     		mov	sp, r7
 397 019a 80BC     		pop	{r7}
 398 019c 7047     		bx	lr
 399              	.L27:
 400 019e 00BF     		.align	2
 401              	.L26:
 402 01a0 00780040 		.word	1073772544
 403              		.cfi_endproc
 404              	.LFE35:
 406              		.align	2
 407              		.global	CEC_ReceiveDataByte
 408              		.thumb
 409              		.thumb_func
 411              	CEC_ReceiveDataByte:
 412              	.LFB36:
 232:../SPL/src/stm32f10x_cec.c **** 
 233:../SPL/src/stm32f10x_cec.c **** 
 234:../SPL/src/stm32f10x_cec.c **** /**
 235:../SPL/src/stm32f10x_cec.c ****   * @brief  Returns the most recent received data by the CEC peripheral.
 236:../SPL/src/stm32f10x_cec.c ****   * @param  None
 237:../SPL/src/stm32f10x_cec.c ****   * @retval The received data.
 238:../SPL/src/stm32f10x_cec.c ****   */
 239:../SPL/src/stm32f10x_cec.c **** uint8_t CEC_ReceiveDataByte(void)
 240:../SPL/src/stm32f10x_cec.c **** {
 413              		.loc 1 240 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 1, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 418 01a4 80B4     		push	{r7}
 419              	.LCFI20:
 420              		.cfi_def_cfa_offset 4
 421              		.cfi_offset 7, -4
 422 01a6 00AF     		add	r7, sp, #0
 423              	.LCFI21:
 424              		.cfi_def_cfa_register 7
 241:../SPL/src/stm32f10x_cec.c ****   /* Receive Data */
 242:../SPL/src/stm32f10x_cec.c ****   return (uint8_t)(CEC->RXD);
 425              		.loc 1 242 0
 426 01a8 034B     		ldr	r3, .L30
 427 01aa 9B69     		ldr	r3, [r3, #24]
 428 01ac DBB2     		uxtb	r3, r3
 243:../SPL/src/stm32f10x_cec.c **** }
 429              		.loc 1 243 0
 430 01ae 1846     		mov	r0, r3
 431 01b0 BD46     		mov	sp, r7
 432 01b2 80BC     		pop	{r7}
 433 01b4 7047     		bx	lr
 434              	.L31:
 435 01b6 00BF     		.align	2
 436              	.L30:
 437 01b8 00780040 		.word	1073772544
 438              		.cfi_endproc
 439              	.LFE36:
 441              		.align	2
 442              		.global	CEC_StartOfMessage
 443              		.thumb
 444              		.thumb_func
 446              	CEC_StartOfMessage:
 447              	.LFB37:
 244:../SPL/src/stm32f10x_cec.c **** 
 245:../SPL/src/stm32f10x_cec.c **** /**
 246:../SPL/src/stm32f10x_cec.c ****   * @brief  Starts a new message.
 247:../SPL/src/stm32f10x_cec.c ****   * @param  None
 248:../SPL/src/stm32f10x_cec.c ****   * @retval None
 249:../SPL/src/stm32f10x_cec.c ****   */
 250:../SPL/src/stm32f10x_cec.c **** void CEC_StartOfMessage(void)
 251:../SPL/src/stm32f10x_cec.c **** {  
 448              		.loc 1 251 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 453 01bc 80B4     		push	{r7}
 454              	.LCFI22:
 455              		.cfi_def_cfa_offset 4
 456              		.cfi_offset 7, -4
 457 01be 00AF     		add	r7, sp, #0
 458              	.LCFI23:
 459              		.cfi_def_cfa_register 7
 252:../SPL/src/stm32f10x_cec.c ****   /* Starts of new message */
 253:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
 460              		.loc 1 253 0
 461 01c0 034B     		ldr	r3, .L33
 462 01c2 4FF00102 		mov	r2, #1
 463 01c6 1A60     		str	r2, [r3, #0]
 254:../SPL/src/stm32f10x_cec.c **** }
 464              		.loc 1 254 0
 465 01c8 BD46     		mov	sp, r7
 466 01ca 80BC     		pop	{r7}
 467 01cc 7047     		bx	lr
 468              	.L34:
 469 01ce 00BF     		.align	2
 470              	.L33:
 471 01d0 00020F42 		.word	1108279808
 472              		.cfi_endproc
 473              	.LFE37:
 475              		.align	2
 476              		.global	CEC_EndOfMessageCmd
 477              		.thumb
 478              		.thumb_func
 480              	CEC_EndOfMessageCmd:
 481              	.LFB38:
 255:../SPL/src/stm32f10x_cec.c **** 
 256:../SPL/src/stm32f10x_cec.c **** /**
 257:../SPL/src/stm32f10x_cec.c ****   * @brief  Transmits message with or without an EOM bit.
 258:../SPL/src/stm32f10x_cec.c ****   * @param  NewState: new state of the CEC Tx End Of Message. 
 259:../SPL/src/stm32f10x_cec.c ****   *     This parameter can be: ENABLE or DISABLE.
 260:../SPL/src/stm32f10x_cec.c ****   * @retval None
 261:../SPL/src/stm32f10x_cec.c ****   */
 262:../SPL/src/stm32f10x_cec.c **** void CEC_EndOfMessageCmd(FunctionalState NewState)
 263:../SPL/src/stm32f10x_cec.c **** {   
 482              		.loc 1 263 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 8
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486 01d4 80B5     		push	{r7, lr}
 487              	.LCFI24:
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 01d6 82B0     		sub	sp, sp, #8
 492              	.LCFI25:
 493              		.cfi_def_cfa_offset 16
 494 01d8 00AF     		add	r7, sp, #0
 495              	.LCFI26:
 496              		.cfi_def_cfa_register 7
 497 01da 0346     		mov	r3, r0
 498 01dc FB71     		strb	r3, [r7, #7]
 264:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 265:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 499              		.loc 1 265 0
 500 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 501 01e0 002B     		cmp	r3, #0
 502 01e2 07D0     		beq	.L36
 503              		.loc 1 265 0 is_stmt 0 discriminator 1
 504 01e4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 505 01e6 012B     		cmp	r3, #1
 506 01e8 04D0     		beq	.L36
 507              		.loc 1 265 0 discriminator 2
 508 01ea 0648     		ldr	r0, .L37
 509 01ec 40F20911 		movw	r1, #265
 510 01f0 FFF7FEFF 		bl	assert_failed
 511              	.L36:
 266:../SPL/src/stm32f10x_cec.c ****   
 267:../SPL/src/stm32f10x_cec.c ****   /* The data byte will be transmitted with or without an EOM bit*/
 268:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
 512              		.loc 1 268 0 is_stmt 1
 513 01f4 044B     		ldr	r3, .L37+4
 514 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 515 01f8 1A60     		str	r2, [r3, #0]
 269:../SPL/src/stm32f10x_cec.c **** }
 516              		.loc 1 269 0
 517 01fa 07F10807 		add	r7, r7, #8
 518 01fe BD46     		mov	sp, r7
 519 0200 80BD     		pop	{r7, pc}
 520              	.L38:
 521 0202 00BF     		.align	2
 522              	.L37:
 523 0204 00000000 		.word	.LC0
 524 0208 04020F42 		.word	1108279812
 525              		.cfi_endproc
 526              	.LFE38:
 528              		.align	2
 529              		.global	CEC_GetFlagStatus
 530              		.thumb
 531              		.thumb_func
 533              	CEC_GetFlagStatus:
 534              	.LFB39:
 270:../SPL/src/stm32f10x_cec.c **** 
 271:../SPL/src/stm32f10x_cec.c **** /**
 272:../SPL/src/stm32f10x_cec.c ****   * @brief  Gets the CEC flag status
 273:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_FLAG: specifies the CEC flag to check. 
 274:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be one of the following values:
 275:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_BTE: Bit Timing Error
 276:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_BPE: Bit Period Error
 277:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RBTFE: Rx Block Transfer Finished Error
 278:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_SBE: Start Bit Error
 279:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_ACKE: Block Acknowledge Error
 280:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_LINE: Line Error
 281:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TBTFE: Tx Block Transfer Finished Error
 282:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TEOM: Tx End Of Message 
 283:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TERR: Tx Error
 284:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TBTRF: Tx Byte Transfer Request or Block Transfer Finished
 285:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RSOM: Rx Start Of Message
 286:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_REOM: Rx End Of Message
 287:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RERR: Rx Error
 288:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RBTF: Rx Byte/Block Transfer Finished
 289:../SPL/src/stm32f10x_cec.c ****   * @retval The new state of CEC_FLAG (SET or RESET)
 290:../SPL/src/stm32f10x_cec.c ****   */
 291:../SPL/src/stm32f10x_cec.c **** FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG) 
 292:../SPL/src/stm32f10x_cec.c **** {
 535              		.loc 1 292 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 24
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 020c 80B5     		push	{r7, lr}
 540              	.LCFI27:
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 020e 86B0     		sub	sp, sp, #24
 545              	.LCFI28:
 546              		.cfi_def_cfa_offset 32
 547 0210 00AF     		add	r7, sp, #0
 548              	.LCFI29:
 549              		.cfi_def_cfa_register 7
 550 0212 7860     		str	r0, [r7, #4]
 293:../SPL/src/stm32f10x_cec.c ****   FlagStatus bitstatus = RESET;
 551              		.loc 1 293 0
 552 0214 4FF00003 		mov	r3, #0
 553 0218 FB75     		strb	r3, [r7, #23]
 294:../SPL/src/stm32f10x_cec.c ****   uint32_t cecreg = 0, cecbase = 0;
 554              		.loc 1 294 0
 555 021a 4FF00003 		mov	r3, #0
 556 021e FB60     		str	r3, [r7, #12]
 557 0220 4FF00003 		mov	r3, #0
 558 0224 3B61     		str	r3, [r7, #16]
 295:../SPL/src/stm32f10x_cec.c ****   
 296:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 297:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_GET_FLAG(CEC_FLAG));
 559              		.loc 1 297 0
 560 0226 7A68     		ldr	r2, [r7, #4]
 561 0228 304B     		ldr	r3, .L46
 562 022a 9A42     		cmp	r2, r3
 563 022c 31D0     		beq	.L40
 564              		.loc 1 297 0 is_stmt 0 discriminator 1
 565 022e 7A68     		ldr	r2, [r7, #4]
 566 0230 2F4B     		ldr	r3, .L46+4
 567 0232 9A42     		cmp	r2, r3
 568 0234 2DD0     		beq	.L40
 569              		.loc 1 297 0 discriminator 2
 570 0236 7A68     		ldr	r2, [r7, #4]
 571 0238 2E4B     		ldr	r3, .L46+8
 572 023a 9A42     		cmp	r2, r3
 573 023c 29D0     		beq	.L40
 574              		.loc 1 297 0 discriminator 3
 575 023e 7A68     		ldr	r2, [r7, #4]
 576 0240 2D4B     		ldr	r3, .L46+12
 577 0242 9A42     		cmp	r2, r3
 578 0244 25D0     		beq	.L40
 579              		.loc 1 297 0 discriminator 4
 580 0246 7A68     		ldr	r2, [r7, #4]
 581 0248 2C4B     		ldr	r3, .L46+16
 582 024a 9A42     		cmp	r2, r3
 583 024c 21D0     		beq	.L40
 584              		.loc 1 297 0 discriminator 5
 585 024e 7B68     		ldr	r3, [r7, #4]
 586 0250 B3F1815F 		cmp	r3, #270532608
 587 0254 1DD0     		beq	.L40
 588              		.loc 1 297 0 discriminator 6
 589 0256 7B68     		ldr	r3, [r7, #4]
 590 0258 B3F1825F 		cmp	r3, #272629760
 591 025c 19D0     		beq	.L40
 592              		.loc 1 297 0 discriminator 7
 593 025e 7B68     		ldr	r3, [r7, #4]
 594 0260 022B     		cmp	r3, #2
 595 0262 16D0     		beq	.L40
 596              		.loc 1 297 0 discriminator 8
 597 0264 7B68     		ldr	r3, [r7, #4]
 598 0266 042B     		cmp	r3, #4
 599 0268 13D0     		beq	.L40
 600              		.loc 1 297 0 discriminator 9
 601 026a 7B68     		ldr	r3, [r7, #4]
 602 026c 082B     		cmp	r3, #8
 603 026e 10D0     		beq	.L40
 604              		.loc 1 297 0 discriminator 10
 605 0270 7B68     		ldr	r3, [r7, #4]
 606 0272 102B     		cmp	r3, #16
 607 0274 0DD0     		beq	.L40
 608              		.loc 1 297 0 discriminator 11
 609 0276 7B68     		ldr	r3, [r7, #4]
 610 0278 202B     		cmp	r3, #32
 611 027a 0AD0     		beq	.L40
 612              		.loc 1 297 0 discriminator 12
 613 027c 7B68     		ldr	r3, [r7, #4]
 614 027e 402B     		cmp	r3, #64
 615 0280 07D0     		beq	.L40
 616              		.loc 1 297 0 discriminator 13
 617 0282 7B68     		ldr	r3, [r7, #4]
 618 0284 802B     		cmp	r3, #128
 619 0286 04D0     		beq	.L40
 620              		.loc 1 297 0 discriminator 14
 621 0288 1D48     		ldr	r0, .L46+20
 622 028a 40F22911 		movw	r1, #297
 623 028e FFF7FEFF 		bl	assert_failed
 624              	.L40:
 298:../SPL/src/stm32f10x_cec.c ****  
 299:../SPL/src/stm32f10x_cec.c ****   /* Get the CEC peripheral base address */
 300:../SPL/src/stm32f10x_cec.c ****   cecbase = (uint32_t)(CEC_BASE);
 625              		.loc 1 300 0 is_stmt 1
 626 0292 1C4B     		ldr	r3, .L46+24
 627 0294 3B61     		str	r3, [r7, #16]
 301:../SPL/src/stm32f10x_cec.c ****   
 302:../SPL/src/stm32f10x_cec.c ****   /* Read flag register index */
 303:../SPL/src/stm32f10x_cec.c ****   cecreg = CEC_FLAG >> 28;
 628              		.loc 1 303 0
 629 0296 7B68     		ldr	r3, [r7, #4]
 630 0298 4FEA1373 		lsr	r3, r3, #28
 631 029c FB60     		str	r3, [r7, #12]
 304:../SPL/src/stm32f10x_cec.c ****   
 305:../SPL/src/stm32f10x_cec.c ****   /* Get bit[23:0] of the flag */
 306:../SPL/src/stm32f10x_cec.c ****   CEC_FLAG &= FLAG_Mask;
 632              		.loc 1 306 0
 633 029e 7B68     		ldr	r3, [r7, #4]
 634 02a0 23F07F43 		bic	r3, r3, #-16777216
 635 02a4 7B60     		str	r3, [r7, #4]
 307:../SPL/src/stm32f10x_cec.c ****   
 308:../SPL/src/stm32f10x_cec.c ****   if(cecreg != 0)
 636              		.loc 1 308 0
 637 02a6 FB68     		ldr	r3, [r7, #12]
 638 02a8 002B     		cmp	r3, #0
 639 02aa 08D0     		beq	.L41
 309:../SPL/src/stm32f10x_cec.c ****   {
 310:../SPL/src/stm32f10x_cec.c ****     /* Flag in CEC ESR Register */
 311:../SPL/src/stm32f10x_cec.c ****     CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
 640              		.loc 1 311 0
 641 02ac 7B68     		ldr	r3, [r7, #4]
 642 02ae 4FEA1343 		lsr	r3, r3, #16
 643 02b2 7B60     		str	r3, [r7, #4]
 312:../SPL/src/stm32f10x_cec.c ****     
 313:../SPL/src/stm32f10x_cec.c ****     /* Get the CEC ESR register address */
 314:../SPL/src/stm32f10x_cec.c ****     cecbase += 0xC;
 644              		.loc 1 314 0
 645 02b4 3B69     		ldr	r3, [r7, #16]
 646 02b6 03F10C03 		add	r3, r3, #12
 647 02ba 3B61     		str	r3, [r7, #16]
 648 02bc 03E0     		b	.L42
 649              	.L41:
 315:../SPL/src/stm32f10x_cec.c ****   }
 316:../SPL/src/stm32f10x_cec.c ****   else
 317:../SPL/src/stm32f10x_cec.c ****   {
 318:../SPL/src/stm32f10x_cec.c ****     /* Get the CEC CSR register address */
 319:../SPL/src/stm32f10x_cec.c ****     cecbase += 0x10;
 650              		.loc 1 319 0
 651 02be 3B69     		ldr	r3, [r7, #16]
 652 02c0 03F11003 		add	r3, r3, #16
 653 02c4 3B61     		str	r3, [r7, #16]
 654              	.L42:
 320:../SPL/src/stm32f10x_cec.c ****   }
 321:../SPL/src/stm32f10x_cec.c ****   
 322:../SPL/src/stm32f10x_cec.c ****   if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
 655              		.loc 1 322 0
 656 02c6 3B69     		ldr	r3, [r7, #16]
 657 02c8 1A68     		ldr	r2, [r3, #0]
 658 02ca 7B68     		ldr	r3, [r7, #4]
 659 02cc 1340     		ands	r3, r3, r2
 660 02ce 002B     		cmp	r3, #0
 661 02d0 03D0     		beq	.L43
 323:../SPL/src/stm32f10x_cec.c ****   {
 324:../SPL/src/stm32f10x_cec.c ****     /* CEC_FLAG is set */
 325:../SPL/src/stm32f10x_cec.c ****     bitstatus = SET;
 662              		.loc 1 325 0
 663 02d2 4FF00103 		mov	r3, #1
 664 02d6 FB75     		strb	r3, [r7, #23]
 665 02d8 02E0     		b	.L44
 666              	.L43:
 326:../SPL/src/stm32f10x_cec.c ****   }
 327:../SPL/src/stm32f10x_cec.c ****   else
 328:../SPL/src/stm32f10x_cec.c ****   {
 329:../SPL/src/stm32f10x_cec.c ****     /* CEC_FLAG is reset */
 330:../SPL/src/stm32f10x_cec.c ****     bitstatus = RESET;
 667              		.loc 1 330 0
 668 02da 4FF00003 		mov	r3, #0
 669 02de FB75     		strb	r3, [r7, #23]
 670              	.L44:
 331:../SPL/src/stm32f10x_cec.c ****   }
 332:../SPL/src/stm32f10x_cec.c ****   
 333:../SPL/src/stm32f10x_cec.c ****   /* Return the CEC_FLAG status */
 334:../SPL/src/stm32f10x_cec.c ****   return  bitstatus;
 671              		.loc 1 334 0
 672 02e0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 335:../SPL/src/stm32f10x_cec.c **** }
 673              		.loc 1 335 0
 674 02e2 1846     		mov	r0, r3
 675 02e4 07F11807 		add	r7, r7, #24
 676 02e8 BD46     		mov	sp, r7
 677 02ea 80BD     		pop	{r7, pc}
 678              	.L47:
 679              		.align	2
 680              	.L46:
 681 02ec 00000110 		.word	268500992
 682 02f0 00000210 		.word	268566528
 683 02f4 00000410 		.word	268697600
 684 02f8 00000810 		.word	268959744
 685 02fc 00001010 		.word	269484032
 686 0300 00000000 		.word	.LC0
 687 0304 00780040 		.word	1073772544
 688              		.cfi_endproc
 689              	.LFE39:
 691              		.align	2
 692              		.global	CEC_ClearFlag
 693              		.thumb
 694              		.thumb_func
 696              	CEC_ClearFlag:
 697              	.LFB40:
 336:../SPL/src/stm32f10x_cec.c **** 
 337:../SPL/src/stm32f10x_cec.c **** /**
 338:../SPL/src/stm32f10x_cec.c ****   * @brief  Clears the CEC's pending flags.
 339:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_FLAG: specifies the flag to clear. 
 340:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be any combination of the following values:
 341:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TERR: Tx Error
 342:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TBTRF: Tx Byte Transfer Request or Block Transfer Finished
 343:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RSOM: Rx Start Of Message
 344:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_REOM: Rx End Of Message
 345:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RERR: Rx Error
 346:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RBTF: Rx Byte/Block Transfer Finished
 347:../SPL/src/stm32f10x_cec.c ****   * @retval None
 348:../SPL/src/stm32f10x_cec.c ****   */
 349:../SPL/src/stm32f10x_cec.c **** void CEC_ClearFlag(uint32_t CEC_FLAG)
 350:../SPL/src/stm32f10x_cec.c **** { 
 698              		.loc 1 350 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 16
 701              		@ frame_needed = 1, uses_anonymous_args = 0
 702 0308 80B5     		push	{r7, lr}
 703              	.LCFI30:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 030a 84B0     		sub	sp, sp, #16
 708              	.LCFI31:
 709              		.cfi_def_cfa_offset 24
 710 030c 00AF     		add	r7, sp, #0
 711              	.LCFI32:
 712              		.cfi_def_cfa_register 7
 713 030e 7860     		str	r0, [r7, #4]
 351:../SPL/src/stm32f10x_cec.c ****   uint32_t tmp = 0x0;
 714              		.loc 1 351 0
 715 0310 4FF00003 		mov	r3, #0
 716 0314 FB60     		str	r3, [r7, #12]
 352:../SPL/src/stm32f10x_cec.c ****   
 353:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 354:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));
 717              		.loc 1 354 0
 718 0316 7B68     		ldr	r3, [r7, #4]
 719 0318 23F0FC03 		bic	r3, r3, #252
 720 031c 002B     		cmp	r3, #0
 721 031e 02D1     		bne	.L49
 722              		.loc 1 354 0 is_stmt 0 discriminator 2
 723 0320 7B68     		ldr	r3, [r7, #4]
 724 0322 002B     		cmp	r3, #0
 725 0324 04D1     		bne	.L50
 726              	.L49:
 727              		.loc 1 354 0 discriminator 1
 728 0326 0D48     		ldr	r0, .L51
 729 0328 4FF4B171 		mov	r1, #354
 730 032c FFF7FEFF 		bl	assert_failed
 731              	.L50:
 355:../SPL/src/stm32f10x_cec.c **** 
 356:../SPL/src/stm32f10x_cec.c ****   tmp = CEC->CSR & 0x2;
 732              		.loc 1 356 0 is_stmt 1
 733 0330 0B4B     		ldr	r3, .L51+4
 734 0332 1B69     		ldr	r3, [r3, #16]
 735 0334 03F00203 		and	r3, r3, #2
 736 0338 FB60     		str	r3, [r7, #12]
 357:../SPL/src/stm32f10x_cec.c ****        
 358:../SPL/src/stm32f10x_cec.c ****   /* Clear the selected CEC flags */
 359:../SPL/src/stm32f10x_cec.c ****   CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 737              		.loc 1 359 0
 738 033a 094B     		ldr	r3, .L51+4
 739 033c 084A     		ldr	r2, .L51+4
 740 033e 1169     		ldr	r1, [r2, #16]
 741 0340 7A68     		ldr	r2, [r7, #4]
 742 0342 6FEA0202 		mvn	r2, r2
 743 0346 22F00300 		bic	r0, r2, #3
 744 034a FA68     		ldr	r2, [r7, #12]
 745 034c 0243     		orrs	r2, r2, r0
 746 034e 0A40     		ands	r2, r2, r1
 747 0350 1A61     		str	r2, [r3, #16]
 360:../SPL/src/stm32f10x_cec.c **** }
 748              		.loc 1 360 0
 749 0352 07F11007 		add	r7, r7, #16
 750 0356 BD46     		mov	sp, r7
 751 0358 80BD     		pop	{r7, pc}
 752              	.L52:
 753 035a 00BF     		.align	2
 754              	.L51:
 755 035c 00000000 		.word	.LC0
 756 0360 00780040 		.word	1073772544
 757              		.cfi_endproc
 758              	.LFE40:
 760              		.align	2
 761              		.global	CEC_GetITStatus
 762              		.thumb
 763              		.thumb_func
 765              	CEC_GetITStatus:
 766              	.LFB41:
 361:../SPL/src/stm32f10x_cec.c **** 
 362:../SPL/src/stm32f10x_cec.c **** /**
 363:../SPL/src/stm32f10x_cec.c ****   * @brief  Checks whether the specified CEC interrupt has occurred or not.
 364:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_IT: specifies the CEC interrupt source to check. 
 365:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be one of the following values:
 366:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TERR: Tx Error
 367:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TBTF: Tx Block Transfer Finished
 368:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RERR: Rx Error
 369:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RBTF: Rx Block Transfer Finished
 370:../SPL/src/stm32f10x_cec.c ****   * @retval The new state of CEC_IT (SET or RESET).
 371:../SPL/src/stm32f10x_cec.c ****   */
 372:../SPL/src/stm32f10x_cec.c **** ITStatus CEC_GetITStatus(uint8_t CEC_IT)
 373:../SPL/src/stm32f10x_cec.c **** {
 767              		.loc 1 373 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 16
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771 0364 80B5     		push	{r7, lr}
 772              	.LCFI33:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0366 84B0     		sub	sp, sp, #16
 777              	.LCFI34:
 778              		.cfi_def_cfa_offset 24
 779 0368 00AF     		add	r7, sp, #0
 780              	.LCFI35:
 781              		.cfi_def_cfa_register 7
 782 036a 0346     		mov	r3, r0
 783 036c FB71     		strb	r3, [r7, #7]
 374:../SPL/src/stm32f10x_cec.c ****   ITStatus bitstatus = RESET;
 784              		.loc 1 374 0
 785 036e 4FF00003 		mov	r3, #0
 786 0372 FB73     		strb	r3, [r7, #15]
 375:../SPL/src/stm32f10x_cec.c ****   uint32_t enablestatus = 0;
 787              		.loc 1 375 0
 788 0374 4FF00003 		mov	r3, #0
 789 0378 BB60     		str	r3, [r7, #8]
 376:../SPL/src/stm32f10x_cec.c ****   
 377:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 378:../SPL/src/stm32f10x_cec.c ****    assert_param(IS_CEC_GET_IT(CEC_IT));
 790              		.loc 1 378 0
 791 037a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 792 037c 042B     		cmp	r3, #4
 793 037e 0DD0     		beq	.L54
 794              		.loc 1 378 0 is_stmt 0 discriminator 1
 795 0380 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 796 0382 082B     		cmp	r3, #8
 797 0384 0AD0     		beq	.L54
 798              		.loc 1 378 0 discriminator 2
 799 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 800 0388 402B     		cmp	r3, #64
 801 038a 07D0     		beq	.L54
 802              		.loc 1 378 0 discriminator 3
 803 038c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 804 038e 802B     		cmp	r3, #128
 805 0390 04D0     		beq	.L54
 806              		.loc 1 378 0 discriminator 4
 807 0392 1048     		ldr	r0, .L58
 808 0394 4FF4BD71 		mov	r1, #378
 809 0398 FFF7FEFF 		bl	assert_failed
 810              	.L54:
 379:../SPL/src/stm32f10x_cec.c ****    
 380:../SPL/src/stm32f10x_cec.c ****   /* Get the CEC IT enable bit status */
 381:../SPL/src/stm32f10x_cec.c ****   enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
 811              		.loc 1 381 0 is_stmt 1
 812 039c 0E4B     		ldr	r3, .L58+4
 813 039e 1B68     		ldr	r3, [r3, #0]
 814 03a0 03F00203 		and	r3, r3, #2
 815 03a4 BB60     		str	r3, [r7, #8]
 382:../SPL/src/stm32f10x_cec.c ****   
 383:../SPL/src/stm32f10x_cec.c ****   /* Check the status of the specified CEC interrupt */
 384:../SPL/src/stm32f10x_cec.c ****   if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 816              		.loc 1 384 0
 817 03a6 0C4B     		ldr	r3, .L58+4
 818 03a8 1A69     		ldr	r2, [r3, #16]
 819 03aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 820 03ac 1340     		ands	r3, r3, r2
 821 03ae 002B     		cmp	r3, #0
 822 03b0 06D0     		beq	.L55
 823              		.loc 1 384 0 is_stmt 0 discriminator 1
 824 03b2 BB68     		ldr	r3, [r7, #8]
 825 03b4 002B     		cmp	r3, #0
 826 03b6 03D0     		beq	.L55
 385:../SPL/src/stm32f10x_cec.c ****   {
 386:../SPL/src/stm32f10x_cec.c ****     /* CEC_IT is set */
 387:../SPL/src/stm32f10x_cec.c ****     bitstatus = SET;
 827              		.loc 1 387 0 is_stmt 1
 828 03b8 4FF00103 		mov	r3, #1
 829 03bc FB73     		strb	r3, [r7, #15]
 830 03be 02E0     		b	.L56
 831              	.L55:
 388:../SPL/src/stm32f10x_cec.c ****   }
 389:../SPL/src/stm32f10x_cec.c ****   else
 390:../SPL/src/stm32f10x_cec.c ****   {
 391:../SPL/src/stm32f10x_cec.c ****     /* CEC_IT is reset */
 392:../SPL/src/stm32f10x_cec.c ****     bitstatus = RESET;
 832              		.loc 1 392 0
 833 03c0 4FF00003 		mov	r3, #0
 834 03c4 FB73     		strb	r3, [r7, #15]
 835              	.L56:
 393:../SPL/src/stm32f10x_cec.c ****   }
 394:../SPL/src/stm32f10x_cec.c ****   /* Return the CEC_IT status */
 395:../SPL/src/stm32f10x_cec.c ****   return  bitstatus;
 836              		.loc 1 395 0
 837 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 396:../SPL/src/stm32f10x_cec.c **** }
 838              		.loc 1 396 0
 839 03c8 1846     		mov	r0, r3
 840 03ca 07F11007 		add	r7, r7, #16
 841 03ce BD46     		mov	sp, r7
 842 03d0 80BD     		pop	{r7, pc}
 843              	.L59:
 844 03d2 00BF     		.align	2
 845              	.L58:
 846 03d4 00000000 		.word	.LC0
 847 03d8 00780040 		.word	1073772544
 848              		.cfi_endproc
 849              	.LFE41:
 851              		.align	2
 852              		.global	CEC_ClearITPendingBit
 853              		.thumb
 854              		.thumb_func
 856              	CEC_ClearITPendingBit:
 857              	.LFB42:
 397:../SPL/src/stm32f10x_cec.c **** 
 398:../SPL/src/stm32f10x_cec.c **** /**
 399:../SPL/src/stm32f10x_cec.c ****   * @brief  Clears the CEC's interrupt pending bits.
 400:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_IT: specifies the CEC interrupt pending bit to clear.
 401:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be any combination of the following values:
 402:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TERR: Tx Error
 403:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TBTF: Tx Block Transfer Finished
 404:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RERR: Rx Error
 405:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RBTF: Rx Block Transfer Finished
 406:../SPL/src/stm32f10x_cec.c ****   * @retval None
 407:../SPL/src/stm32f10x_cec.c ****   */
 408:../SPL/src/stm32f10x_cec.c **** void CEC_ClearITPendingBit(uint16_t CEC_IT)
 409:../SPL/src/stm32f10x_cec.c **** {
 858              		.loc 1 409 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 16
 861              		@ frame_needed = 1, uses_anonymous_args = 0
 862 03dc 80B5     		push	{r7, lr}
 863              	.LCFI36:
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 03de 84B0     		sub	sp, sp, #16
 868              	.LCFI37:
 869              		.cfi_def_cfa_offset 24
 870 03e0 00AF     		add	r7, sp, #0
 871              	.LCFI38:
 872              		.cfi_def_cfa_register 7
 873 03e2 0346     		mov	r3, r0
 874 03e4 FB80     		strh	r3, [r7, #6]	@ movhi
 410:../SPL/src/stm32f10x_cec.c ****   uint32_t tmp = 0x0;
 875              		.loc 1 410 0
 876 03e6 4FF00003 		mov	r3, #0
 877 03ea FB60     		str	r3, [r7, #12]
 411:../SPL/src/stm32f10x_cec.c ****   
 412:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 413:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_GET_IT(CEC_IT));
 878              		.loc 1 413 0
 879 03ec FB88     		ldrh	r3, [r7, #6]
 880 03ee 042B     		cmp	r3, #4
 881 03f0 0DD0     		beq	.L61
 882              		.loc 1 413 0 is_stmt 0 discriminator 1
 883 03f2 FB88     		ldrh	r3, [r7, #6]
 884 03f4 082B     		cmp	r3, #8
 885 03f6 0AD0     		beq	.L61
 886              		.loc 1 413 0 discriminator 2
 887 03f8 FB88     		ldrh	r3, [r7, #6]
 888 03fa 402B     		cmp	r3, #64
 889 03fc 07D0     		beq	.L61
 890              		.loc 1 413 0 discriminator 3
 891 03fe FB88     		ldrh	r3, [r7, #6]
 892 0400 802B     		cmp	r3, #128
 893 0402 04D0     		beq	.L61
 894              		.loc 1 413 0 discriminator 4
 895 0404 0C48     		ldr	r0, .L62
 896 0406 40F29D11 		movw	r1, #413
 897 040a FFF7FEFF 		bl	assert_failed
 898              	.L61:
 414:../SPL/src/stm32f10x_cec.c ****   
 415:../SPL/src/stm32f10x_cec.c ****   tmp = CEC->CSR & 0x2;
 899              		.loc 1 415 0 is_stmt 1
 900 040e 0B4B     		ldr	r3, .L62+4
 901 0410 1B69     		ldr	r3, [r3, #16]
 902 0412 03F00203 		and	r3, r3, #2
 903 0416 FB60     		str	r3, [r7, #12]
 416:../SPL/src/stm32f10x_cec.c ****   
 417:../SPL/src/stm32f10x_cec.c ****   /* Clear the selected CEC interrupt pending bits */
 418:../SPL/src/stm32f10x_cec.c ****   CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 904              		.loc 1 418 0
 905 0418 084B     		ldr	r3, .L62+4
 906 041a 084A     		ldr	r2, .L62+4
 907 041c 1169     		ldr	r1, [r2, #16]
 908 041e FA88     		ldrh	r2, [r7, #6]
 909 0420 6FEA0202 		mvn	r2, r2
 910 0424 22F00300 		bic	r0, r2, #3
 911 0428 FA68     		ldr	r2, [r7, #12]
 912 042a 0243     		orrs	r2, r2, r0
 913 042c 0A40     		ands	r2, r2, r1
 914 042e 1A61     		str	r2, [r3, #16]
 419:../SPL/src/stm32f10x_cec.c **** }
 915              		.loc 1 419 0
 916 0430 07F11007 		add	r7, r7, #16
 917 0434 BD46     		mov	sp, r7
 918 0436 80BD     		pop	{r7, pc}
 919              	.L63:
 920              		.align	2
 921              	.L62:
 922 0438 00000000 		.word	.LC0
 923 043c 00780040 		.word	1073772544
 924              		.cfi_endproc
 925              	.LFE42:
 927              	.Letext0:
 928              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 929              		.file 3 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/stm32f10x.h"
 930              		.file 4 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\SPL\\inc/stm32f10x_cec.h"
 931              		.file 5 "C:\\Users\\PC108\\Export_project\\stm32_ld_vl\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_cec.c
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:18     .text:00000000 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:23     .text:00000000 CEC_DeInit
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:52     .rodata:00000000 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:61     .text:00000020 CEC_Init
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:141    .text:00000090 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:146    .text:00000098 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:151    .text:00000098 CEC_Cmd
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:208    .text:000000dc $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:214    .text:000000e8 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:219    .text:000000e8 CEC_ITConfig
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:262    .text:00000118 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:267    .text:00000120 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:272    .text:00000120 CEC_OwnAddressConfig
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:311    .text:00000148 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:316    .text:00000150 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:321    .text:00000150 CEC_SetPrescaler
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:361    .text:0000017c $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:366    .text:00000184 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:371    .text:00000184 CEC_SendDataByte
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:402    .text:000001a0 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:406    .text:000001a4 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:411    .text:000001a4 CEC_ReceiveDataByte
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:437    .text:000001b8 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:441    .text:000001bc $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:446    .text:000001bc CEC_StartOfMessage
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:471    .text:000001d0 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:475    .text:000001d4 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:480    .text:000001d4 CEC_EndOfMessageCmd
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:523    .text:00000204 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:528    .text:0000020c $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:533    .text:0000020c CEC_GetFlagStatus
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:681    .text:000002ec $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:691    .text:00000308 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:696    .text:00000308 CEC_ClearFlag
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:755    .text:0000035c $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:760    .text:00000364 $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:765    .text:00000364 CEC_GetITStatus
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:846    .text:000003d4 $d
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:851    .text:000003dc $t
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:856    .text:000003dc CEC_ClearITPendingBit
C:\Users\PC108\AppData\Local\Temp\ccGH3M9Y.s:922    .text:00000438 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.9001f459856fa07d79ce9793bb17c6cd
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_exti.h.56.8b2f216f9ded9d03a9eb42ed6973fc04
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_cec.h.69.3b05352e3d7007a358a8fce991202354

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
assert_failed
